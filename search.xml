<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【汇总】android adb 命令功能大全（点击跳转原文）</title>
      <link href="/2025/03/31/%E3%80%90%E6%B1%87%E6%80%BB%E3%80%91android-adb-%E5%91%BD%E4%BB%A4%E5%8A%9F%E8%83%BD%E5%A4%A7%E5%85%A8%EF%BC%88%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E5%8E%9F%E6%96%87%EF%BC%89/"/>
      <url>/2025/03/31/%E3%80%90%E6%B1%87%E6%80%BB%E3%80%91android-adb-%E5%91%BD%E4%BB%A4%E5%8A%9F%E8%83%BD%E5%A4%A7%E5%85%A8%EF%BC%88%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E5%8E%9F%E6%96%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="【汇总】android-adb-命令功能大全-（点击跳转原文）"><a href="#【汇总】android-adb-命令功能大全-（点击跳转原文）" class="headerlink" title="【汇总】android adb 命令功能大全 （点击跳转原文）"></a><a href="https://www.cnblogs.com/wutou/p/17930583.html">【汇总】android adb 命令功能大全 （点击跳转原文）</a></h1><h1 id="前言全局说明"><a href="#前言全局说明" class="headerlink" title="前言全局说明"></a>前言全局说明</h1><blockquote><p>adb 命令是 Android 官方提供，调试 Android 系统的工具。<br>adb 全称为 Android Debug Bridge（Android 调试桥），是 Android SDK 中提供的用于管理 Android 模拟器或真机的工具。<br>adb 是一种功能强大的命令行工具，可让 PC 端与 Android 设备进行通信。adb 命令可执行各种设备操作，例如安装和调试应用，并提供对 Unix shell 的访问权限。</p><p>官方使用说明: <a href="https://adbshell.com/commands">https://adbshell.com/commands</a><br>官方下载说明；<a href="http://adbshell.com/downloads">http://adbshell.com/downloads</a></p></blockquote><h1 id="一、基础命令"><a href="#一、基础命令" class="headerlink" title="一、基础命令"></a>一、基础命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb reboot <span class="comment">#重启</span></span><br><span class="line">adb <span class="built_in">help</span> <span class="comment">#查看ADB 帮助</span></span><br></pre></td></tr></table></figure><h1 id="二、查看设备"><a href="#二、查看设备" class="headerlink" title="二、查看设备"></a>二、查看设备</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices <span class="comment">#查看可连接操作的设备</span></span><br></pre></td></tr></table></figure><h1 id="三、连接设备"><a href="#三、连接设备" class="headerlink" title="三、连接设备"></a>三、连接设备</h1><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb [-d|-e|-s &lt;serialNumber&gt;] &lt;command&gt;</span><br><span class="line">连接指定设备</span><br><span class="line"> </span><br><span class="line">参数：</span><br><span class="line"><span class="deletion">-d 指定当前唯一通过USB 连接的Android 设备为命令目标</span></span><br><span class="line"><span class="deletion">-e 指定当前唯一运行的模拟器为命令目标</span></span><br><span class="line"><span class="deletion">-s &lt;serialNumber&gt; 指定相应serialNumber 号的设备/模拟器为命令目标</span></span><br><span class="line">command 为所需对设备执行的命令</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb connect 127 0.0.1:7555 <span class="comment"># 以 WLAN 网络方式连接（比如：连接电脑上模拟器 MUMU 等）</span></span><br><span class="line">adb disconnect 127.0.0.1:16416 <span class="comment">#断开连接</span></span><br><span class="line">adb -s cf27456f shell <span class="comment"># 指定连接设备使用命令，以USB、串口等方式连接真手机、平板等</span></span><br></pre></td></tr></table></figure><h1 id="四、安装、卸载APP应用"><a href="#四、安装、卸载APP应用" class="headerlink" title="四、安装、卸载APP应用"></a>四、安装、卸载APP应用</h1><h2 id="1-安装应用"><a href="#1-安装应用" class="headerlink" title="1.安装应用"></a>1.安装应用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb install test.apk <span class="comment">#安装应用</span></span><br><span class="line">adb install -r demo.apk <span class="comment">#保留数据和缓存文件，重新安装apk</span></span><br><span class="line">adb install -s test.apk <span class="comment">#安装apk 到sd 卡</span></span><br></pre></td></tr></table></figure><h2 id="2-卸载应用"><a href="#2-卸载应用" class="headerlink" title="2.卸载应用"></a>2.卸载应用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall cn.com.test.mobile <span class="comment">#卸载应用，需要指定包</span></span><br><span class="line">adb uninstall -k cn.com.test.mobile <span class="comment">#卸载app 但保留数据和缓存文件</span></span><br></pre></td></tr></table></figure><blockquote><p>-k: 卸载 APP 但保留数据和缓存文件</p></blockquote><h1 id="五、adb-shell"><a href="#五、adb-shell" class="headerlink" title="五、adb shell"></a>五、adb shell</h1><h3 id="5-1-adb-shell"><a href="#5-1-adb-shell" class="headerlink" title="5-1.adb shell"></a>5-1.adb shell</h3><blockquote><p>command 用途:<br>start [options] <INTENT> 启动 <INTENT> 指定的 Activity<br>startservice [options] <INTENT> 启动 <INTENT> 指定的 Service<br>broadcast [options] <INTENT> 发送 <INTENT> 指定的广播<br>force-stop <packagename> 停止 <packagename> 相关的进程</p><p><INTENT> 参数很灵活，和写 Android 程序时代码里的 Intent 相对应,用于决定 intent 对象的选项如下：<br>-a <ACTION> 指定 action，如android.intent.action.VIEW<br>-c <CATEGORY> 指定 category，如android.intent.category.APP_CONTACTS<br>-n <COMPONENT> 指定完整 component 名，用于明确指定启动哪个 Activity，<br>如: com.example.app/.ExampleActivity</p></blockquote><h4 id="5-1-1-adb-shell-am-start"><a href="#5-1-1-adb-shell-am-start" class="headerlink" title="5-1-1.adb shell am start"></a>5-1-1.adb shell am start</h4><p>在Android中，除了从界面上启动程序之外，还可以从命令行启动程序，使用的是命令行工具am.</p><blockquote><p>adb shell am start [options] <INTENT><br>adb shell am start -n ｛包(package)名｝/｛包名｝.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> start an Activity: am start [-D] &lt;INTENT&gt;</span><br><span class="line">        -D: enable debugging</span><br><span class="line"> </span><br><span class="line">    send a broadcast Intent: am broadcast &lt;INTENT&gt;</span><br><span class="line"> </span><br><span class="line">    start an Instrumentation: am instrument [flags] &lt;COMPONENT&gt;</span><br><span class="line">        -r: print raw results (otherwise decode REPORT_KEY_STREAMRESULT)</span><br><span class="line">        -e &lt;NAME&gt; &lt;VALUE&gt;: set argument &lt;NAME&gt; to &lt;VALUE&gt;</span><br><span class="line">        -p &lt;FILE&gt;: write profiling data to &lt;FILE&gt;</span><br><span class="line">        -w: wait for instrumentation to finish before returning</span><br><span class="line"> </span><br><span class="line">    start profiling: am profile &lt;PROCESS&gt; start &lt;FILE&gt;</span><br><span class="line">    stop profiling: am profile &lt;PROCESS&gt; stop</span><br><span class="line"> </span><br><span class="line">    &lt;INTENT&gt; specifications include these flags:</span><br><span class="line">        [-a &lt;ACTION&gt;] [-d &lt;DATA_URI&gt;] [-t &lt;MIME_TYPE&gt;]</span><br><span class="line">        [-c &lt;CATEGORY&gt; [-c &lt;CATEGORY&gt;] ...]</span><br><span class="line">        [-e|--es &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt; ...]</span><br><span class="line">        [--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt; ...]</span><br><span class="line">        [-e|--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt; ...]</span><br><span class="line">        [-n &lt;COMPONENT&gt;] [-f &lt;FLAGS&gt;] [&lt;URI&gt;]</span><br><span class="line">adb shell am start -n &lt;COMPONENT&gt;  #指定完整 component 名，用于明确指定启动哪个Activity</span><br><span class="line">adb shell am start -n com.tencent.mm/.ui.LauncherUI  #表示调起微信主界面</span><br><span class="line">adb shell am start -n com.tencent.mm/com.tencent.mm.ui.LauncherUI  #表示调起微信主界面</span><br><span class="line">adb shell am start -n cn.com.test.mobile/.ui.SplashActivity #启动应用</span><br><span class="line">adb shell am start -a android.intent.action.MAIN -n com.android.settings/com.android.settings.SubSettings #打开设置界面</span><br><span class="line">adb shell am start -n com.android.browser/com.android.browser.BrowserActivity ## 打开Browser（浏览器）</span><br><span class="line">adb shell am start -a android.intent.action.VIEW -d  http://www.163.com/  ##浏览器打开指定网址 </span><br><span class="line">adb shell am start -a android.intent.action.VIEW  http://www.qq.com/  ##浏览器打开指定网址 </span><br></pre></td></tr></table></figure><blockquote><p>start 相关说明：<a href="https://blog.csdn.net/yegshun/article/details/80982404">https://blog.csdn.net/yegshun/article/details/80982404</a></p></blockquote><h4 id="5-1-2-adb-shell-am-startservice"><a href="#5-1-2-adb-shell-am-startservice" class="headerlink" title="5-1-2.adb shell am startservice"></a>5-1-2.adb shell am startservice</h4><blockquote><p>adb shell am startservice [options] <INTENT></p></blockquote><p>示例： 表示调起微信的某 Service 界面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell am startservice -n com.tencent.mm/com.tencent.mm.plugin.accountsync.model.AccountAuthenticatorService</span><br><span class="line">或</span><br><span class="line">adb shell am startservice -n com.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService</span><br></pre></td></tr></table></figure><h4 id="5-1-3-adb-shell-am-broadcast"><a href="#5-1-3-adb-shell-am-broadcast" class="headerlink" title="5-1-3.adb shell am broadcast"></a>5-1-3.adb shell am broadcast</h4><blockquote><p>发送广播, 可以向所有组件广播，也可以只向指定组件广播。<br>adb shell am broadcast [options] <INTENT><br>adb shell am broadcast -a <action> [-d <data_uri>] [-t <mime_type>] [-c <category> [-c <category>] …]</p><p>-a参数指定广播的Action<br>-d参数指定广播的Data URI<br>-t参数指定广播的MIME类型<br>-c参数指定广播的Category</p></blockquote><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#向所有组件广播 BOOT_COMPLETED (开机广播)</span></span><br><span class="line">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED</span><br><span class="line"> </span><br><span class="line"><span class="comment">#如：只向 org.mazhuang.boottimemeasure/.BootCompletedReceiver 广播 BOOT_COMPLETED：</span></span><br><span class="line">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED -n org.mazhuang.boottimemeasure/.BootCompletedReceiver</span><br></pre></td></tr></table></figure><p>系统预定义的广播（文字、图片版）：<br>更多详细：<a href="https://www.cnblogs.com/wutou/p/17940047">https://www.cnblogs.com/wutou/p/17940047</a></p><h4 id="5-1-4-adb-shell-am-force-stop"><a href="#5-1-4-adb-shell-am-force-stop" class="headerlink" title="5-1-4.adb shell am force-stop"></a>5-1-4.adb shell am force-stop</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell am force-stop cn.com.test.mobile <span class="comment">#强制停止应用</span></span><br><span class="line">adb shell am force-stop com.tencent.mm <span class="comment">#强制停止微信</span></span><br></pre></td></tr></table></figure><h3 id="5-2-adb-shell-pm"><a href="#5-2-adb-shell-pm" class="headerlink" title="5-2.adb shell pm"></a>5-2.adb shell pm</h3><h4 id="5-2-1-adb-shell-pm-list"><a href="#5-2-1-adb-shell-pm-list" class="headerlink" title="5-2-1 adb shell pm list"></a>5-2-1 adb shell pm list</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages <span class="comment">#列出手机装的所有app 的包名</span></span><br><span class="line">adb shell pm list packages -s <span class="comment">#列出系统应用的所有包名</span></span><br><span class="line">adb shell pm list packages -3 <span class="comment">#列出除了系统应用的第三方应用包名</span></span><br><span class="line">adb shell pm list packages | find <span class="string">&quot;test&quot;</span> <span class="comment">#win 列出手机装带有的test的包</span></span><br><span class="line">adb shell pm list packages | grep ‘<span class="built_in">test</span>’ <span class="comment">#linux 列出手机装带有的test的包</span></span><br></pre></td></tr></table></figure><h4 id="5-2-2-adb-shell-pm-clear"><a href="#5-2-2-adb-shell-pm-clear" class="headerlink" title="5-2-2 adb shell pm clear"></a>5-2-2 adb shell pm clear</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm clear cn.com.test.mobile <span class="comment">#清除应用数据与缓存</span></span><br></pre></td></tr></table></figure><h3 id="5-3-adb-shell-dumpsys"><a href="#5-3-adb-shell-dumpsys" class="headerlink" title="5-3.adb shell dumpsys"></a>5-3.adb shell dumpsys</h3><p>Dumpsys用户系统诊断，它运行在设备上，并提供系统服务状态信息<br>更详细用法：<a href="https://www.cnblogs.com/xiaowenshu/p/10390246.html">https://www.cnblogs.com/xiaowenshu/p/10390246.html</a></p><h4 id="5-3-1-adb-shell-dumpsys-options"><a href="#5-3-1-adb-shell-dumpsys-options" class="headerlink" title="5-3-1.adb shell dumpsys [options]"></a>5-3-1.adb shell dumpsys [options]</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys package <span class="comment">#包信息Package Information</span></span><br><span class="line"> </span><br><span class="line">adb shell dumpsys meminfo <span class="comment">#内存使用情况Memory Usage</span></span><br><span class="line">adb shell dumpsys battery <span class="comment">#电池状况</span></span><br><span class="line">adb shell dumpsys window displays <span class="comment">#显示屏参数</span></span><br><span class="line">adb shell dumpsys window | findstr mCurrentFocus  <span class="comment"># 显示当前开启窗口名</span></span><br><span class="line">adb shell dumpsys bluetooth_manager <span class="comment">#查看蓝牙信息</span></span><br><span class="line">adb shell dumpsys wifi <span class="comment">#查看Wi-Fi 信息</span></span><br><span class="line">adb shell dumpsys gfxinfo &lt;package_name&gt; <span class="comment">#APP界面的帧率</span></span><br><span class="line">adb shell <span class="string">&quot;dumpsys window | grep mCurrentFocus&quot;</span> <span class="comment"># 查看前台显示的Activity界面</span></span><br></pre></td></tr></table></figure><p>示例：</p><blockquote><p>adb shell dumpsys package com.tencent.mm 显示微信包全部信息<br>adb shell dumpsys package com.jingdong.app.mall | findstr version ## 查看‘京东’安装包版本</p></blockquote><h4 id="5-3-2-adb-shell-dumpsys-activity"><a href="#5-3-2-adb-shell-dumpsys-activity" class="headerlink" title="5-3-2.adb shell dumpsys activity"></a>5-3-2.adb shell dumpsys activity</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity services [&lt;packagename&gt;] <span class="comment">#查看正在运行的Services</span></span><br></pre></td></tr></table></figure><blockquote><p><packagename> 参数不是必须的，指定<packagename> 表示查看与某个包名相关的Services，不指定表示查看所有Services。</p><p><packagename> 不一定要给出完整的包名，比如运行adb shell dumpsys activity services org.zhihu，那么包名org.zhihu.demo1、org.zhihu.demo2 和org.zhihu 等相关的Services 都会列出来。</p></blockquote><h4 id="5-3-3-adb-shell-dumpsys-iphonesubinfo"><a href="#5-3-3-adb-shell-dumpsys-iphonesubinfo" class="headerlink" title="5-3-3.adb shell dumpsys iphonesubinfo"></a>5-3-3.adb shell dumpsys iphonesubinfo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys iphonesubinfo <span class="comment">#IMEI( Android 5.0 及以下有效)</span></span><br><span class="line"><span class="comment">#而在 Android 5.0 及以上版本里这个命令输出为空，得通过其它方式获取了（需要 root 权限）：</span></span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">service call iphonesubinfo 1</span><br></pre></td></tr></table></figure><h4 id="5-3-4-adb-shell-dumpsys-battery"><a href="#5-3-4-adb-shell-dumpsys-battery" class="headerlink" title="5-3-4.adb shell dumpsys battery"></a>5-3-4.adb shell dumpsys battery</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys battery <span class="comment">#显示电磁信息</span></span><br><span class="line">adb shell <span class="string">&quot;dumpsys battery | grep status&quot;</span> <span class="comment">#只显示电池信息，包含status关键字的</span></span><br><span class="line">adb shell <span class="string">&quot;dumpsys battery | grep powered&quot;</span> <span class="comment">#只显示电池信息，包含powered关键字的</span></span><br></pre></td></tr></table></figure><blockquote><p>因为在CMD 终端下执行命令 | 会被解析，所以把 “dumpsys battery | grep powered” 用双引号括起来</p></blockquote><h3 id="5-4-adb-shell-getprop-setprop"><a href="#5-4-adb-shell-getprop-setprop" class="headerlink" title="5-4.adb shell getprop/setprop"></a>5-4.adb shell getprop/setprop</h3><h4 id="5-4-1-adb-shell-getprop"><a href="#5-4-1-adb-shell-getprop" class="headerlink" title="5-4-1.adb shell getprop"></a>5-4-1.adb shell getprop</h4><blockquote><p>列出所有配置属性值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.model <span class="comment">#查看设备型号</span></span><br><span class="line">adb shell getprop ro.build.version.release <span class="comment">#查看Android 系统版本号</span></span><br><span class="line">adb shell getprop gsm.network.type <span class="comment">#驻网类型</span></span><br><span class="line">adb shell getprop gsm.operator.alpha <span class="comment">#运营商类型</span></span><br><span class="line">adb shell <span class="built_in">cat</span> /system/build.prop | grep ro.product.cpu.abi <span class="comment"># 获取CPU架构</span></span><br><span class="line">adb shell <span class="built_in">cat</span> /system/build.prop | find “ro.product.cpu.abi” <span class="comment"># 获取CPU架构</span></span><br><span class="line">adb shell getprop ro.product.cpu.abi <span class="comment"># 获取CPU架构</span></span><br></pre></td></tr></table></figure><p>查看设备信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.brand <span class="comment">#设备品牌</span></span><br><span class="line">adb shell getprop ro.product.board <span class="comment">#设备处理器型号</span></span><br><span class="line">adb shell dumpsys SurfaceFlinger|findstr <span class="string">&quot;GLES&quot;</span> <span class="comment">#设备引擎渲染模式</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/597729/202312/597729-20231227162331668-1573389077.png" alt="image"></p><h3 id="5-4-2-adb-shell-setprop"><a href="#5-4-2-adb-shell-setprop" class="headerlink" title="5-4-2.adb shell setprop"></a>5-4-2.adb shell setprop</h3><blockquote><p>setprop [key] [value] 设置指定key的属性值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setprop service.adb.tcp.port 5555</span><br></pre></td></tr></table></figure><h3 id="5-5-adb-shell-top"><a href="#5-5-adb-shell-top" class="headerlink" title="5-5.adb shell top"></a>5-5.adb shell top</h3><p>使用方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]</span><br></pre></td></tr></table></figure><p>参数如下：</p><blockquote><p>-m num 最多显示多少个进程<br>-n num 刷新多少次后退出<br>-d num 刷新时间间隔（单位秒，默认值 5）<br>-s col 按某列排序（可用 col 值：cpu, vss, rss, thr）<br>-t 显示线程信息<br>-h 显示帮助文档</p></blockquote><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell top -s 10 <span class="comment">#查看占用内存前10 的app</span></span><br></pre></td></tr></table></figure><h3 id="5-6-adb-shell-wm"><a href="#5-6-adb-shell-wm" class="headerlink" title="5-6.adb shell wm"></a>5-6.adb shell wm</h3><h4 id="5-6-1-adb-shell-wm-size"><a href="#5-6-1-adb-shell-wm-size" class="headerlink" title="5-6-1.adb shell wm size"></a>5-6-1.adb shell wm size</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size <span class="comment">#查看屏幕分辨率</span></span><br><span class="line">adb shell wm size 480x1024 <span class="comment">#将分辨率修改为 480px * 1024px</span></span><br><span class="line">adb shell wm size reset <span class="comment">#恢复原分辨率</span></span><br></pre></td></tr></table></figure><h4 id="5-6-2-adb-shell-wm-density"><a href="#5-6-2-adb-shell-wm-density" class="headerlink" title="5-6-2.adb shell wm density"></a>5-6-2.adb shell wm density</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm density <span class="comment">#查看屏幕密度</span></span><br><span class="line">adb shell wm density reset <span class="comment">#恢复原屏幕密度</span></span><br></pre></td></tr></table></figure><h4 id="5-6-3-adb-shell-wm-overscan"><a href="#5-6-3-adb-shell-wm-overscan" class="headerlink" title="5-6-3.adb shell wm overscan"></a>5-6-3.adb shell wm overscan</h4><p>显示区域</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm overscan <span class="comment"># 四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 100px留白</span></span><br><span class="line">adb shell wm overscan reset <span class="comment">#恢复显示区域</span></span><br></pre></td></tr></table></figure><h3 id="5-7-adb-shell-input"><a href="#5-7-adb-shell-input" class="headerlink" title="5-7.adb shell input"></a>5-7.adb shell input</h3><h4 id="5-7-1-adb-shell-input-keyevent"><a href="#5-7-1-adb-shell-input-keyevent" class="headerlink" title="5-7-1.adb shell input keyevent"></a>5-7-1.adb shell input keyevent</h4><blockquote><p>adb shell input keyevent <keycode></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 3   <span class="comment">#HOME 键</span></span><br><span class="line">adb shell input keyevent 4   <span class="comment">#返回键</span></span><br><span class="line">adb shell input keyevent 24  <span class="comment">#增加音量</span></span><br><span class="line">adb shell input keyevent 25  <span class="comment">#降低音量</span></span><br><span class="line">adb shell input keyevent 26  <span class="comment">#电源键</span></span><br><span class="line">adb shell input keyevent 82  <span class="comment">#菜单键</span></span><br><span class="line">adb shell input keyevent 85  <span class="comment">#播放/暂停</span></span><br><span class="line">adb shell input keyevent 86  <span class="comment">#停止播放</span></span><br><span class="line">adb shell input keyevent 87  <span class="comment">#播放下一首</span></span><br><span class="line">adb shell input keyevent 88  <span class="comment">#播放上一首</span></span><br><span class="line">adb shell input keyevent 126 <span class="comment">#恢复播放</span></span><br><span class="line">adb shell input keyevent 127 <span class="comment">#暂停播放</span></span><br><span class="line">adb shell input keyevent 164 <span class="comment">#静音</span></span><br><span class="line">adb shell input keyevent 224 <span class="comment">#点亮屏幕</span></span><br><span class="line">adb shell input keyevent 223 <span class="comment">#熄灭屏幕</span></span><br></pre></td></tr></table></figure><blockquote><p>keycode位操作参数，不同的 keycode 能实现不同的功能<br>完整的功能见：<a href="https://developer.android.com/reference/android/view/KeyEvent.html">https://developer.android.com/reference/android/view/KeyEvent.html</a></p></blockquote><p>keycode 能实现不同的功能，对应的编码如下：<br><img src="https://img2023.cnblogs.com/blog/597729/202312/597729-20231227154527551-133786719.png" alt="image"></p><h4 id="5-7-2-adb-shell-input-swipe"><a href="#5-7-2-adb-shell-input-swipe" class="headerlink" title="5-7-2.adb shell input swipe"></a>5-7-2.adb shell input swipe</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input swipe 300 1000 300 500  <span class="comment">#滑动解锁，向上滑动手势解锁</span></span><br></pre></td></tr></table></figure><blockquote><p>参数: 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标</p></blockquote><h4 id="5-7-3-adb-shell-input-text"><a href="#5-7-3-adb-shell-input-text" class="headerlink" title="5-7-3.adb shell input text"></a>5-7-3.adb shell input text</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input text hello <span class="comment">#焦点处于某文本框时输入文本hello</span></span><br></pre></td></tr></table></figure><h3 id="5-8-adb-shell-dmesg"><a href="#5-8-adb-shell-dmesg" class="headerlink" title="5-8.adb shell dmesg"></a>5-8.adb shell dmesg</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dmesg <span class="comment">#查看内核日志</span></span><br></pre></td></tr></table></figure><h3 id="5-9-adb-shell-settings"><a href="#5-9-adb-shell-settings" class="headerlink" title="5-9.adb shell settings"></a>5-9.adb shell settings</h3><p>更详细说明：<a href="https://www.cnblogs.com/wutou/p/17945015">https://www.cnblogs.com/wutou/p/17945015</a></p><h4 id="5-9-1-adb-shell-settings-get"><a href="#5-9-1-adb-shell-settings-get" class="headerlink" title="5-9-1.adb shell settings get"></a>5-9-1.adb shell settings get</h4><blockquote><p>adb shell settings get secure android_id #android_id</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings get system screen_off_timeout <span class="comment">#获取屏幕休眠时间</span></span><br><span class="line">adb shell settings get global auto_time <span class="comment">#获取日期时间选项中通过网络获取时间的状态，1为允许、0为不允许。更改该状态，从1改为0</span></span><br><span class="line">adb shell settings get system screen_brightness <span class="comment">#获取当前屏幕亮度值</span></span><br><span class="line">adb shell settings get secure default_input_method io.appium.android.ime/.UnicodeIME <span class="comment">#默认为Appium使用中文输入时安装的输入法</span></span><br><span class="line"> </span><br><span class="line">adb shell settings get secure default_input_method com.sohu.inputmethod.sogouoem/.SogouIME <span class="comment">#默认搜狗输入法</span></span><br><span class="line"> </span><br><span class="line">adb shell settings get global http_proxy <span class="comment">#查看代理是否设置成功</span></span><br><span class="line">adb shell settings get global wifi_on <span class="comment">#查看WiFi 状态。1：开 0：关</span></span><br></pre></td></tr></table></figure><h4 id="5-9-2-adb-shell-settings-put"><a href="#5-9-2-adb-shell-settings-put" class="headerlink" title="5-9-2.adb shell settings put"></a>5-9-2.adb shell settings put</h4><h4 id="5-9-2-1-adb-shell-settings-put-system"><a href="#5-9-2-1-adb-shell-settings-put-system" class="headerlink" title="5-9-2-1.adb shell settings put system"></a>5-9-2-1.adb shell settings put system</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put system screen_brightness 150 <span class="comment">#更改亮度值（亮度值在0—255之间）</span></span><br><span class="line">adb shell settings put system screen_off_timeout 600000 <span class="comment">#设置屏幕休眠时间（毫秒）</span></span><br><span class="line">adb shell settings put system screen_off_timeout 2147483647 <span class="comment">#设置永不锁屏</span></span><br><span class="line">adb shell settings put system accelerometer_rotation 0 <span class="comment">#禁用屏幕自动旋转</span></span><br><span class="line">adb shell settings put system accelerometer_rotation 1 <span class="comment">#启用屏幕自动旋转</span></span><br><span class="line">adb shell settings put system user_rotation 1 <span class="comment">#屏幕旋转到横向模式</span></span><br><span class="line">adb shell settings put system user_rotation 3 <span class="comment">#屏幕旋转 270° clockwise</span></span><br></pre></td></tr></table></figure><blockquote><p>user_rotation后取值范围为0，1，2，3</p></blockquote><h4 id="5-9-2-2-adb-shell-settings-put-secure"><a href="#5-9-2-2-adb-shell-settings-put-secure" class="headerlink" title="5-9-2-2.adb shell settings put secure"></a>5-9-2-2.adb shell settings put secure</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put secure install_non_market_apps1 <span class="comment">#允许安装来源</span></span><br><span class="line">adb shell settings put secure location_providers_allowed +gps <span class="comment">#开启GPS定位功能</span></span><br><span class="line">adb shell settings put secure location_providers_allowed -gps <span class="comment">#关闭GPS定位功能,或者移除定位服务提供者</span></span><br><span class="line">adb shell settings put secure display_density_forced 440</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="5-9-2-3-adb-shell-settings-put-global"><a href="#5-9-2-3-adb-shell-settings-put-global" class="headerlink" title="5-9-2-3.adb shell settings put global"></a>5-9-2-3.adb shell settings put global</h4><blockquote><p>adb shell settings put global policy_control <key-values></p><p><key-values> 可由如下几种键及其对应的值组成，格式为 <key1>=<value1>:<key2>=<value2></p></blockquote><p>key 键对应的值:<br><img src="https://img2023.cnblogs.com/blog/597729/202312/597729-20231227164924931-1676260306.png" alt="image"></p><p>这些键对应的值可则如下值用逗号组合:<br><img src="https://img2023.cnblogs.com/blog/597729/202312/597729-20231227164949178-1020343058.png" alt="image"></p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置在所有界面下都同时隐藏状态栏和导航栏</span></span><br><span class="line">adb shell settings put global policy_control immersive.full=*</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置在包名为 com.package1 和 com.package2 的应用里隐藏状态栏，在除了包名为 com.package3 的所有应用里隐藏导航栏。</span></span><br><span class="line">adb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3</span><br><span class="line"> </span><br><span class="line">adb shell settings put global adb_enabled 0 <span class="comment">#关闭 USB 调试模式。关闭后，使用命令无法恢复开启USB 调试模式，只能通过屏幕手动操作</span></span><br><span class="line">adb shell settings put global captive_portal_detection_enabled 0 <span class="comment">#关闭系统网络检查服务</span></span><br><span class="line">adb shell settings put global captive_portal_detection_enabled 1 <span class="comment">#开启还原网络检查服务</span></span><br><span class="line"> </span><br><span class="line">adb shell settings put global http_proxy 127.0.0.1:1984 <span class="comment">#设置全局代理</span></span><br><span class="line">adb shell settings put global http_proxy :0 <span class="comment">#关闭代理(无需重启)，只清空填写的IP和端口</span></span><br><span class="line">adb shell settings put global http_proxy null <span class="comment">#同上，关闭代理(因为必须要一个参数，所以写:0和null效果一样)</span></span><br><span class="line"> </span><br><span class="line">adb shell settings put global https_proxy 你电脑的IP:你抓包软件的监听端口 <span class="comment">#设置https全局代理</span></span><br><span class="line"> </span><br><span class="line">adb shell settings put global global_http_proxy_exclusion_list 2.3.3.3,1.1.1.1 <span class="comment"># (旧版)http代理排除 2.3.3.3 和 1.1.1.1（这两个网址不使用代理）</span></span><br><span class="line">adb shell settings put global global_http_proxy_exclusion_list baidu.com,jd.com <span class="comment"># (旧版)http代理排除 baidu.com和jd.com（这两个网址不使用代理）</span></span><br><span class="line"> </span><br><span class="line">adb shell settings put global global_http_proxy_exclusion_list null <span class="comment"># (旧版)http代理排除列表，清空</span></span><br><span class="line">adb shell settings delete global ProxyExclusionList  <span class="comment"># (旧版)http代理排除列表，清空</span></span><br><span class="line"> </span><br><span class="line">adb shell settings put global ProxyExclusionList 2.2.22.2 <span class="comment">## (新版)设置代理排除列表</span></span><br><span class="line">adb shell settings get global ProxyExclusionList  <span class="comment">## (新版)获取代理排除列表</span></span><br><span class="line"> </span><br><span class="line">adb shell settings put global install_non_market_apps 0 <span class="comment">#禁止安装非市场应用</span></span><br><span class="line">adb shell settings put global install_non_market_apps 1 <span class="comment">#允许安装非市场应用</span></span><br><span class="line"> </span><br><span class="line">adb shell settings put global wifi_sleep_policy 2 <span class="comment">#屏幕关闭时，设置WiFi在屏幕关闭时始终保持连接</span></span><br><span class="line">adb shell settings put global ntp_server asia.pool.ntp.org <span class="comment">#设置NTP服务器为亚洲地区的服务器</span></span><br></pre></td></tr></table></figure><blockquote><p>设置后的配置文件路径：<br>老版本，文件路径：/data/system/users/0/settings_global.xml<br>文件路径：/data/misc/apexdata/com.android.wifi/MuMuWifiConfigStore.xml<br><a href="https://www.cnblogs.com/wutou/p/18175319">https://www.cnblogs.com/wutou/p/18175319</a></p></blockquote><p>飞行模式开启后，就可以发送广播，来更改飞行模式的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global airplane_mode_on 1</span><br><span class="line">adb shell am broadcast -a android.intent.action.AIRPLANE_MODE --ez state <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>飞行模式关闭：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global airplane_mode_on 0</span><br><span class="line">adb shell am broadcast -a android.intent.action.AIRPLANE_MODE --ez state <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>动画缩放</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global window_animation_scale 0 <span class="comment">#关闭窗口动画缩放</span></span><br><span class="line">adb shell settings put global transition_animation_scale 0 <span class="comment"># 关闭过渡动画缩放：</span></span><br><span class="line">adb shell settings put global animator_duration_scale 0 <span class="comment">#关闭动画持续时间缩放</span></span><br></pre></td></tr></table></figure><h4 id="5-9-3-adb-shell-settings-delete"><a href="#5-9-3-adb-shell-settings-delete" class="headerlink" title="5-9-3.adb shell settings delete"></a>5-9-3.adb shell settings delete</h4><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global http_proxy <span class="comment">#取消代理</span></span><br><span class="line">adb shell settings delete global global_http_proxy_host <span class="comment">#取消代理</span></span><br><span class="line">adb shell settings delete global global_http_proxy_port <span class="comment">#取消代理端口</span></span><br><span class="line">adb shell settings delete global captive_portal_server <span class="comment">#开启还原网络检查服务</span></span><br></pre></td></tr></table></figure><h4 id="5-9-4-adb-shell-settings-list"><a href="#5-9-4-adb-shell-settings-list" class="headerlink" title="5-9-4.adb shell settings list"></a>5-9-4.adb shell settings list</h4><h5 id="5-9-4-1-adb-shell-settings-list-system"><a href="#5-9-4-1-adb-shell-settings-list-system" class="headerlink" title="5-9-4-1.adb shell settings list system"></a>5-9-4-1.adb shell settings list system</h5><blockquote><p>系统设置<br>示例：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell <span class="string">&quot;settings list system | grep timeout&quot;</span> <span class="comment">#获取自动锁屏时间</span></span><br></pre></td></tr></table></figure><h5 id="5-9-4-2-adb-shell-settings-list-secure"><a href="#5-9-4-2-adb-shell-settings-list-secure" class="headerlink" title="5-9-4-2.adb shell settings list secure"></a>5-9-4-2.adb shell settings list secure</h5><blockquote><p>安全设置<br>示例：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5-9-4-3-adb-shell-settings-list-global"><a href="#5-9-4-3-adb-shell-settings-list-global" class="headerlink" title="5-9-4-3.adb shell settings list global"></a>5-9-4-3.adb shell settings list global</h5><blockquote><p>全局设置<br>示例：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-9-5-adb-shell-settings-reset"><a href="#5-9-5-adb-shell-settings-reset" class="headerlink" title="5-9-5.adb shell settings reset"></a>5-9-5.adb shell settings reset</h4><h5 id="5-9-5-adb-shell-settings-reset-global"><a href="#5-9-5-adb-shell-settings-reset-global" class="headerlink" title="5-9-5.adb shell settings reset global"></a>5-9-5.adb shell settings reset global</h5><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings reset global http_proxy <span class="comment">#代理恢复默认（取消代理）</span></span><br></pre></td></tr></table></figure><h3 id="5-10-adb-shell-ifconfig"><a href="#5-10-adb-shell-ifconfig" class="headerlink" title="5-10.adb shell ifconfig"></a>5-10.adb shell ifconfig</h3><p>获取 IP 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell ifconfig | find “Mask”</span><br><span class="line">adb shell ifconfig wlan0 <span class="comment">#设备连着 WiFi，可以使用如下命令来查看局域网 IP</span></span><br><span class="line">adb shell netcfg <span class="comment"># 上面两个无结果可以用这个，查看网络连接状态</span></span><br></pre></td></tr></table></figure><h3 id="5-11-adb-shell-运行Linux命令"><a href="#5-11-adb-shell-运行Linux命令" class="headerlink" title="5-11.adb shell $(运行Linux命令)"></a>5-11.adb shell $(运行Linux命令)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">adb shell <span class="string">&quot;cat /sys/class/net/wlan0/address&quot;</span> <span class="comment"># 获取 Mac 地址，设备不同可能地址不同</span></span><br><span class="line">adb shell <span class="string">&quot;cat /proc/cpuinfo&quot;</span> <span class="comment">#获取 CPU 信息</span></span><br><span class="line">adb shell <span class="string">&quot;cat /proc/meminfo&quot;</span> <span class="comment">#获取 内存信息</span></span><br><span class="line">adb shell <span class="string">&quot;cat /system/build.prop&quot;</span> <span class="comment">#获取 更多硬件与系统属性</span></span><br><span class="line">adb shell <span class="string">&quot;cat /data/misc/wifi/*.conf&quot;</span> <span class="comment">#查看连接过的 WiFi 密码。需要 root 权限</span></span><br><span class="line">adb shell <span class="string">&quot;date -s 20190531.131600&quot;</span>  <span class="comment">#将系统日期和时间更改为 2019 年 05 月 31 日 13 点 16 分 00 秒。需要 root 权限。&quot;</span></span><br><span class="line">adb shell <span class="string">&quot;cat /proc/net/wireless | grep wlan0 | awk &#x27;&#123;print <span class="variable">$3</span>&#125;&#x27;&quot;</span> <span class="comment">#获取信号强度</span></span><br><span class="line">adb shell <span class="string">&quot;cat /proc/net/wireless | grep wlan0 | awk &#x27;&#123;print 5&#125;&#x27;&quot;</span> <span class="comment">#获取信号质量：单位dBm</span></span><br><span class="line">adb shell <span class="string">&quot;iwconfig wlan0 | sed &#x27;s/ /\n/g&#x27; | grep -i Rate | sed &#x27;s/=/ /g&#x27;|awk &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;&quot;</span> <span class="comment">#网口的传输速率：Mb/s = 1000000bps</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2025/03/28/73fd9f770eb645c38f1f9c1abcbe1c59" alt="image"></p><h3 id="5-12-adb-shell-screencap"><a href="#5-12-adb-shell-screencap" class="headerlink" title="5-12.adb shell screencap"></a>5-12.adb shell screencap</h3><h4 id="5-12-1-老版本截屏"><a href="#5-12-1-老版本截屏" class="headerlink" title="5-12-1.老版本截屏"></a>5-12-1.老版本截屏</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p /sdcard/img.png <span class="comment">#老版本截图先保存在设备端</span></span><br><span class="line">adb pull /sdcard/img.png <span class="comment"># 通过pull拷贝到本地</span></span><br></pre></td></tr></table></figure><blockquote><p>screencap 参数：<br>-p 指定保存文件为 png 格式<br>-d display-id 指定截图的显示屏编号（有多显示屏的情况下）</p></blockquote><h4 id="5-12-2-新版本截屏"><a href="#5-12-2-新版本截屏" class="headerlink" title="5-12-2.新版本截屏"></a>5-12-2.新版本截屏</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb exec-out screencap -p &gt; img.png  <span class="comment">#老版本无exec-out命令，只适合于新版的截图</span></span><br></pre></td></tr></table></figure><blockquote><p>更详细，查看第八项</p></blockquote><h3 id="5-13-adb-shell-screenrecord"><a href="#5-13-adb-shell-screenrecord" class="headerlink" title="5-13.adb shell screenrecord"></a>5-13.adb shell screenrecord</h3><p>录制屏幕</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord /sdcard/filename.mp4</span><br></pre></td></tr></table></figure><blockquote><p>screenrecord 参数：<br>—size WIDTHxHEIGHT 视频的尺寸，比如 1280x720，默认是屏幕分辨率。<br>—bit-rate RATE 视频的比特率，默认是 4Mbps。<br>—time-limit TIME 录制时长，单位秒。默认录制时间和最长录制时间都是180s。<br>—verbose 输出更多信息。</p></blockquote><h3 id="5-14-检测设备是否已-root"><a href="#5-14-检测设备是否已-root" class="headerlink" title="5-14.检测设备是否已 root"></a>5-14.检测设备是否已 root</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br></pre></td></tr></table></figure><blockquote><p>此时命令行提示符是 $ 则表示没有 root 权限，是 # 则表示已 root。</p></blockquote><h3 id="5-15-adb-shell-monkey"><a href="#5-15-adb-shell-monkey" class="headerlink" title="5-15.adb shell monkey"></a>5-15.adb shell monkey</h3><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p &lt;packagename&gt; -v 500 <span class="comment"># 向 &lt;packagename&gt; 指定的应用程序发送 500 个伪随机事件</span></span><br></pre></td></tr></table></figure><p>monkey 官方文档 <a href="https://developer.android.com/studio/test/monkey.html">https://developer.android.com/studio/test/monkey.html</a></p><h3 id="5-16-adb-shell-svc"><a href="#5-16-adb-shell-svc" class="headerlink" title="5-16.adb shell svc"></a>5-16.adb shell svc</h3><h4 id="5-16-1-adb-shell-svc-wifi"><a href="#5-16-1-adb-shell-svc-wifi" class="headerlink" title="5-16-1.adb shell svc wifi"></a>5-16-1.adb shell svc wifi</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb shell svc wifi <span class="built_in">enable</span> <span class="comment">#开启 WiFi。需要 root 权限。</span></span><br><span class="line">adb shell svc wifi <span class="built_in">disable</span> <span class="comment">#关闭 WiFi。需要 root 权限</span></span><br><span class="line">adb shell svc data <span class="built_in">enable</span>/disadle <span class="comment">#数据开关</span></span><br></pre></td></tr></table></figure><h3 id="5-17-adb-shell-ps"><a href="#5-17-adb-shell-ps" class="headerlink" title="5-17.adb shell ps"></a>5-17.adb shell ps</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps <span class="comment">#查看进程</span></span><br></pre></td></tr></table></figure><h3 id="5-18-adb-shell-c"><a href="#5-18-adb-shell-c" class="headerlink" title="5-18.adb shell -c"></a>5-18.adb shell -c</h3><blockquote><p>-c ：不进入终端的命令行执行命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell su -c setprop service.adb.tcp.port 5555 <span class="comment">#以root用户执行，添加端口的命令</span></span><br></pre></td></tr></table></figure><blockquote><p>su ：获取root权限<br>-c setprop service.adb.tcp.port 5555 ：获取root命令后，执行向/system/build.prop文件中添加端口</p></blockquote><h3 id="5-19-adb-shell-getevent"><a href="#5-19-adb-shell-getevent" class="headerlink" title="5-19.adb shell getevent"></a>5-19.adb shell getevent</h3><blockquote><p>输出所有event设备的基本信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell getevent --<span class="built_in">help</span> <span class="comment">#帮助</span></span><br><span class="line">adb shell getevent <span class="comment">#输出所有event设备的基本信息</span></span><br><span class="line">adb shell getevent -c 10 <span class="comment">#输出10条信息后退出</span></span><br><span class="line">adb shell getevent -l  <span class="comment">#将type、code、value以对应的常量名称显示</span></span><br><span class="line">adb shell <span class="string">&#x27;getevent -p grep -E &quot;0035|0036&quot;&#x27;</span> <span class="comment">#屏幕</span></span><br></pre></td></tr></table></figure><blockquote><p>输出格式：设备名 事件type 事件code 事件value<br>getevent输出的是16进制，sendevent使用的是10进制，注意转换。</p></blockquote><h3 id="5-20-adb-shell-sendevent"><a href="#5-20-adb-shell-sendevent" class="headerlink" title="5-20.adb shell sendevent"></a>5-20.adb shell sendevent</h3><blockquote><p>设置event设备的基本信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell sendevent --<span class="built_in">help</span> <span class="comment">#帮助</span></span><br><span class="line">adb shell sendevent <span class="comment">#设置event设备的基本信息</span></span><br></pre></td></tr></table></figure><h3 id="5-21-adb-shell-service"><a href="#5-21-adb-shell-service" class="headerlink" title="5-21.adb shell service"></a>5-21.adb shell service</h3><blockquote><p>服务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell service call phone 3 <span class="comment">#挂断电话</span></span><br></pre></td></tr></table></figure><h3 id="5-22-adb-shell-setenforce"><a href="#5-22-adb-shell-setenforce" class="headerlink" title="5-22.adb shell setenforce"></a>5-22.adb shell setenforce</h3><blockquote><p>selinux 使用 setenforce 命令进行设置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell setenforce 0 <span class="comment">#设置成permissive 模式</span></span><br><span class="line">adb shell setenforce 1 <span class="comment">#设置成enforce 模式</span></span><br></pre></td></tr></table></figure><blockquote><p>设置SELinux 成为permissive模式 临时关闭selinux的。在eng/userdebug版本中<br>注意此方法重启后失效</p></blockquote><h3 id="5-23-adb-shell-content"><a href="#5-23-adb-shell-content" class="headerlink" title="5-23.adb shell content"></a>5-23.adb shell content</h3><blockquote><p>旋转屏幕</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell content insert --uri content://settings/system --<span class="built_in">bind</span> name:s:accelerometer_rotation --<span class="built_in">bind</span> value:i:0 <span class="comment">#禁用自动旋转</span></span><br><span class="line">adb shell content insert --uri content://settings/system --<span class="built_in">bind</span> name:s:user_rotation --<span class="built_in">bind</span> value:i:1 <span class="comment">#旋转屏幕</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><blockquote><p>i后面跟的不同的值代表旋转为不同的方向，取值范围为0，1，2，3<br>需要root权限</p></blockquote><h3 id="5-24-adb-shell-ip-addr-show"><a href="#5-24-adb-shell-ip-addr-show" class="headerlink" title="5-24.adb shell ip addr show"></a>5-24.adb shell ip addr show</h3><blockquote><p>显示网络ip地址</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell ip addr show <span class="comment"># 显示网络IP</span></span><br><span class="line">adb shell ip addr show wlan0 <span class="comment">#显示无线网卡IP</span></span><br><span class="line">adb shell ip addr show eth0 <span class="comment">#显示有线网卡IP</span></span><br></pre></td></tr></table></figure><h3 id="5-25-adb-shell-recovery"><a href="#5-25-adb-shell-recovery" class="headerlink" title="5-25.adb shell recovery"></a>5-25.adb shell recovery</h3><blockquote><p>恢复出厂设置的操作</p></blockquote><p>注意：这是个危险的命令，不要在手机里操作，除非你知道在干什么<br>注意：这是个危险的命令，不要在手机里操作，除非你知道在干什么<br>注意：这是个危险的命令，不要在手机里操作，除非你知道在干什么</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell recovery --wipe_data <span class="comment">#恢复出厂设置的操作</span></span><br></pre></td></tr></table></figure><h3 id="5-26-adb-shell-重定向shell脚本文件名"><a href="#5-26-adb-shell-重定向shell脚本文件名" class="headerlink" title="5-26. adb shell 重定向shell脚本文件名"></a>5-26. adb shell 重定向shell脚本文件名</h3><blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell &lt; shell_script.sh</span><br></pre></td></tr></table></figure><blockquote><p>shell_script.sh 里写的是shell命令，这样多条命令或shell就可以直接执行了</p></blockquote><h3 id="5"><a href="#5" class="headerlink" title="5-*."></a>5-*.</h3><blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><blockquote></blockquote><h3 id="5-1"><a href="#5-1" class="headerlink" title="5-*."></a>5-*.</h3><blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><blockquote></blockquote><h1 id="六、上传、下载文件"><a href="#六、上传、下载文件" class="headerlink" title="六、上传、下载文件"></a>六、上传、下载文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb push &lt;<span class="built_in">local</span>&gt; &lt;remote&gt; <span class="comment">#从本地复制文件到设备</span></span><br><span class="line">adb pull &lt;remote&gt; &lt;<span class="built_in">local</span>&gt; <span class="comment">#从设备复制文件到本地</span></span><br></pre></td></tr></table></figure><h1 id="七、adb-logcat"><a href="#七、adb-logcat" class="headerlink" title="七、adb logcat"></a>七、adb logcat</h1><blockquote><p>adb logcat [<option>] … [<filter-spec>] …</p></blockquote><h3 id="7-1-adb-logcat"><a href="#7-1-adb-logcat" class="headerlink" title="7-1.adb logcat"></a>7-1.adb logcat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat <span class="comment">#查看日志</span></span><br></pre></td></tr></table></figure><h3 id="7-2-adb-logcat-c"><a href="#7-2-adb-logcat-c" class="headerlink" title="7-2.adb logcat -c"></a>7-2.adb logcat -c</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -c <span class="comment">#清除log 缓存</span></span><br></pre></td></tr></table></figure><h3 id="7-3-adb-logcat-v"><a href="#7-3-adb-logcat-v" class="headerlink" title="7-3.adb logcat -v"></a>7-3.adb logcat -v</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -v <span class="tag">&lt;<span class="name">format</span>&gt;</span>  指定日志输出格式</span><br><span class="line">adb logcat -v brief   #默认格式,<span class="tag">&lt;<span class="name">priority</span>&gt;</span>/<span class="tag">&lt;<span class="name">tag</span>&gt;</span>(<span class="tag">&lt;<span class="name">pid</span>&gt;</span>): <span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">adb logcat -v process #<span class="tag">&lt;<span class="name">priority</span>&gt;</span>(<span class="tag">&lt;<span class="name">pid</span>&gt;</span>) <span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">adb logcat -v tag  #<span class="tag">&lt;<span class="name">priority</span>&gt;</span>/<span class="tag">&lt;<span class="name">tag</span>&gt;</span>: <span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">adb logcat -v raw  #<span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">adb logcat -v time  #<span class="tag">&lt;<span class="name">datetime</span>&gt;</span> <span class="tag">&lt;<span class="name">priority</span>&gt;</span>/<span class="tag">&lt;<span class="name">tag</span>&gt;</span>(<span class="tag">&lt;<span class="name">pid</span>&gt;</span>): <span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">adb logcat -v threadtime #<span class="tag">&lt;<span class="name">datetime</span>&gt;</span> <span class="tag">&lt;<span class="name">pid</span>&gt;</span> <span class="tag">&lt;<span class="name">tid</span>&gt;</span> <span class="tag">&lt;<span class="name">priority</span>&gt;</span> <span class="tag">&lt;<span class="name">tag</span>&gt;</span>: <span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">adb logcat -v long  #[ <span class="tag">&lt;<span class="name">datetime</span>&gt;</span> <span class="tag">&lt;<span class="name">pid</span>&gt;</span>:<span class="tag">&lt;<span class="name">tid</span>&gt;</span> <span class="tag">&lt;<span class="name">priority</span>&gt;</span>/<span class="tag">&lt;<span class="name">tag</span>&gt;</span>:] <span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">adb logcat -v long ActivityManager:I *:S  #指定格式可与上面的过滤同时使用</span><br></pre></td></tr></table></figure><h3 id="7-4-adb-logcat"><a href="#7-4-adb-logcat" class="headerlink" title="7-4.adb logcat  : "></a>7-4.adb logcat <em> : </em></h3><p>按某级别过滤日志则会将该级别及以上的日志输出，Android 日志的优先级如下：</p><blockquote><p>V —— Verbose（最低，过滤少，输出得最多）<br>D —— Debug<br>I —— Info<br>W —— Warning<br>E —— Error<br>F —— Fatal<br>S —— Silent（最高，过滤多，啥也不输出）</p></blockquote><p>示例：输出W之上的日志，W,E,F,S</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat *:W</span><br></pre></td></tr></table></figure><p><strong>按 tag 和级别过滤日志:</strong><filter-spec> 可以由多个 <tag>[:priority] 组成</p><p><strong>示例：</strong><br>输出 tag ActivityManager 的 I 以上级别日志，输出tag MyApp的D 以上级别日志，及其它 tag 的 S 级别日志（即屏蔽其它 tag 日志）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat ActivityManager:I MyApp:D *:S</span><br></pre></td></tr></table></figure><h3 id="7-5-获取已安装应用Activity类名"><a href="#7-5-获取已安装应用Activity类名" class="headerlink" title="7-5: 获取已安装应用Activity类名"></a>7-5: 获取已安装应用Activity类名</h3><p>旧版：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat ActivityManager:I *:s | findstr <span class="string">&quot;cmp&quot;</span></span><br></pre></td></tr></table></figure><p>新版：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat ActivityManager:I *:s | findstr <span class="string">&quot;pre-top-activity&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>下图{}花括号里就是类名</p></blockquote><p><img src="https://s1.vika.cn/space/2025/03/28/a064a1950b72415a998ecc717fcf3379" alt="image"></p><p>类名启动设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n com.android.settings/com.android.settings.Settings</span><br></pre></td></tr></table></figure><p>类名关闭设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am force-stop com.android.settings</span><br></pre></td></tr></table></figure><h1 id="八、adb-get-serialno"><a href="#八、adb-get-serialno" class="headerlink" title="八、adb get-serialno"></a>八、adb get-serialno</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb get-serialno <span class="comment">#获取序列号</span></span><br></pre></td></tr></table></figure><h1 id="九、adb-bugreport"><a href="#九、adb-bugreport" class="headerlink" title="九、adb bugreport"></a>九、adb bugreport</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb bugreport <span class="comment">#查看bug 报告</span></span><br></pre></td></tr></table></figure><h1 id="十、adb-exec-out"><a href="#十、adb-exec-out" class="headerlink" title="十、adb exec-out"></a>十、adb exec-out</h1><p>执行命令并输出到本地。</p><h3 id="10-1-adb-exec-out-screencap"><a href="#10-1-adb-exec-out-screencap" class="headerlink" title="10-1.adb exec-out screencap"></a>10-1.adb exec-out screencap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb exec-out screencap -p &gt; img.png <span class="comment"># 老版本无exec-out命令，只适合于新版的截图</span></span><br></pre></td></tr></table></figure><h1 id="十一、adb-自身管理"><a href="#十一、adb-自身管理" class="headerlink" title="十一、adb 自身管理"></a>十一、adb 自身管理</h1><h3 id="11-1-启动停止服务"><a href="#11-1-启动停止服务" class="headerlink" title="11-1. 启动停止服务"></a>11-1. 启动停止服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb start-server <span class="comment">#启动adb 服务，基本不会用到，因为只要设备连接正确，会自动启动adb server</span></span><br><span class="line">adb kill-server <span class="comment">#停止adb server</span></span><br><span class="line">adb -P &lt;port&gt; start-server <span class="comment">#指定adb server 的网络端口port （默认为5037）启动服务</span></span><br></pre></td></tr></table></figure><h3 id="11-2-系统更新"><a href="#11-2-系统更新" class="headerlink" title="11-2.系统更新"></a>11-2.系统更新</h3><h4 id="11-2-1-重启到-Recovery-模式"><a href="#11-2-1-重启到-Recovery-模式" class="headerlink" title="11-2-1.重启到 Recovery 模式"></a>11-2-1.重启到 Recovery 模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot recovery</span><br></pre></td></tr></table></figure><blockquote><p>在设备的 Recovery 界面上操作进入 Apply update-Apply from ADB。<br>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 Apply update from ADB。</p></blockquote><h4 id="11-2-2-重启到-Fastboot-模式"><a href="#11-2-2-重启到-Fastboot-模式" class="headerlink" title="11-2-2.重启到 Fastboot 模式"></a>11-2-2.重启到 Fastboot 模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure><h4 id="11-2-3-通过-adb-上传和更新系统。"><a href="#11-2-3-通过-adb-上传和更新系统。" class="headerlink" title="11-2-3.通过 adb 上传和更新系统。"></a>11-2-3.通过 adb 上传和更新系统。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb sideload &lt;path-to-update.zip&gt;</span><br></pre></td></tr></table></figure><h1 id="十二、命令行切换到root权限"><a href="#十二、命令行切换到root权限" class="headerlink" title="十二、命令行切换到root权限"></a>十二、命令行切换到root权限</h1><h3 id="12-1-方式一："><a href="#12-1-方式一：" class="headerlink" title="12-1.方式一："></a>12-1.方式一：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb comnnect IP:端口</span><br><span class="line">adb root</span><br></pre></td></tr></table></figure><h3 id="12-2-方式二："><a href="#12-2-方式二：" class="headerlink" title="12-2.方式二："></a>12-2.方式二：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb comnnect IP:端口</span><br><span class="line">adb shell</span><br><span class="line"><span class="variable">$su</span></span><br></pre></td></tr></table></figure><h3 id="12-3-方式三："><a href="#12-3-方式三：" class="headerlink" title="12-3.方式三："></a>12-3.方式三：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb comnnect IP:端口</span><br><span class="line">adb shell</span><br><span class="line"><span class="variable">$su</span> -</span><br></pre></td></tr></table></figure><h1 id="十三、连接"><a href="#十三、连接" class="headerlink" title="十三、连接"></a>十三、连接</h1><h3 id="13-1-adb-等待设备连接"><a href="#13-1-adb-等待设备连接" class="headerlink" title="13.1 adb 等待设备连接:"></a>13.1 adb 等待设备连接:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#adb wait-for-device</span></span><br><span class="line">eg://windows运行工具指令如下：</span><br><span class="line">识别并连接设备后输出devices信息</span><br><span class="line"> </span><br><span class="line"><span class="comment">#adb wait-for-device</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#adb devices</span></span><br></pre></td></tr></table></figure><blockquote><p>此时命令行提示符是 $ 则表示没有 root 权限，是 # 则表示已 root。</p></blockquote><hr><blockquote><p>免责声明：本号所涉及内容仅供安全研究与教学使用，如出现其他风险，后果自负。</p></blockquote><hr><p>参考、来源：<br><a href="https://blog.csdn.net/y281252548/article/details/130619040">https://blog.csdn.net/y281252548/article/details/130619040</a><br><a href="https://zhuanlan.zhihu.com/p/605831031">https://zhuanlan.zhihu.com/p/605831031</a> (adb 详细介绍)<br><a href="https://blog.csdn.net/zh6526157/article/details/129583527">https://blog.csdn.net/zh6526157/article/details/129583527</a> (adb shell am broadcast 广播介绍)<br><a href="https://blog.51cto.com/u_16213586/8478014">https://blog.51cto.com/u_16213586/8478014</a> （adb shell -c 不登录在终端执行命令）<br><a href="https://blog.csdn.net/mazhidong/article/details/79412073">https://blog.csdn.net/mazhidong/article/details/79412073</a><br><a href="http://www.taodudu.cc/news/show-6122139.html?action=onClick">http://www.taodudu.cc/news/show-6122139.html?action=onClick</a><br><a href="https://www.jianshu.com/p/11a201e705ac">https://www.jianshu.com/p/11a201e705ac</a><br><a href="https://blog.csdn.net/userwyh/article/details/82430665">https://blog.csdn.net/userwyh/article/details/82430665</a><br><a href="https://www.jianshu.com/p/bae933aac556">https://www.jianshu.com/p/bae933aac556</a><br><a href="https://blog.csdn.net/fxdaniel/article/details/45846333">https://blog.csdn.net/fxdaniel/article/details/45846333</a><br><a href="https://blog.csdn.net/zh6526157/article/details/132495569">https://blog.csdn.net/zh6526157/article/details/132495569</a><br><a href="https://sspai.com/post/33696">https://sspai.com/post/33696</a><br><a href="https://blog.51cto.com/u_16087831/6223245">https://blog.51cto.com/u_16087831/6223245</a><br><a href="https://blog.csdn.net/luckywang1103/article/details/76804856">https://blog.csdn.net/luckywang1103/article/details/76804856</a><br><a href="https://baijiahao.baidu.com/s?id=1756775420151725732&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1756775420151725732&amp;wfr=spider&amp;for=pc</a><br><a href="https://blog.51cto.com/u_16175448/6833996">https://blog.51cto.com/u_16175448/6833996</a><br><a href="https://cloud.tencent.com/developer/article/1360063">https://cloud.tencent.com/developer/article/1360063</a><br><a href="https://blog.csdn.net/zh6526157/article/details/134440688">https://blog.csdn.net/zh6526157/article/details/134440688</a> (发送一个广播来更改飞行模式的状态)<br><a href="https://blog.51cto.com/u_16213430/8410476">https://blog.51cto.com/u_16213430/8410476</a><br><a href="https://www.codenong.com/25864385/">https://www.codenong.com/25864385/</a><br><a href="https://www.jianshu.com/p/8a52eb8771e5">https://www.jianshu.com/p/8a52eb8771e5</a><br>《Python3网络爬虫开发实战 第2版》崔庆才 P667<br><a href="https://mumu.163.com/help/20230504/35047_1086360.html#a7">https://mumu.163.com/help/20230504/35047_1086360.html#a7</a> （查看设备信息）<br><a href="https://doc.miyun.app/android-emulator-proxy">https://doc.miyun.app/android-emulator-proxy</a><br><a href="https://mumu.163.com/help/20210513/35047_947512.html">https://mumu.163.com/help/20210513/35047_947512.html</a> （显示当前UI窗口名、获取已安装应用Activity类名）<br><a href="https://www.cnblogs.com/dengqing9393/p/7210479.html">https://www.cnblogs.com/dengqing9393/p/7210479.html</a> (am说明)<br><a href="https://www.cnblogs.com/dengqing9393/p/7210479.html">https://www.cnblogs.com/dengqing9393/p/7210479.html</a> （adb 打开浏览器）<br><a href="https://www.cnblogs.com/greatverve/archive/2012/02/10/android-am.html">https://www.cnblogs.com/greatverve/archive/2012/02/10/android-am.html</a> （adb 打开浏览器）<br><a href="https://www.52pojie.cn/thread-1505329-1-1.html">https://www.52pojie.cn/thread-1505329-1-1.html</a> （https_proxy）<br><a href="https://www.52pojie.cn/thread-1600980-1-1.html">https://www.52pojie.cn/thread-1600980-1-1.html</a> （cmd 重定向shell脚本执行）<br><a href="https://blog.csdn.net/liaochaoyun/article/details/122085681">https://blog.csdn.net/liaochaoyun/article/details/122085681</a> （adb devices）</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adb </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[FlareOn2]Android</title>
      <link href="/2025/03/31/FlareOn2-Android/"/>
      <url>/2025/03/31/FlareOn2-Android/</url>
      
        <content type="html"><![CDATA[<h1 id="FlareOn2-Android"><a href="#FlareOn2-Android" class="headerlink" title="[FlareOn2]Android"></a>[FlareOn2]Android</h1><p><img src="https://s1.vika.cn/space/2025/03/29/3b0a8519d72f4b938188b618d09fc9e9" alt="PixPin_2025-03-29_19-32-14"></p><p>native层逆向，将apk后缀改为zip解压，在lib中找到对应so文件，或者jadx选中so文件右键导出</p><p>这个函数参数IDA识别错了，选中对应参数按Y修改，前两个是固定的，又vaildata()输入参数类型是string，所以第三个参数类型为jstring，修改好后是这样的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jstring __fastcall <span class="title">Java_com_flareon_flare_ValidateActivity_validate</span><span class="params">(JNIEnv *env, jobject obj, jstring input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *input_str; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v9; <span class="comment">// r1</span></span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [sp+0h] [bp-1BB8h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [sp+4h] [bp-1BB4h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [sp+Ch] [bp-1BACh]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v14; <span class="comment">// [sp+10h] [bp-1BA8h]</span></span><br><span class="line">  <span class="type">int</span> v15[<span class="number">23</span>]; <span class="comment">// [sp+1Ch] [bp-1B9Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v16[<span class="number">6976</span>]; <span class="comment">// [sp+78h] [bp-1B40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">j_memset</span>(v16, <span class="number">0</span>, <span class="number">6952u</span>);</span><br><span class="line">  <span class="built_in">j_memcpy</span>(v15, off_5004, <span class="built_in">sizeof</span>(v15));         <span class="comment">// 密文</span></span><br><span class="line">  v4 = (*env)-&gt;<span class="built_in">GetStringUTFChars</span>(env, input, <span class="number">0</span>);<span class="comment">// 将 Java 字符串转换为 C 字符串（UTF-8 编码）。</span></span><br><span class="line">  input_str = v4;</span><br><span class="line">  <span class="keyword">if</span> ( v4 &amp;&amp; <span class="built_in">j_strlen</span>(v4) &lt;= <span class="number">46</span> )               <span class="comment">// 输入长度为46</span></span><br><span class="line">  &#123;</span><br><span class="line">    v11 = <span class="number">0</span>;</span><br><span class="line">    v13 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">j_strlen</span>(input_str); i += <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">j_memset</span>(v16, <span class="number">0</span>, <span class="number">6952u</span>);                  <span class="comment">// v16 = 0</span></span><br><span class="line">      v7 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( input_str[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        v7 = (<span class="type">unsigned</span> __int8)input_str[i];</span><br><span class="line">        <span class="keyword">if</span> ( input_str[i + <span class="number">1</span>] )</span><br><span class="line">          v7 = (<span class="type">unsigned</span> <span class="type">int</span>)byte_<span class="number">7E7</span>E &gt;= (((<span class="type">unsigned</span> __int8)input_str[i] &lt;&lt; <span class="number">8</span>) | (<span class="type">unsigned</span> <span class="type">int</span>)(<span class="type">unsigned</span> __int8)input_str[i + <span class="number">1</span>]) ? ((<span class="type">unsigned</span> __int8)input_str[i] &lt;&lt; <span class="number">8</span>) | (<span class="type">unsigned</span> __int8)input_str[i + <span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j != <span class="number">6952</span>; j += <span class="number">2</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v14 = *(<span class="type">unsigned</span> __int16 *)&amp;byte_2214[j];<span class="comment">// 质数表,len=6952,6952/2 = 3476</span></span><br><span class="line">        <span class="keyword">while</span> ( !(<span class="type">unsigned</span> __int16)(v7 % v14) )</span><br><span class="line">        &#123;</span><br><span class="line">          ++*(_WORD *)&amp;v16[j];</span><br><span class="line">          v7 = (<span class="type">unsigned</span> __int16)(v7 / v14);</span><br><span class="line">          <span class="keyword">if</span> ( v7 &lt;= <span class="number">1</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">LABEL_10:</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">j_memcmp</span>((<span class="type">const</span> <span class="type">void</span> *)v15[v11], v16, <span class="number">3476u</span>) )</span><br><span class="line">        ++v11;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v13 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    (*env)-&gt;<span class="built_in">ReleaseStringUTFChars</span>(env, input, input_str);<span class="comment">// 释放之前通过 GetStringUTFChars 获取的字符串资源，</span></span><br><span class="line">                                                <span class="comment">// env：指向 JNI 环境的指针，用于与 JVM 交互。</span></span><br><span class="line">                                                <span class="comment">// input：一个 jstring 类型的 Java 字符串对象。</span></span><br><span class="line">                                                <span class="comment">// input_str：通过 GetStringUTFChars 获取的 C 风格的字符串（const char*）。</span></span><br><span class="line">    <span class="keyword">if</span> ( v11 == <span class="number">23</span> &amp;&amp; v13 )</span><br><span class="line">      v9 = <span class="string">&quot;That&#x27;s it!&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v9 = (<span class="type">const</span> <span class="type">char</span> *)&amp;unk_3D3C;             <span class="comment">// No</span></span><br><span class="line">    <span class="keyword">return</span> (*env)-&gt;<span class="built_in">NewStringUTF</span>(env, v9);       <span class="comment">// 将 C 字符串（UTF-8 编码）转换为 Java 字符串（jstring）。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    (*env)-&gt;<span class="built_in">ReleaseStringUTFChars</span>(env, input, input_str);</span><br><span class="line">    <span class="keyword">return</span> (*env)-&gt;<span class="built_in">NewStringUTF</span>(env, &amp;unk_3D3C);<span class="comment">// 创建返回的 jstring</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脚本：</p><ul><li><strong>读取地址表 <code>t1</code></strong></li></ul><p>​    从文件偏移 <code>0x5004 - 0x1000 = 0x4004</code> 处读取 <strong>23 个地址</strong>，组成地址表 <code>t1</code>。</p><p>​    <strong>调整偏移的原因</strong>：ELF 文件在内存中的加载基址通常为 <code>0x1000</code>，文件偏移需减去基址得到实际物理偏移。</p><ul><li><strong>读取质数表 <code>word_2214</code></strong></li></ul><p>​    <strong>数据内容</strong>：<code>word_2214</code> 是一个长度为 3476 的数组，存储质数（如 <code>[2, 3, 5, 7, 11, ...]</code>）。</p><p>​    <strong>用途</strong>：后续计算中，每个位置 <code>j</code> 的质数 <code>word_2214[j]</code> 将作为基底。</p><ul><li><p><strong>计算生成字节流 <code>res</code></strong></p><ol><li>遍历 <code>t1</code> 中的每个地址 <code>i</code>，转换为文件偏移 <code>offset = i - 0x1000</code>。</li><li>读取该偏移处的数据块，解包为数组 <code>a</code>。</li><li>对每个元素 <code>a[j]</code>，若不为零，则计算 <code>word_2214[j] ** a[j]</code>，并将所有结果累乘到 <code>v</code>。</li><li>将 <code>v</code> 拆分为高 8 位和低 8 位，存入 <code>res</code> 列表。</li></ol></li><li><p><strong>示例</strong></p><p>假设 <code>word_2214 = [2, 3, 5]</code>，且某次循环中 <code>a = [1, 2, 0]</code>：</p><ol><li>计算 <code>v = 2^1 * 3^2 * 5^0 = 2 * 9 * 1 = 18</code>。</li><li>拆分字节：<code>18 = 0x12</code> → 高 8 位 <code>0x00</code>，低 8 位 <code>0x12</code> → <code>res += [0x00, 0x12]</code>。</li><li>最终字符：<code>chr(0x00)</code>（不可见）和 <code>chr(0x12)</code>（ASCII 控制字符）。</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">t1_addr = <span class="number">0x5004</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;libvalidate.so&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(t1_addr - <span class="number">0x1000</span>)  <span class="comment"># 调整文件指针到地址 0x5004 对应的文件偏移</span></span><br><span class="line">    t1_data = f.read(<span class="number">23</span> * <span class="number">4</span>)  <span class="comment"># 读取 23 个 4 字节整数（地址表）</span></span><br><span class="line">    t1 = struct.unpack(<span class="string">&quot;&lt;&quot;</span> + <span class="string">&quot;I&quot;</span> * <span class="number">23</span>, t1_data)  <span class="comment"># 解包为小端序的无符号整数列表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t1:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(i))  <span class="comment"># 打印每个地址（调试用）</span></span><br><span class="line"></span><br><span class="line">    f.seek(<span class="number">0x2214</span>)  <span class="comment"># 定位到质数表起始地址</span></span><br><span class="line">    word_2214_data = f.read(<span class="number">6952</span>)  <span class="comment"># 读取 6952 字节（3476 个 2 字节整数）</span></span><br><span class="line">    word_2214 = struct.unpack(<span class="string">&quot;&lt;&quot;</span> + <span class="string">&quot;H&quot;</span> * <span class="number">3476</span>, word_2214_data)  <span class="comment"># 解包为小端序的无符号短整型列表</span></span><br><span class="line">    <span class="built_in">print</span>(word_2214[:<span class="number">5</span>])  <span class="comment"># 打印前 5 个质数（调试用）</span></span><br><span class="line"></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t1:</span><br><span class="line">        offset = i - <span class="number">0x1000</span>  <span class="comment"># 将地址转换为文件偏移</span></span><br><span class="line">        f.seek(offset)</span><br><span class="line">        data = f.read(<span class="number">6952</span>)  <span class="comment"># 读取与质数表长度相同的数据块</span></span><br><span class="line">        a = struct.unpack(<span class="string">&quot;&lt;&quot;</span> + <span class="string">&quot;H&quot;</span> * <span class="number">3476</span>, data)  <span class="comment"># 解包为 3476 个无符号短整型</span></span><br><span class="line">        v = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">            <span class="keyword">if</span> a[j] != <span class="number">0</span>:</span><br><span class="line">                v *= word_2214[j] ** a[j]  <span class="comment"># 质数幂次累乘</span></span><br><span class="line">        res.append((v &gt;&gt; <span class="number">8</span>))    <span class="comment"># 取高 8 位</span></span><br><span class="line">        res.append((v &amp; <span class="number">0xff</span>))  <span class="comment"># 取低 8 位</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 将字节流转换为 ASCII 字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x2a5d0</span></span><br><span class="line"><span class="comment"># 0x28aa8</span></span><br><span class="line"><span class="comment"># 0x26f80</span></span><br><span class="line"><span class="comment"># 0x25458</span></span><br><span class="line"><span class="comment"># 0x23930</span></span><br><span class="line"><span class="comment"># 0x21e08</span></span><br><span class="line"><span class="comment"># 0x202e0</span></span><br><span class="line"><span class="comment"># 0x1e7b8</span></span><br><span class="line"><span class="comment"># 0x1cc90</span></span><br><span class="line"><span class="comment"># 0x1b168</span></span><br><span class="line"><span class="comment"># 0x19640</span></span><br><span class="line"><span class="comment"># 0x17b18</span></span><br><span class="line"><span class="comment"># 0x15ff0</span></span><br><span class="line"><span class="comment"># 0x144c8</span></span><br><span class="line"><span class="comment"># 0x129a0</span></span><br><span class="line"><span class="comment"># 0x10e78</span></span><br><span class="line"><span class="comment"># 0xf350</span></span><br><span class="line"><span class="comment"># 0xd828</span></span><br><span class="line"><span class="comment"># 0xbd00</span></span><br><span class="line"><span class="comment"># 0xa1d8</span></span><br><span class="line"><span class="comment"># 0x86b0</span></span><br><span class="line"><span class="comment"># 0x6b88</span></span><br><span class="line"><span class="comment"># 0x5060</span></span><br><span class="line"><span class="comment"># (2, 3, 5, 7, 11)</span></span><br><span class="line"><span class="comment"># [83, 104, 111, 117, 108, 100, 95, 104, 97, 118, 101, 95, 103, 48, 110, 101, 95, 116, 111, 95, 116, 97, 115, 104, 105, 95, 36, 116, 97, 116, 105, 111, 110, 64, 102, 108, 97, 114, 101, 45, 111, 110, 46, 99, 111, 109]</span></span><br><span class="line"><span class="comment"># Should_have_g0ne_to_tashi_$tation@flare-on.com</span></span><br></pre></td></tr></table></figure><h1 id="前置知识-java静态注册参数类型"><a href="#前置知识-java静态注册参数类型" class="headerlink" title="[前置知识]java静态注册参数类型"></a>[前置知识]java静态注册参数类型</h1><p>在 JNI（Java Native Interface）中，<strong><code>Java_com_example_MyClass_myMethod</code></strong> 这类通过静态注册生成的 Native 函数的<strong>前两个参数是固定的</strong>，它们的含义和类型由 JNI 规范定义。以下是详细解释：</p><hr><h2 id="前两个参数的固定含义"><a href="#前两个参数的固定含义" class="headerlink" title="前两个参数的固定含义"></a><strong>前两个参数的固定含义</strong></h2><div class="table-container"><table><thead><tr><th style="text-align:left">参数顺序</th><th style="text-align:left">参数类型</th><th style="text-align:left">参数名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">第1个参数</td><td style="text-align:left"><code>JNIEnv*</code></td><td style="text-align:left"><code>env</code></td><td style="text-align:left"><strong>JNI 环境指针</strong>，提供访问 JNI 函数表的接口（如操作字符串、数组、调用方法等）。</td></tr><tr><td style="text-align:left">第2个参数</td><td style="text-align:left"><code>jobject</code> 或 <code>jclass</code></td><td style="text-align:left"><code>obj</code>/<code>clazz</code></td><td style="text-align:left"><strong>调用上下文对象</strong>，具体类型取决于 Java 方法是 <strong>实例方法</strong> 还是 <strong>静态方法</strong>。</td></tr></tbody></table></div><hr><h2 id="第二个参数的具体类型"><a href="#第二个参数的具体类型" class="headerlink" title="第二个参数的具体类型"></a><strong>第二个参数的具体类型</strong></h2><h3 id="1-实例方法（非静态方法）"><a href="#1-实例方法（非静态方法）" class="headerlink" title="1. 实例方法（非静态方法）"></a><strong>1. 实例方法（非静态方法）</strong></h3><ul><li><strong>Java 方法定义</strong>：</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public native void myInstanceMethod(); // 实例方法</span><br></pre></td></tr></table></figure><ul><li><strong>Native 函数签名</strong>：</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JNIEXPORT void JNICALL Java_com_example_MyClass_myInstanceMethod(JNIEnv* env, jobject obj);</span><br></pre></td></tr></table></figure><ul><li><strong>第二个参数 <code>jobject obj</code></strong>：表示调用该 Native 方法的 <strong>Java 对象实例</strong>（即 <code>this</code>）。</li></ul><h3 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2. 静态方法"></a><strong>2. 静态方法</strong></h3><ul><li><strong>Java 方法定义</strong>：</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static native void myStaticMethod(); // 静态方法</span><br></pre></td></tr></table></figure><ul><li><strong>Native 函数签名</strong>：</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JNIEXPORT void JNICALL Java_com_example_MyClass_myStaticMethod(JNIEnv* env, jclass clazz);</span><br></pre></td></tr></table></figure><ul><li><strong>第二个参数 <code>jclass clazz</code></strong>：表示调用该 Native 方法的 <strong>Java 类对象</strong>（即 <code>MyClass.class</code>）。</li></ul><hr><h2 id="参数的作用和用法"><a href="#参数的作用和用法" class="headerlink" title="参数的作用和用法"></a><strong>参数的作用和用法</strong></h2><h3 id="1-JNIEnv-env"><a href="#1-JNIEnv-env" class="headerlink" title="1. JNIEnv\* env"></a><strong>1. <code>JNIEnv\* env</code></strong></h3><ul><li><strong>核心功能</strong>：<br>通过 <code>env</code> 指针可以调用 JNI 提供的 <strong>所有功能函数</strong>，例如：<ul><li>字符串操作：<code>env-&gt;NewStringUTF()</code>, <code>env-&gt;GetStringUTFChars()</code>。</li><li>数组操作：<code>env-&gt;GetIntArrayElements()</code>。</li><li>方法调用：<code>env-&gt;CallVoidMethod()</code>, <code>env-&gt;CallStaticObjectMethod()</code>。</li><li>异常处理：<code>env-&gt;ExceptionCheck()</code>。</li></ul></li><li><strong>线程安全</strong>：<br><code>JNIEnv*</code> 是线程相关的，不可跨线程使用（每个线程需通过 <code>JavaVM</code> 获取自己的 <code>JNIEnv</code>）。</li></ul><h3 id="2-jobject-obj-或-jclass-clazz"><a href="#2-jobject-obj-或-jclass-clazz" class="headerlink" title="2. jobject obj 或 jclass clazz"></a><strong>2. <code>jobject obj</code> 或 <code>jclass clazz</code></strong></h3><ul><li><p><strong>操作对象实例</strong>（<code>jobject obj</code>）：<br>通过 <code>obj</code> 可以访问实例的字段或方法：</p><p>cpp</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 获取实例字段的 fieldID</span><br><span class="line">jfieldID fieldId = env-&gt;GetFieldID(env-&gt;GetObjectClass(obj), &quot;fieldName&quot;, &quot;I&quot;);</span><br><span class="line">// 修改字段值</span><br><span class="line">env-&gt;SetIntField(obj, fieldId, 100);</span><br></pre></td></tr></table></figure></li><li><p><strong>操作静态成员</strong>（<code>jclass clazz</code>）：<br>通过 <code>clazz</code> 可以访问类的静态字段或方法：</p><p>cpp</p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 获取静态字段的 fieldID</span><br><span class="line">jfieldID staticFieldId = env-&gt;GetStaticFieldID(clazz, &quot;staticFieldName&quot;, &quot;I&quot;);</span><br><span class="line">// 修改静态字段值</span><br><span class="line">env-&gt;SetStaticIntField(clazz, staticFieldId, 200);</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a><strong>示例代码</strong></h2><h3 id="1-实例方法示例"><a href="#1-实例方法示例" class="headerlink" title="1. 实例方法示例"></a>1. 实例方法示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Java 实例方法：public native String getMessage();</span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_example_MyClass_getMessage(JNIEnv* env, jobject obj) &#123;</span><br><span class="line">    // 通过 obj 操作实例字段</span><br><span class="line">    jclass clazz = env-&gt;GetObjectClass(obj);</span><br><span class="line">    jfieldID fieldId = env-&gt;GetFieldID(clazz, &quot;name&quot;, &quot;Ljava/lang/String;&quot;);</span><br><span class="line">    jstring name = (jstring)env-&gt;GetObjectField(obj, fieldId);</span><br><span class="line">    const char* nameStr = env-&gt;GetStringUTFChars(name, nullptr);</span><br><span class="line">    </span><br><span class="line">    // 返回拼接的字符串</span><br><span class="line">    return env-&gt;NewStringUTF(&quot;Hello, &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-静态方法示例"><a href="#2-静态方法示例" class="headerlink" title="2. 静态方法示例"></a><strong>2. 静态方法示例</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Java 静态方法：public static native int add(int a, int b);</span><br><span class="line">JNIEXPORT jint JNICALL Java_com_example_MyClass_add(JNIEnv* env, jclass clazz, jint a, jint b) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><strong>常见问题</strong></h2><h3 id="1-为什么第二个参数类型不同？"><a href="#1-为什么第二个参数类型不同？" class="headerlink" title="1. 为什么第二个参数类型不同？"></a><strong>1. 为什么第二个参数类型不同？</strong></h3><ul><li><strong>设计逻辑</strong>：<br>实例方法需要操作具体对象（<code>this</code>），而静态方法属于类本身，无需对象实例。</li></ul><h3 id="2-能否在静态方法中访问实例字段？"><a href="#2-能否在静态方法中访问实例字段？" class="headerlink" title="2. 能否在静态方法中访问实例字段？"></a><strong>2. 能否在静态方法中访问实例字段？</strong></h3><ul><li><strong>不能</strong>：静态方法没有 <code>jobject obj</code> 参数（无对象实例），只能通过 <code>FindClass</code> 和 <code>GetStaticFieldID</code> 操作静态成员。</li></ul><h3 id="3-如何获取-jclass？"><a href="#3-如何获取-jclass？" class="headerlink" title="3. 如何获取 jclass？"></a><strong>3. 如何获取 <code>jclass</code>？</strong></h3><ul><li>方法 1：通过 <code>env-&gt;GetObjectClass(obj)</code>（实例方法中可用）。</li><li>方法 2：通过 <code>env-&gt;FindClass(&quot;com/example/MyClass&quot;)</code>（需全限定类名，用 <code>/</code> 代替 <code>.</code>）。</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><ul><li><strong>前两个参数固定</strong>：<code>JNIEnv* env</code> + <code>jobject</code>（实例方法）或 <code>jclass</code>（静态方法）。</li><li><strong>核心用途</strong>：<ul><li><code>env</code>：调用 JNI 函数，操作 Java 对象和资源。</li><li><code>obj</code>/<code>clazz</code>：访问调用上下文（实例或类）。</li></ul></li><li><strong>注意事项</strong>：线程安全、参数类型匹配、资源释放（如 <code>ReleaseStringUTFChars</code>）。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/Mz1-rc/p/17035685.html">FlareOn2]Android - Mz1 - 博客园</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JNI动态注册与静态注册详解</title>
      <link href="/2025/03/31/JNI%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E4%B8%8E%E9%9D%99%E6%80%81%E6%B3%A8%E5%86%8C%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/03/31/JNI%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E4%B8%8E%E9%9D%99%E6%80%81%E6%B3%A8%E5%86%8C%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="JNI-动态注册与静态注册详解"><a href="#JNI-动态注册与静态注册详解" class="headerlink" title="JNI 动态注册与静态注册详解"></a><strong>JNI 动态注册与静态注册详解</strong></h2><hr><h3 id="一、JNI-基础概念"><a href="#一、JNI-基础概念" class="headerlink" title="一、JNI 基础概念"></a><strong>一、JNI 基础概念</strong></h3><p>JNI（Java Native Interface）是 Java 与 Native 代码（C/C++）交互的桥梁。当 Java 调用 Native 方法时，需要将 Java 方法与 Native 函数绑定，这种绑定分为 <strong>静态注册</strong> 和 <strong>动态注册</strong>。</p><hr><h2 id="二、静态注册"><a href="#二、静态注册" class="headerlink" title="二、静态注册"></a><strong>二、静态注册</strong></h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a><strong>1. 定义</strong></h3><p>静态注册是 <strong>通过固定命名规则</strong> 自动将 Java 方法与 Native 函数绑定。开发者只需按照规则命名 Native 函数，系统自动完成映射。</p><h3 id="2-命名规则"><a href="#2-命名规则" class="headerlink" title="2. 命名规则"></a><strong>2. 命名规则</strong></h3><p>Java 方法 <code>com.example.MyClass.myMethod</code> 对应的 Native 函数名：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Java_com_example_MyClass_myMethod</span>(JNIEnv* env, jobject obj, ...)</span><br></pre></td></tr></table></figure><ul><li>包名中的 <code>.</code> 替换为 <code>_</code>。</li><li>方法名直接拼接。</li></ul><h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a><strong>3. 示例</strong></h3><p><strong>(1) Java 代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NativeLib</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> String <span class="title function_">staticMethod</span><span class="params">(String input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(2) C/C++ 代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态注册的函数</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_example_NativeLib_staticMethod</span><span class="params">(JNIEnv* env, jclass clazz, jstring input)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* str = env-&gt;<span class="built_in">GetStringUTFChars</span>(input, <span class="literal">nullptr</span>);</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(input, str);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(<span class="string">&quot;Static Registration: Hello from C++&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-特点"><a href="#4-特点" class="headerlink" title="4. 特点"></a><strong>4. 特点</strong></h3><ul><li><strong>优点</strong>：简单易用，无需手动注册。</li><li><strong>缺点</strong>：<ul><li>函数名冗长，可读性差。</li><li>无法隐藏函数符号（逆向时易被发现）。</li></ul></li></ul><hr><h2 id="三、动态注册"><a href="#三、动态注册" class="headerlink" title="三、动态注册"></a><strong>三、动态注册</strong></h2><h3 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1. 定义"></a><strong>1. 定义</strong></h3><p>动态注册是 <strong>通过 <code>JNI_OnLoad</code> 函数手动绑定</strong> Java 方法与 Native 函数。开发者需调用 <code>RegisterNatives</code> 方法，明确指定 Java 方法与 Native 函数的对应关系。</p><h3 id="2-核心步骤"><a href="#2-核心步骤" class="headerlink" title="2. 核心步骤"></a><strong>2. 核心步骤</strong></h3><ol><li>实现 <code>JNI_OnLoad</code> 函数，在库加载时执行注册。</li><li>定义 <code>JNINativeMethod</code> 结构体数组，描述 Java 方法与 Native 函数的映射。</li><li>调用 <code>env-&gt;RegisterNatives</code> 完成注册。</li></ol><h3 id="3-示例-1"><a href="#3-示例-1" class="headerlink" title="3. 示例"></a><strong>3. 示例</strong></h3><p><strong>(1) Java 代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NativeLib</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> String <span class="title function_">dynamicMethod</span><span class="params">(String input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(2) C/C++ 代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态注册的函数</span></span><br><span class="line"><span class="function">jstring <span class="title">dynamic_method</span><span class="params">(JNIEnv* env, jclass clazz, jstring input)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* str = env-&gt;<span class="built_in">GetStringUTFChars</span>(input, <span class="literal">nullptr</span>);</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(input, str);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(<span class="string">&quot;Dynamic Registration: Hello from C++&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方法映射表</span></span><br><span class="line"><span class="type">static</span> JNINativeMethod methods[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;dynamicMethod&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/String;&quot;</span>, (<span class="type">void</span>*)dynamic_method&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JNI_OnLoad 入口</span></span><br><span class="line"><span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="type">void</span>* reserved)</span> </span>&#123;</span><br><span class="line">    JNIEnv* env;</span><br><span class="line">    <span class="keyword">if</span> (vm-&gt;<span class="built_in">GetEnv</span>((<span class="type">void</span>**)&amp;env, JNI_VERSION_1_6) != JNI_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册 Native 方法</span></span><br><span class="line">    jclass clazz = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;com/example/NativeLib&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (env-&gt;<span class="built_in">RegisterNatives</span>(clazz, methods, <span class="built_in">sizeof</span>(methods)/<span class="built_in">sizeof</span>(methods[<span class="number">0</span>])) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-关键数据结构"><a href="#4-关键数据结构" class="headerlink" title="4. 关键数据结构"></a><strong>4. 关键数据结构</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* name;      <span class="comment">// Java 方法名</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* signature; <span class="comment">// 方法签名</span></span><br><span class="line">    <span class="type">void</span>*       fnPtr;     <span class="comment">// Native 函数指针</span></span><br><span class="line">&#125; JNINativeMethod;</span><br></pre></td></tr></table></figure><h3 id="5-特点"><a href="#5-特点" class="headerlink" title="5. 特点"></a><strong>5. 特点</strong></h3><ul><li><strong>优点</strong>：<ul><li>函数名自由定义，隐藏实现细节。</li><li>灵活性高，适合大型项目。</li></ul></li><li><strong>缺点</strong>：<ul><li>需要手动维护映射关系。</li><li>逆向时更难定位 Native 函数。</li></ul></li></ul><hr><h2 id="四、对比总结"><a href="#四、对比总结" class="headerlink" title="四、对比总结"></a><strong>四、对比总结</strong></h2><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>特性</strong></th><th style="text-align:left"><strong>静态注册</strong></th><th style="text-align:left"><strong>动态注册</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>绑定方式</strong></td><td style="text-align:left">自动通过命名规则绑定</td><td style="text-align:left">手动通过 <code>RegisterNatives</code> 绑定</td></tr><tr><td style="text-align:left"><strong>函数名</strong></td><td style="text-align:left">冗长（包名+类名+方法名）</td><td style="text-align:left">可自定义</td></tr><tr><td style="text-align:left"><strong>逆向难度</strong></td><td style="text-align:left">易（函数名暴露）</td><td style="text-align:left">难（需分析 <code>JNI_OnLoad</code>）</td></tr><tr><td style="text-align:left"><strong>灵活性</strong></td><td style="text-align:left">低</td><td style="text-align:left">高</td></tr><tr><td style="text-align:left"><strong>适用场景</strong></td><td style="text-align:left">简单场景</td><td style="text-align:left">复杂项目或需隐藏实现的场景</td></tr></tbody></table></div><hr><h2 id="五、实战技巧"><a href="#五、实战技巧" class="headerlink" title="五、实战技巧"></a><strong>五、实战技巧</strong></h2><h3 id="1-静态注册逆向分析"><a href="#1-静态注册逆向分析" class="headerlink" title="1. 静态注册逆向分析"></a><strong>1. 静态注册逆向分析</strong></h3><ul><li><strong>特征</strong>：函数名类似 <code>Java_com_example_Class_method</code>。</li><li><strong>IDA 操作</strong>：直接搜索函数名定位逻辑。</li></ul><h3 id="2-动态注册逆向分析"><a href="#2-动态注册逆向分析" class="headerlink" title="2. 动态注册逆向分析"></a><strong>2. 动态注册逆向分析</strong></h3><ul><li><p><strong>步骤</strong>：</p><ol><li>查找 <code>JNI_OnLoad</code> 函数（入口点）。</li><li>分析 <code>RegisterNatives</code> 调用，找到 <code>JNINativeMethod</code> 数组。</li><li>根据数组中的方法签名定位 Native 函数。</li></ol></li><li><p><strong>IDA 示例</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反编译 JNI_OnLoad 后可能看到的代码</span></span><br><span class="line">v6 = (*a1)-&gt;FindClass(a1, <span class="string">&quot;com/example/NativeLib&quot;</span>);</span><br><span class="line">v7 = (<span class="keyword">struct</span> JNINativeMethod *)<span class="built_in">malloc</span>(<span class="number">0x18u</span>LL);</span><br><span class="line">v7-&gt;name = <span class="string">&quot;dynamicMethod&quot;</span>;</span><br><span class="line">v7-&gt;signature = <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/String;&quot;</span>;</span><br><span class="line">v7-&gt;fnPtr = (<span class="type">void</span> *)dynamic_method;</span><br><span class="line">(*a1)-&gt;RegisterNatives(a1, v6, v7, <span class="number">1LL</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-动态注册的-Hook-方法（Frida）"><a href="#3-动态注册的-Hook-方法（Frida）" class="headerlink" title="3. 动态注册的 Hook 方法（Frida）"></a><strong>3. 动态注册的 Hook 方法（Frida）</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hook RegisterNatives 函数，打印动态注册信息</span></span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(</span><br><span class="line">    <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libart.so&quot;</span>, <span class="string">&quot;_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi&quot;</span>),</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> env = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> clazz = args[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> methods = args[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">var</span> methodCount = args[<span class="number">3</span>].<span class="title function_">toInt32</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历方法表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methodCount; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> method = methods.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">var</span> name = method.<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">var</span> signature = method.<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">var</span> fnPtr = method.<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[+] 动态注册方法: <span class="subst">$&#123;name&#125;</span>, 签名: <span class="subst">$&#123;signature&#125;</span>, 函数地址: <span class="subst">$&#123;fnPtr&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h2 id="六、开发建议"><a href="#六、开发建议" class="headerlink" title="六、开发建议"></a><strong>六、开发建议</strong></h2><ol><li><strong>选择注册方式</strong>：<ul><li>小型项目或快速原型：静态注册。</li><li>大型项目或需隐藏实现：动态注册。</li></ul></li><li><strong>安全加固</strong>：<ul><li>动态注册 + 代码混淆 + 符号表剥离，增加逆向难度。</li></ul></li><li><strong>调试技巧</strong>：<ul><li>使用 <code>adb logcat</code> 查看 JNI 错误日志（如 <code>JNI_OnLoad</code> 失败）。</li></ul></li></ol><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><ul><li><strong>静态注册</strong>：简单直接，适合快速开发，但安全性低。</li><li><strong>动态注册</strong>：灵活隐蔽，适合复杂项目，需额外维护成本。<br>掌握两者的区别和使用场景，能更好地设计 Native 模块并应对逆向分析。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/wenzhi20102321/article/details/136700209">Android JNI静态注册和动态注册方法详解_jni动态注册-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-frida-hook-java层</title>
      <link href="/2025/03/31/Android-frida-hook-java%E5%B1%82/"/>
      <url>/2025/03/31/Android-frida-hook-java%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-frida-hook-java层"><a href="#Android-frida-hook-java层" class="headerlink" title="Android-frida-hook-java层"></a>Android-frida-hook-java层</h1><h1 id="adb基础命令"><a href="#adb基础命令" class="headerlink" title="adb基础命令"></a>adb基础命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb reboot <span class="comment">#重启</span></span><br><span class="line">adb <span class="built_in">help</span> <span class="comment">#查看ADB 帮助</span></span><br></pre></td></tr></table></figure><h2 id="查看设备"><a href="#查看设备" class="headerlink" title="查看设备"></a>查看设备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices <span class="comment">#查看可连接操作的设备</span></span><br></pre></td></tr></table></figure><h2 id="连接设备"><a href="#连接设备" class="headerlink" title="连接设备"></a>连接设备</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb [-d|-e|-s &lt;serialNumber&gt;] &lt;command&gt;</span><br><span class="line">连接指定设备</span><br><span class="line"> </span><br><span class="line">参数：</span><br><span class="line"><span class="deletion">-d 指定当前唯一通过USB 连接的Android 设备为命令目标</span></span><br><span class="line"><span class="deletion">-e 指定当前唯一运行的模拟器为命令目标</span></span><br><span class="line"><span class="deletion">-s &lt;serialNumber&gt; 指定相应serialNumber 号的设备/模拟器为命令目标</span></span><br><span class="line">command 为所需对设备执行的命令</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb connect 127 0.0.1:7555 <span class="comment"># 以 WLAN 网络方式连接（比如：连接电脑上模拟器 MUMU 等）</span></span><br><span class="line">adb disconnect 127.0.0.1:16416 <span class="comment">#断开连接</span></span><br><span class="line">adb -s cf27456f shell <span class="comment"># 指定连接设备使用命令，以USB、串口等方式连接真手机、平板等</span></span><br></pre></td></tr></table></figure><h2 id="安装、卸载APP应用"><a href="#安装、卸载APP应用" class="headerlink" title="安装、卸载APP应用"></a>安装、卸载APP应用</h2><h3 id="1-安装应用"><a href="#1-安装应用" class="headerlink" title="1.安装应用"></a>1.安装应用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb install test.apk <span class="comment">#安装应用</span></span><br><span class="line">adb install -r demo.apk <span class="comment">#保留数据和缓存文件，重新安装apk</span></span><br><span class="line">adb install -s test.apk <span class="comment">#安装apk 到sd 卡</span></span><br></pre></td></tr></table></figure><h3 id="2-卸载应用"><a href="#2-卸载应用" class="headerlink" title="2.卸载应用"></a>2.卸载应用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall cn.com.test.mobile <span class="comment">#卸载应用，需要指定包</span></span><br><span class="line">adb uninstall -k cn.com.test.mobile <span class="comment">#卸载app 但保留数据和缓存文件</span></span><br></pre></td></tr></table></figure><blockquote><p>-k: 卸载 APP 但保留数据和缓存文件</p></blockquote><h2 id="停止进程"><a href="#停止进程" class="headerlink" title="停止进程"></a>停止进程</h2><p>比如，还没进入root环境（su）就先启动了frida-server服务，可以先杀死进程，再进入su进入root环境，启动frida-server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -a | grep frida-server # 查找进程</span><br><span class="line">kill PID# 停止进程</span><br><span class="line">kill -9 PID # 强制停止进程</span><br></pre></td></tr></table></figure><h1 id="启动frida-server服务"><a href="#启动frida-server服务" class="headerlink" title="启动frida-server服务"></a>启动frida-server服务</h1><p>模拟器（雷电模拟器），到雷电模拟器安装目录下输入cmd，回车进入shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Green\leidian\LDPlayer9&gt;adb shell# 进入手机shell</span><br><span class="line">marlin:/ $ su# 进入root环境，#代表root，$代表没root，一般模拟器都有root，没有去开启就行</span><br><span class="line">:/ # cd /data/local/tmp/# frida-server安装路径，</span><br><span class="line">:/data/local/tmp # ls</span><br><span class="line">frida-x86_64 oat</span><br><span class="line">:/data/local/tmp # ./frida-x86_64 &amp;# ./xxx 运行，&amp;代表后台运行</span><br><span class="line">[1] 2817# PID，用ps -a 可以查找到进程和PID</span><br><span class="line">:/data/local/tmp #</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2025/03/28/91cf321dc0924ca0999663fa9f15b216" alt="PixPin_2025-03-28_22-05-51"></p><p>电脑端，再打开一个命令行窗口进行端口转发，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:27042 tcp:27042# frida默认转发端口为27042</span><br><span class="line">adb forward tcp:27043 tcp:27043# 不行就试试27043</span><br></pre></td></tr></table></figure><h2 id="frida-hook-java层"><a href="#frida-hook-java层" class="headerlink" title="frida hook java层"></a>frida hook java层</h2><p>python+frida实现hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">spawn模式，Frida会自行启动并注入进目标App，Hook的时机非常早</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># device=frida.get_remote_device()</span></span><br><span class="line"><span class="comment"># pid=device.spawn（[com.jx885.reward*]) #包名</span></span><br><span class="line"><span class="comment"># device.resume(pid)</span></span><br><span class="line"><span class="comment"># time.sleep(1)</span></span><br><span class="line"><span class="comment"># session = device.attach(pid)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">attach模式，Frida会附加到当前的目标进程中，即需要App处于启动状态，这也意味着只能从当前时机往后Hook，</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h3><p>Frida.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):  <span class="comment"># js中执行send函数后要回调的函数</span></span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session = frida.get_remote_device().attach(<span class="string">&#x27;应用名&#x27;</span>)  <span class="comment"># APPNAME</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./frida.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">    script.on(<span class="string">&#x27;message&#x27;</span>, on_message)  <span class="comment"># 加载回调函数，也就是js中执行send函数规定要执行的python函数</span></span><br><span class="line"></span><br><span class="line">script.load()  <span class="comment"># 加载脚本</span></span><br><span class="line">sys.stdin.read()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="hook-普通java层函数"><a href="#hook-普通java层函数" class="headerlink" title="hook 普通java层函数"></a>hook 普通java层函数</h3><p>frida.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;脚本加载成功！&quot;</span>);</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入java层成功！！&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;包名.类名&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功找到包名.类名！！！&quot;</span>);</span><br><span class="line">        <span class="title class_">MainActivity</span>.方法名.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span>, ...</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> retval = 方法名(参数<span class="number">1</span>, 参数<span class="number">2</span>, ...);<span class="comment">// 如果需要返回值，这样会避免递归调用</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key:&quot;</span> + retval);</span><br><span class="line">        <span class="keyword">return</span> retval;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);<span class="comment">// 相当于 setTimeout(main, 0);</span></span><br></pre></td></tr></table></figure><h3 id="hook-java层重载（overload）函数"><a href="#hook-java层重载（overload）函数" class="headerlink" title="hook java层重载（overload）函数"></a>hook java层重载（overload）函数</h3><p>frida.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;脚本加载成功！&quot;</span>);</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入java层成功！！&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;包名.类名&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功找到包名.类名！！！&quot;</span>);</span><br><span class="line">        <span class="title class_">MainActivity</span>.方法名.<span class="title function_">overload</span>(<span class="string">&#x27;类型1&#x27;</span>, <span class="string">&#x27;类型2&#x27;</span>, ...).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">参数<span class="number">1</span>, 参数<span class="number">2</span>, ...</span>) &#123;<span class="comment">// hook 重载函数</span></span><br><span class="line">        <span class="keyword">var</span> retval = 方法名(参数<span class="number">1</span>, 参数<span class="number">2</span>, ...);<span class="comment">// 如果需要返回值，这样会避免递归调用</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(参数<span class="number">1</span>, 参数<span class="number">2</span>, ...);<span class="comment">// 打印参数</span></span><br><span class="line">        <span class="keyword">return</span> retval;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);<span class="comment">// 相当于 setTimeout(main, 0);</span></span><br></pre></td></tr></table></figure><h3 id="java层主动调用"><a href="#java层主动调用" class="headerlink" title="java层主动调用"></a>java层主动调用</h3><p><strong>主动调用</strong>：强制调用一个函数去执行，直接执行函数，更具主动性</p><p><strong>被动调用</strong>：有app的按照正常逻辑执行，需完成前置交互</p><p>java中类方法可分为：类方法和实例方法；</p><p>如果是类函数的主动调用，直接使用Java.use()函数找到类进行调用即可，</p><p>如果是实例方法的主动调用，则需找到对应实例后对方法调用，使用frida的api函数Java.choose()可以在java堆中找到指定类的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;脚本加载成功！&quot;</span>);</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入java层成功！！&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 静态函数主动调用</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;包名.类名&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功找到包名.类名！！！&quot;</span>);</span><br><span class="line">        <span class="title class_">MainActivity</span>.方法名(参数<span class="number">1</span>, 参数<span class="number">2</span>, ...);</span><br><span class="line">                  </span><br><span class="line">        <span class="comment">// 实例函数主动调用                  </span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&#x27;包名.类名&#x27;</span>), &#123;  </span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">实例</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已找到实例&quot;</span> + 实例);</span><br><span class="line">                实例.方法(参数<span class="number">1</span>, 参数<span class="number">2</span>, ...);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onCompelete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;完成&quot;</span> );</span><br><span class="line">            &#125;              </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);<span class="comment">// 相当于 setTimeout(main, 0);</span></span><br></pre></td></tr></table></figure><h3 id="rpc及其自动化（修改python与js脚本）"><a href="#rpc及其自动化（修改python与js脚本）" class="headerlink" title="rpc及其自动化（修改python与js脚本）"></a>rpc及其自动化（修改python与js脚本）</h3>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识android</title>
      <link href="/2025/03/31/%E5%88%9D%E8%AF%86android/"/>
      <url>/2025/03/31/%E5%88%9D%E8%AF%86android/</url>
      
        <content type="html"><![CDATA[<h1 id="初识Android"><a href="#初识Android" class="headerlink" title="初识Android"></a>初识Android</h1><h2 id="Apk-文件结构"><a href="#Apk-文件结构" class="headerlink" title="Apk 文件结构"></a>Apk 文件结构</h2><p>APK 文件也是一种 ZIP 文件，我们可以使用解压 zip 的工具来对其进行解压；可以直接将apk后缀改为zip后解压。</p><p><img src="https://s1.vika.cn/space/2025/03/11/38fbeda5e22a47849bb3be834b16626a" alt="apk_structure"></p><p><img src="https://s1.vika.cn/space/2025/03/11/d3288aed3f3e43e79788c8dec15b8491" alt="PixPin_2025-03-11_15-44-39"></p><p>APK文件结构：</p><div class="table-container"><table><thead><tr><th style="text-align:center">文件</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">lib目录</td><td style="text-align:center">armeabi-v7a基本通用所有android设备，arm64-v8a只适用于64位的android设备，x86常见用于android模拟器，其目录下的.so文件是c或c++编译的动态链接库文件</td></tr><tr><td style="text-align:center">res目录</td><td style="text-align:center">res目录存放资源文件，包括图片，字符串等等，APK的脸蛋由他的layout文件设计</td></tr><tr><td style="text-align:center">assets目录</td><td style="text-align:center">存放APK的静态资源文件，比如视频，音频，图片等</td></tr><tr><td style="text-align:center">META-INF目录</td><td style="text-align:center">保存应用的签名信息，签名信息可以验证APK文件的完整性，相当于APK的身份证(验证文件是否又被修改)</td></tr><tr><td style="text-align:center">classes.dex文件</td><td style="text-align:center">classes.dex是java源码编译后生成的java字节码文件，APK运行的主要逻辑</td></tr><tr><td style="text-align:center">resources.arsc文件</td><td style="text-align:center">resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</td></tr><tr><td style="text-align:center">AndroidMainfest.xml文件</td><td style="text-align:center">APK的应用清单信息，它描述了应用的名字，版本，权限，引用的库文件等等信息</td></tr></tbody></table></div><h2 id="smali及其语法"><a href="#smali及其语法" class="headerlink" title="smali及其语法"></a>smali及其语法</h2><p>smali是Dalvik的寄存器语言，smali代码是dex反编译而来的。</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><div class="table-container"><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">注释</th></tr></thead><tbody><tr><td style="text-align:left">.class</td><td style="text-align:left">类名</td></tr><tr><td style="text-align:left">.super</td><td style="text-align:left">父类名，继承的上级类名名称</td></tr><tr><td style="text-align:left">.source</td><td style="text-align:left">源名</td></tr><tr><td style="text-align:left">.field</td><td style="text-align:left">变量</td></tr><tr><td style="text-align:left">.method</td><td style="text-align:left">方法名</td></tr><tr><td style="text-align:left">.register</td><td style="text-align:left">寄存器</td></tr><tr><td style="text-align:left">.end method</td><td style="text-align:left">方法名的结束</td></tr><tr><td style="text-align:left">public</td><td style="text-align:left">公有</td></tr><tr><td style="text-align:left">protected</td><td style="text-align:left">半公开，只有同一家人才能用</td></tr><tr><td style="text-align:left">private</td><td style="text-align:left">私有，只能自己使用</td></tr><tr><td style="text-align:left">.parameter</td><td style="text-align:left">方法参数</td></tr><tr><td style="text-align:left">.prologue</td><td style="text-align:left">方法开始</td></tr><tr><td style="text-align:left">.line xxx</td><td style="text-align:left">位于第xxx行</td></tr></tbody></table></div><h3 id="数据类型对应"><a href="#数据类型对应" class="headerlink" title="数据类型对应"></a>数据类型对应</h3><div class="table-container"><table><thead><tr><th style="text-align:left">smali类型</th><th style="text-align:left">java类型</th><th style="text-align:left">注释</th></tr></thead><tbody><tr><td style="text-align:left">V</td><td style="text-align:left">void</td><td style="text-align:left">无返回值</td></tr><tr><td style="text-align:left">Z</td><td style="text-align:left">boolean</td><td style="text-align:left">布尔值类型，返回0或1</td></tr><tr><td style="text-align:left">B</td><td style="text-align:left">byte</td><td style="text-align:left">字节类型，返回字节</td></tr><tr><td style="text-align:left">S</td><td style="text-align:left">short</td><td style="text-align:left">短整数类型，返回数字</td></tr><tr><td style="text-align:left">C</td><td style="text-align:left">char</td><td style="text-align:left">字符类型，返回字符</td></tr><tr><td style="text-align:left">I</td><td style="text-align:left">int</td><td style="text-align:left">整数类型，返回数字</td></tr><tr><td style="text-align:left">J</td><td style="text-align:left">long （64位 需要2个寄存器存储）</td><td style="text-align:left">长整数类型，返回数字</td></tr><tr><td style="text-align:left">F</td><td style="text-align:left">float</td><td style="text-align:left">单浮点类型，返回数字</td></tr><tr><td style="text-align:left">D</td><td style="text-align:left">double （64位 需要2个寄存器存储）</td><td style="text-align:left">双浮点类型，返回数字</td></tr><tr><td style="text-align:left">string</td><td style="text-align:left">String</td><td style="text-align:left">文本类型，返回字符串</td></tr><tr><td style="text-align:left">Lxxx/xxx/xxx</td><td style="text-align:left">object</td><td style="text-align:left">对象类型，返回对象</td></tr></tbody></table></div><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><div class="table-container"><table><thead><tr><th style="text-align:left">关键字</th><th style="text-align:left">注释</th></tr></thead><tbody><tr><td style="text-align:left">const</td><td style="text-align:left">重写整数属性，真假属性内容，只能是数字类型</td></tr><tr><td style="text-align:left">const-string</td><td style="text-align:left">重写字符串内容</td></tr><tr><td style="text-align:left">const-wide</td><td style="text-align:left">重写长整数类型，多用于修改到期时间。</td></tr><tr><td style="text-align:left">return</td><td style="text-align:left">返回指令</td></tr><tr><td style="text-align:left">if-eq</td><td style="text-align:left">全称equal(a=b)，比较寄存器ab内容，相同则跳</td></tr><tr><td style="text-align:left">if-ne</td><td style="text-align:left">全称not equal(a!=b)，ab内容不相同则跳</td></tr><tr><td style="text-align:left">if-eqz</td><td style="text-align:left">全称equal zero(a=0)，z即是0的标记，a等于0则跳</td></tr><tr><td style="text-align:left">if-nez</td><td style="text-align:left">全称not equal zero(a!=0)，a不等于0则跳</td></tr><tr><td style="text-align:left">if-ge</td><td style="text-align:left">全称greater equal(a&gt;=b)，a大于或等于则跳</td></tr><tr><td style="text-align:left">if-le</td><td style="text-align:left">全称little equal(a&lt;=b)，a小于或等于则跳</td></tr><tr><td style="text-align:left">goto</td><td style="text-align:left">强制跳到指定位置</td></tr><tr><td style="text-align:left">switch</td><td style="text-align:left">分支跳转，一般会有多个分支线，并根据指令跳转到适当位置</td></tr><tr><td style="text-align:left">iget</td><td style="text-align:left">获取寄存器数据</td></tr></tbody></table></div><p>其余指令可用语法工具查询</p><p>定位方法：搜索弹窗关键字、抓取按钮id</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个私有、静态、不可变的方法   方法名</span></span><br><span class="line">.method <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> onCreate$lambda-<span class="number">2</span>(Lkotlin/jvm/internal/Ref$IntRef;Lcom/zj/wuaipojie/ui/ChallengeSecond;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/view/View;)Z <span class="comment">//(这里面是方法的参数)这里是方法返回值类型，表示布尔值类型，返回假或真</span></span><br><span class="line">    .registers <span class="number">7</span>  <span class="comment">//寄存器数量</span></span><br><span class="line"></span><br><span class="line">    .line <span class="number">33</span>  <span class="comment">//代码所在的行数</span></span><br><span class="line">    iget p0, p0, Lkotlin/jvm/internal/Ref$IntRef;-&gt;element:I  <span class="comment">//读取p0(第一个参数，参考寄存器知识)中element的值赋值给p0</span></span><br><span class="line"></span><br><span class="line">    const/<span class="number">4</span> p5, <span class="number">0x1</span>  <span class="comment">//p5赋值1</span></span><br><span class="line"></span><br><span class="line">    const/<span class="number">16</span> v0, <span class="number">0xa</span> <span class="comment">//v0赋值10，在16进制里a表示10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>-ge p0, v0, :cond_15  <span class="comment">//判断p0的值是否大于或等于v0的值(即p0的值是否大于或等于10)，如果大于或等于则跳转到:cond_15</span></span><br><span class="line"></span><br><span class="line">    .line <span class="number">34</span>  <span class="comment">//以下是常见的Toast弹窗代码</span></span><br><span class="line">    check-cast p1, Landroid/content/Context; <span class="comment">//检查Context对象引用</span></span><br><span class="line"></span><br><span class="line">    const-string p0, <span class="string">&quot;请先获取10个硬币哦&quot;</span> <span class="comment">//弹窗文本信息，把&quot;&quot;里的字符串数据赋值给p0</span></span><br><span class="line"></span><br><span class="line">    check-cast p0, Ljava/lang/CharSequence; <span class="comment">//检查CharSequence对象引用</span></span><br><span class="line"></span><br><span class="line">    invoke-<span class="keyword">static</span> &#123;p1, p0, p5&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast; </span><br><span class="line">    <span class="comment">//将弹窗文本、显示时间等信息传给p1</span></span><br><span class="line"></span><br><span class="line">    move-result-object p0  <span class="comment">//结果传递给p0</span></span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;p0&#125;, Landroid/widget/Toast;-&gt;show()V  <span class="comment">//当看到这个Toast;-&gt;show你就应该反应过来这里是弹窗代码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">goto</span> :goto_31  <span class="comment">//跳转到:goto_31</span></span><br><span class="line"></span><br><span class="line">    :cond_15 <span class="comment">//跳转的一个地址</span></span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;p1&#125;, Lcom/zj/wuaipojie/ui/ChallengeSecond;-&gt;isvip()Z  <span class="comment">//判断isvip方法的返回值是否为真(即结果是否为1)</span></span><br><span class="line"></span><br><span class="line">    move-result p0  <span class="comment">//结果赋值给p0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>-eqz p0, :cond_43 <span class="comment">//如果结果为0则跳转cond_43地址</span></span><br><span class="line"></span><br><span class="line">    const p0, <span class="number">0x7f0d0018</span>  <span class="comment">//在arsc中的id索引，这个值可以进行查询</span></span><br><span class="line"></span><br><span class="line">    .line <span class="number">37</span></span><br><span class="line">    invoke-virtual &#123;p2, p0&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V <span class="comment">//设置图片资源</span></span><br><span class="line"></span><br><span class="line">    const p0, <span class="number">0x7f0d0008</span></span><br><span class="line"></span><br><span class="line">    .line <span class="number">38</span></span><br><span class="line">    invoke-virtual &#123;p3, p0&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V</span><br><span class="line"></span><br><span class="line">    const p0, <span class="number">0x7f0d000a</span></span><br><span class="line"></span><br><span class="line">    .line <span class="number">39</span></span><br><span class="line">    invoke-virtual &#123;p4, p0&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">40</span></span><br><span class="line">    sget-object p0, Lcom/zj/wuaipojie/util/SPUtils;-&gt;INSTANCE:Lcom/zj/wuaipojie/util/SPUtils; </span><br><span class="line"></span><br><span class="line">    check-cast p1, Landroid/content/Context;</span><br><span class="line"></span><br><span class="line">    const/<span class="number">4</span> p2, <span class="number">0x2</span> <span class="comment">//p2赋值2</span></span><br><span class="line"></span><br><span class="line">    const-string p3, <span class="string">&quot;level&quot;</span> <span class="comment">//sp的索引</span></span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;p0, p1, p3, p2&#125;, Lcom/zj/wuaipojie/util/SPUtils;-&gt;saveInt(Landroid/content/Context;Ljava/lang/String;I)V <span class="comment">//写入数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">goto</span> :goto_50 <span class="comment">//跳转地址</span></span><br><span class="line"></span><br><span class="line">    :cond_43</span><br><span class="line"></span><br><span class="line">    check-cast p1, Landroid/content/Context;</span><br><span class="line"></span><br><span class="line">    const-string p0, <span class="string">&quot;\u8bf7\u5148\u5145\u503c\u5927\u4f1a\u5458\u54e6\uff01&quot;</span> <span class="comment">//请先充值大会员哦！</span></span><br><span class="line"></span><br><span class="line">    check-cast p0, Ljava/lang/CharSequence;</span><br><span class="line"></span><br><span class="line">    invoke-<span class="keyword">static</span> &#123;p1, p0, p5&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;</span><br><span class="line"></span><br><span class="line">    move-result-object p0</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;p0&#125;, Landroid/widget/Toast;-&gt;show()V</span><br><span class="line"></span><br><span class="line">    :goto_50</span><br><span class="line">    <span class="keyword">return</span> p5  <span class="comment">//返回p5的值</span></span><br><span class="line">.end method <span class="comment">//方法结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否是大会员的方法</span></span><br><span class="line">.method <span class="keyword">public</span> <span class="keyword">final</span> <span class="title function_">isvip</span><span class="params">()</span>Z</span><br><span class="line">    .registers <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    const/<span class="number">4</span> v0, <span class="number">0x0</span> <span class="comment">//v0赋值0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v0 <span class="comment">//返回v0的值</span></span><br><span class="line"></span><br><span class="line">.end method</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://bbs.kanxue.com/thread-285906.htm">[原创]Android逆向0基础入门-APK全面解析,动调与脱壳-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://www.52pojie.cn/thread-1695141-1-1.html">《安卓逆向这档事》- 吾爱破解 - 52pojie.cn</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F-Hacker-CTF</title>
      <link href="/2025/03/20/F-Hacker-CTF/"/>
      <url>/2025/03/20/F-Hacker-CTF/</url>
      
        <content type="html"><![CDATA[<h1 id="F-Hacker-CTF"><a href="#F-Hacker-CTF" class="headerlink" title="F-Hacker-CTF"></a>F-Hacker-CTF</h1><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="先来一道签到"><a href="#先来一道签到" class="headerlink" title="先来一道签到"></a>先来一道签到</h3><blockquote><p>gcc 编译流程</p></blockquote><p>.s 文件，GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0，在liinux内用gcc -c xxx.s -o xxx.o，gcc xxx.o -o xxx.exe，再用IDA打开反编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">.file   &quot;chal_custom.c&quot;</span><br><span class="line">.text</span><br><span class="line">.section    .rodata</span><br><span class="line">.LC0:</span><br><span class="line">    .string &quot;%s&quot;</span><br><span class="line">.LC1:</span><br><span class="line">    .string &quot;maybe try again!&quot;</span><br><span class="line">.LC2:</span><br><span class="line">    .string &quot;good job!&quot;</span><br><span class="line">.data</span><br><span class="line">target_data:</span><br><span class="line">    .string &quot;TTDv^jrZu`Gg6tXfi+pZojpZSjXmbqbmt.&amp;x&quot;</span><br><span class="line">.text</span><br><span class="line">.globl  main</span><br><span class="line">.type   main, @function</span><br><span class="line">main:</span><br><span class="line">    endbr64</span><br><span class="line">    pushq   %rbp</span><br><span class="line">    movq    %rsp, %rbp</span><br><span class="line">    subq    $96, %rsp</span><br><span class="line">    movq    %fs:40, %rax</span><br><span class="line">    movq    %rax, -8(%rbp)</span><br><span class="line">    xorl    %eax, %eax</span><br><span class="line">    leaq    -80(%rbp), %rax           </span><br><span class="line">    movq    %rax, %rsi</span><br><span class="line">    leaq    .LC0(%rip), %rax</span><br><span class="line">    movq    %rax, %rdi</span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    call    __isoc99_scanf@PLT</span><br><span class="line">    movl    $0, -84(%rbp)             </span><br><span class="line">    leaq    -80(%rbp), %rdi            </span><br><span class="line">    jmp     .L2</span><br><span class="line">.L3:</span><br><span class="line">    movl    -84(%rbp), %eax          </span><br><span class="line">    movl    %eax, %ecx               </span><br><span class="line">    shl     %ecx                      </span><br><span class="line">    movzbl  (%rdi,%rcx), %eax        </span><br><span class="line">    xorb    $7, %al                  </span><br><span class="line">    movb    %al, (%rdi,%rcx)          </span><br><span class="line">    movzbl  1(%rdi,%rcx), %eax        </span><br><span class="line">    subb    $5, %al                    </span><br><span class="line">    movb    %al, 1(%rdi,%rcx)       </span><br><span class="line">    addl    $1, -84(%rbp)           </span><br><span class="line">.L2:</span><br><span class="line">    movl    -84(%rbp), %eax</span><br><span class="line">    imull   $2, %eax                  </span><br><span class="line">    cmpl    $36, %eax                 </span><br><span class="line">    jl      .L3</span><br><span class="line"></span><br><span class="line">    leaq    target_data(%rip), %rsi  </span><br><span class="line">    leaq    -80(%rbp), %rdi           </span><br><span class="line">    call    strcmp@PLT</span><br><span class="line">    testl   %eax, %eax</span><br><span class="line">    jne     .L4</span><br><span class="line">    </span><br><span class="line">    leaq    .LC2(%rip), %rax          </span><br><span class="line">    jmp     .L5</span><br><span class="line">.L4:</span><br><span class="line">    leaq    .LC1(%rip), %rax          </span><br><span class="line">.L5:</span><br><span class="line">    movq    %rax, %rdi</span><br><span class="line">    call    puts@PLT</span><br><span class="line"></span><br><span class="line">    movl    $0, %eax</span><br><span class="line">    movq    -8(%rbp), %rdx</span><br><span class="line">    subq    %fs:40, %rdx</span><br><span class="line">    je      .L6</span><br><span class="line">    call    __stack_chk_fail@PLT</span><br><span class="line">.L6:</span><br><span class="line">    leave</span><br><span class="line">    ret</span><br><span class="line">.size   main, .-main</span><br><span class="line">.ident  &quot;GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0&quot;</span><br><span class="line">.section    .note.GNU-stack,&quot;&quot;,@progbits</span><br><span class="line">.section    .note.gnu.property,&quot;a&quot;</span><br><span class="line">.align 8</span><br><span class="line">.long   1f - 0f</span><br><span class="line">.long   4f - 1f</span><br><span class="line">.long   5</span><br><span class="line">0:</span><br><span class="line">    .string &quot;GNU&quot;</span><br><span class="line">1:</span><br><span class="line">    .align 8</span><br><span class="line">    .long   0xc0000002</span><br><span class="line">    .long   3f - 2f</span><br><span class="line">2:</span><br><span class="line">    .long   0x3</span><br><span class="line">3:</span><br><span class="line">    .align 8</span><br><span class="line">4:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2025/03/27/4ac0beb781d44bc59c46f4f288791a89" alt="PixPin_2025-03-27_19-48-24"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">84</span>, <span class="number">84</span>, <span class="number">68</span>, <span class="number">118</span>, <span class="number">94</span>, <span class="number">106</span>, <span class="number">114</span>, <span class="number">90</span>, <span class="number">117</span>, <span class="number">96</span>, <span class="number">71</span>, <span class="number">103</span>, <span class="number">54</span>, <span class="number">116</span>, <span class="number">88</span>, <span class="number">102</span>, <span class="number">105</span>, <span class="number">43</span>, <span class="number">112</span>, <span class="number">90</span>, <span class="number">111</span>, <span class="number">106</span>, <span class="number">112</span>, <span class="number">90</span>, <span class="number">83</span>,</span><br><span class="line">       <span class="number">106</span>, <span class="number">88</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">113</span>, <span class="number">98</span>, <span class="number">109</span>, <span class="number">116</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">120</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(enc[i] ^ <span class="number">7</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(enc[i] + <span class="number">5</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># SYC&#123;You_re@l1y_kn0w_how_To_revers3!&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="holle-re"><a href="#holle-re" class="headerlink" title="holle_re"></a>holle_re</h3><blockquote><p>UPX壳改了对应十六进制标志导致工具脱壳不成功，用010打开找到并改回来就行</p></blockquote><p>查壳，发现有UPX壳</p><p><img src="https://s1.vika.cn/space/2025/03/30/088a4b9df46348c9a99254dd7110c39e" alt="PixPin_2025-03-30_23-43-56"></p><p>upx -d 脱壳失败，之前遇到过类似的情况，用010打开</p><p><img src="https://s1.vika.cn/space/2025/03/30/d719ff59d2e94a00909b8c2be2944764" alt="PixPin_2025-03-30_23-48-42"></p><p>把1处改为2处再保存就行，再upx -d 就成功了</p><p><img src="https://s1.vika.cn/space/2025/03/30/f058f0deb6664bb9bbb2cb03886d3103" alt="PixPin_2025-03-30_23-50-34"></p><p>IDA打开分析</p><p><img src="https://s1.vika.cn/space/2025/03/30/ff64720578e64f0786b3aa9f696d217a" alt="PixPin_2025-03-30_23-57-59"></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v7 = [</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">52</span>, <span class="number">3</span>, <span class="number">96</span>, <span class="number">47</span>, <span class="number">28</span>, <span class="number">107</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">24</span>,</span><br><span class="line">    <span class="number">45</span>, <span class="number">62</span>, <span class="number">60</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">123</span>, <span class="number">39</span>, <span class="number">58</span>, <span class="number">41</span>, <span class="number">48</span>, <span class="number">96</span>,</span><br><span class="line">    <span class="number">26</span>, <span class="number">8</span>, <span class="number">52</span>, <span class="number">63</span>, <span class="number">100</span>, <span class="number">33</span>, <span class="number">106</span>, <span class="number">122</span>, <span class="number">48</span>]</span><br><span class="line">v5 = <span class="built_in">list</span>(<span class="string">&#x27;REVOLCYS&#x27;</span>)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v7)):</span><br><span class="line">    v7[j] ^= j ^ <span class="built_in">ord</span>(v5[j % <span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(v7).decode())</span><br><span class="line"><span class="comment"># SYC&#123;H3lI0_@_new_R3vers3_Ctf3r!!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="让康康你的调试"><a href="#让康康你的调试" class="headerlink" title="让康康你的调试"></a>让康康你的调试</h3><p>IDA打开分析</p><p><img src="https://s1.vika.cn/space/2025/03/30/4f7188684bc74d419c2dde500ed8a58d" alt="PixPin_2025-03-31_00-17-01"></p><p>加密部分，对我们的输入只有异或操作，前面也只有一个异或0x14，也就是说，只要把密文重新输进去就可以得到flag</p><p><img src="https://s1.vika.cn/space/2025/03/31/6ee539d77de240bbb30e1c9937323af0" alt="PixPin_2025-03-31_22-25-51"></p><p>先提取密文，小端序33位，文件是elf要到liunx里启用远程调试服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s2[<span class="number">0</span>] = 0xA67A02C9047D5B94LL;</span><br><span class="line">s2[<span class="number">1</span>] = 0x7EF9680DBC980739LL;</span><br><span class="line">s2[<span class="number">2</span>] = <span class="number">0x7</span>104F81698BFBD08LL;</span><br><span class="line">s2[<span class="number">3</span>] = 0x61DB8498B686155FLL;</span><br><span class="line">n0x6D = <span class="number">0x6D</span>;</span><br><span class="line"></span><br><span class="line">enc = [</span><br><span class="line"><span class="number">0x94</span>, <span class="number">0x5B</span>, <span class="number">0x7D</span>, <span class="number">0x04</span>, <span class="number">0xC9</span>, <span class="number">0x02</span>, <span class="number">0x7A</span>, <span class="number">0xA6</span>, <span class="number">0x39</span>, <span class="number">0x07</span>, </span><br><span class="line"> <span class="number">0x98</span>, <span class="number">0xBC</span>, <span class="number">0x0D</span>, <span class="number">0x68</span>, <span class="number">0xF9</span>, <span class="number">0x7E</span>, <span class="number">0x08</span>, <span class="number">0xBD</span>, <span class="number">0xBF</span>, <span class="number">0x98</span>, </span><br><span class="line"> <span class="number">0x16</span>, <span class="number">0xF8</span>, <span class="number">0x04</span>, <span class="number">0x71</span>, <span class="number">0x5F</span>, <span class="number">0x15</span>, <span class="number">0x86</span>, <span class="number">0xB6</span>, <span class="number">0x98</span>, <span class="number">0x84</span>, </span><br><span class="line"> <span class="number">0xDB</span>, <span class="number">0x61</span>, <span class="number">0x6D</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 94 5B 7D 04 C9 02 7A A6 39 07 98 BC 0D 68 F9 7E 08 BD BF 98 16 F8 04 71 5F 15 86 B6 98 84 DB 61 6D</span></span><br></pre></td></tr></table></figure><p>初始输入</p><p><img src="https://s1.vika.cn/space/2025/03/31/70449c9a4652487e91cc52d0f8bab63e" alt="PixPin_2025-03-31_22-52-00"></p><p>使用change byte修改字节码</p><p><img src="https://s1.vika.cn/space/2025/03/31/84e0f7e849aa4b1e9abe524878dfe29c" alt="PixPin_2025-03-31_22-53-38"></p><p>运行到验证结果处</p><p><img src="https://s1.vika.cn/space/2025/03/31/6448af75ab3c4b64b5fae2d1feb44b97" alt="PixPin_2025-03-31_22-55-34"></p><p>flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;welcome_t0_Geek&#x27;s_3asy_rc4!&#125;</span><br></pre></td></tr></table></figure><h3 id="我嘞个z3"><a href="#我嘞个z3" class="headerlink" title="我嘞个z3"></a>我嘞个z3</h3><blockquote><p>Z3约束求解器</p></blockquote><p><img src="./../../../%E5%9B%BE%E7%89%87/pixpin/PixPin_2025-03-27_20-30-18.png" alt="PixPin_2025-03-27_20-30-18"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># key</span></span><br><span class="line">str2 = [</span><br><span class="line">    <span class="number">0x2A</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x14</span>, <span class="number">0x3F</span>, <span class="number">0x3F</span>, <span class="number">0x3F</span>, <span class="number">0x26</span>, <span class="number">0x11</span>, <span class="number">0x0A</span>,</span><br><span class="line">    <span class="number">0x15</span>, <span class="number">0x15</span>, <span class="number">0x0E</span>, <span class="number">0x17</span>, <span class="number">0x10</span>, <span class="number">0x0E</span></span><br><span class="line">]</span><br><span class="line">list_table = <span class="built_in">list</span>(<span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ?_&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str2:</span><br><span class="line">    <span class="built_in">print</span>(list_table[i], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>() </span><br><span class="line"></span><br><span class="line"><span class="comment"># __int64 __fastcall sub_40179A(__int64 a1)</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   int i; // [rsp+Ch] [rbp-4h]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   for ( i = 0; i &lt;= 31; i += 4 )</span></span><br><span class="line"><span class="comment">#   &#123;</span></span><br><span class="line"><span class="comment">#     if ( *(char *)(a1 + i) + 8 * *(char *)(a1 + i + 1) + 6 * *(char *)(a1 + i + 2) + *(char *)(a1 + i + 3) != dword_4040A0[i]</span></span><br><span class="line"><span class="comment">#       || *(char *)(a1 + i + 1) + 8 * *(char *)(a1 + i + 2) + 6 * *(char *)(a1 + i + 3) + *(char *)(a1 + i) != dword_4040A0[i + 1]</span></span><br><span class="line"><span class="comment">#       || *(char *)(a1 + i + 2) + 8 * *(char *)(a1 + i + 3) + 6 * *(char *)(a1 + i) + *(char *)(a1 + i + 1) != dword_4040A0[i + 2]</span></span><br><span class="line"><span class="comment">#       || *(char *)(a1 + i + 3) + 8 * *(char *)(a1 + i) + 6 * *(char *)(a1 + i + 1) + *(char *)(a1 + i + 2) != dword_4040A0[i + 3] )</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#       return 0i64;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment">#   return 1i64;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># dword 双字节</span></span><br><span class="line">dword_4040A0 = [</span><br><span class="line">    <span class="number">0x9B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x13</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x89</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC9</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x50</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x36</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xDE</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xBC</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1B</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x24</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x75</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xCA</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xE5</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC7</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB7</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x91</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x71</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5F</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6F</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x17</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1E</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x26</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB5</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">c = [</span><br><span class="line">    <span class="number">0x19B</span>, <span class="number">0x113</span>, <span class="number">0x189</span>, <span class="number">0x1C9</span>, <span class="number">0x250</span>, <span class="number">0x536</span>, <span class="number">0x4DE</span>, <span class="number">0x1BC</span>, <span class="number">0x41B</span>, <span class="number">0x724</span>,</span><br><span class="line">    <span class="number">0x6D0</span>, <span class="number">0x4A1</span>, <span class="number">0x645</span>, <span class="number">0x475</span>, <span class="number">0x4CA</span>, <span class="number">0x68C</span>, <span class="number">0x3E5</span>, <span class="number">0x1C7</span>, <span class="number">0x33D</span>, <span class="number">0x5B7</span>,</span><br><span class="line">    <span class="number">0x28D</span>, <span class="number">0x244</span>, <span class="number">0x30E</span>, <span class="number">0x291</span>, <span class="number">0x271</span>, <span class="number">0x301</span>, <span class="number">0x45F</span>, <span class="number">0x46F</span>, <span class="number">0x517</span>, <span class="number">0x41E</span>,</span><br><span class="line">    <span class="number">0x426</span>, <span class="number">0x4B5</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">x = [Int(<span class="string">f&quot;x<span class="subst">&#123;_&#125;</span>&quot;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">32</span>)]</span><br><span class="line">array = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(c), <span class="number">4</span>):</span><br><span class="line">    s.add(x[i] + <span class="number">8</span> * x[i + <span class="number">1</span>] + <span class="number">6</span> * x[i + <span class="number">2</span>] + x[i + <span class="number">3</span>] == c[i])</span><br><span class="line">    s.add(x[i + <span class="number">1</span>] + <span class="number">8</span> * x[i + <span class="number">2</span>] + <span class="number">6</span> * x[i + <span class="number">3</span>] + x[i] == c[i + <span class="number">1</span>])</span><br><span class="line">    s.add(x[i + <span class="number">2</span>] + <span class="number">8</span> * x[i + <span class="number">3</span>] + <span class="number">6</span> * x[i] + x[i + <span class="number">1</span>] == c[i + <span class="number">2</span>])</span><br><span class="line">    s.add(x[i + <span class="number">3</span>] + <span class="number">8</span> * x[i] + <span class="number">6</span> * x[i + <span class="number">1</span>] + x[i + <span class="number">2</span>] == c[i + <span class="number">3</span>])</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    r = s.model()</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;no answer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [x6 = 69,</span></span><br><span class="line"><span class="comment">#  x29 = 102,</span></span><br><span class="line"><span class="comment">#  x2 = 7,</span></span><br><span class="line"><span class="comment">#  x18 = 28,</span></span><br><span class="line"><span class="comment">#  x7 = 125,</span></span><br><span class="line"><span class="comment">#  x19 = 5,</span></span><br><span class="line"><span class="comment">#  x3 = 26,</span></span><br><span class="line"><span class="comment">#  x11 = 118,</span></span><br><span class="line"><span class="comment">#  x9 = 9,</span></span><br><span class="line"><span class="comment">#  x5 = 3,</span></span><br><span class="line"><span class="comment">#  x17 = 89,</span></span><br><span class="line"><span class="comment">#  x13 = 126,</span></span><br><span class="line"><span class="comment">#  x14 = 74,</span></span><br><span class="line"><span class="comment">#  x23 = 70,</span></span><br><span class="line"><span class="comment">#  x22 = 9,</span></span><br><span class="line"><span class="comment">#  x31 = 69,</span></span><br><span class="line"><span class="comment">#  x1 = 40,</span></span><br><span class="line"><span class="comment">#  x10 = 125,</span></span><br><span class="line"><span class="comment">#  x25 = 26,</span></span><br><span class="line"><span class="comment">#  x26 = 43,</span></span><br><span class="line"><span class="comment">#  x21 = 63,</span></span><br><span class="line"><span class="comment">#  x30 = 60,</span></span><br><span class="line"><span class="comment">#  x15 = 54,</span></span><br><span class="line"><span class="comment">#  x27 = 48,</span></span><br><span class="line"><span class="comment">#  x24 = 111,</span></span><br><span class="line"><span class="comment">#  x12 = 99,</span></span><br><span class="line"><span class="comment">#  x0 = 23,</span></span><br><span class="line"><span class="comment">#  x16 = 112,</span></span><br><span class="line"><span class="comment">#  x28 = 58,</span></span><br><span class="line"><span class="comment">#  x20 = 25,</span></span><br><span class="line"><span class="comment">#  x8 = 111,</span></span><br><span class="line"><span class="comment">#  x4 = 29]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># const char *__fastcall sub_401AAC(const char *a1, __int64 a2)</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   const char *result; // rax</span></span><br><span class="line"><span class="comment">#   int v3; // [rsp+28h] [rbp-8h]</span></span><br><span class="line"><span class="comment">#   int i; // [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   sub_4019EB(a1);</span></span><br><span class="line"><span class="comment">#   result = (const char *)strlen(a1);</span></span><br><span class="line"><span class="comment">#   v3 = (int)result;</span></span><br><span class="line"><span class="comment">#   for ( i = 0; i &lt;= 31; ++i )</span></span><br><span class="line"><span class="comment">#   &#123;</span></span><br><span class="line"><span class="comment">#     a1[i] ^= a1[(v3 + i - 1) % v3];</span></span><br><span class="line"><span class="comment">#     result = &amp;a1[i];</span></span><br><span class="line"><span class="comment">#     *result ^= *(_BYTE *)(a2 + (47 - i) % 16) ^ (unsigned __int8)i;</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment">#   return result;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">x = [<span class="number">23</span>, <span class="number">40</span>, <span class="number">7</span>, <span class="number">26</span>, <span class="number">29</span>, <span class="number">3</span>, <span class="number">69</span>, <span class="number">125</span>, <span class="number">111</span>, <span class="number">9</span>, <span class="number">125</span>, <span class="number">118</span>, <span class="number">99</span>, <span class="number">126</span>, <span class="number">74</span>, <span class="number">54</span>, <span class="number">112</span>, <span class="number">89</span>, <span class="number">28</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">63</span>, <span class="number">9</span>, <span class="number">70</span>, <span class="number">111</span>, <span class="number">26</span>, <span class="number">43</span>, <span class="number">48</span>,</span><br><span class="line">     <span class="number">58</span>, <span class="number">102</span>, <span class="number">60</span>, <span class="number">69</span>]</span><br><span class="line">v3 = <span class="built_in">len</span>(x)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    x[i] ^= x[(i + v3 + <span class="number">1</span>) % v3]</span><br><span class="line">    r = x[i]</span><br><span class="line">     </span><br><span class="line">key = <span class="string">&#x27;Geek___Challenge&#x27;</span></span><br><span class="line">x = [<span class="number">23</span>, <span class="number">40</span>, <span class="number">7</span>, <span class="number">26</span>, <span class="number">29</span>, <span class="number">3</span>, <span class="number">69</span>, <span class="number">125</span>, <span class="number">111</span>, <span class="number">9</span>, <span class="number">125</span>, <span class="number">118</span>, <span class="number">99</span>, <span class="number">126</span>, <span class="number">74</span>, <span class="number">54</span>, <span class="number">112</span>, <span class="number">89</span>, <span class="number">28</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">63</span>, <span class="number">9</span>, <span class="number">70</span>, <span class="number">111</span>, <span class="number">26</span>, <span class="number">43</span>, <span class="number">48</span>,</span><br><span class="line">     <span class="number">58</span>, <span class="number">102</span>, <span class="number">60</span>, <span class="number">69</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    x[i] ^= <span class="built_in">ord</span>(key[(<span class="number">47</span> - i) % <span class="number">16</span>]) ^ i</span><br><span class="line">    x[i] ^= x[(<span class="built_in">len</span>(x) + i - <span class="number">1</span>) % <span class="built_in">len</span>(x)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x[i]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># SYC&#123;ow!WY0!_ru_43_9od_A0r3t_&#125;$!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">x = <span class="string">&#x27;SYC&#123;ow!WY0!_ru_43_9od_A0r3t_&#125;$!!&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    tmp1 = x[<span class="number">4</span> * i:<span class="number">4</span> * i + <span class="number">4</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        tmp2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        tmp2 += tmp1[<span class="number">3</span>] + tmp1[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">        tmp1 = tmp2</span><br><span class="line">    flag += tmp1</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># SYC&#123;Wow!!_Y0u_4r3_9o0d_At_r3$!!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="好像是python"><a href="#好像是python" class="headerlink" title="好像是python?"></a>好像是python?</h3><blockquote><p>pyc反编译失败，用ai辅助直接看汇编逆向</p></blockquote><p>一个没有后缀的文件，根据题目，应该改成.py或.pyc，再用pycdc或uncompyle6反编译</p><p>但都反编译失败，所以就直接看汇编再用ai写逻辑了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 反编译后的代码</span></span><br><span class="line">flag = <span class="string">&#x27;SYC&#123;MD5(input)&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Please input0:&#x27;</span>)</span><br><span class="line">input0 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>(<span class="params">s2</span>):</span><br><span class="line">    key = <span class="string">&#x27;SYC&#x27;</span></span><br><span class="line">    length = <span class="number">18</span></span><br><span class="line">    cipher = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        c = <span class="built_in">ord</span>(s2[i]) ^ i</span><br><span class="line">        c += (~<span class="built_in">ord</span>(key[i % <span class="number">3</span>]) + <span class="number">1</span>)</span><br><span class="line">        cipher.append(c)</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">s, R</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;A&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">            shifted = (<span class="built_in">ord</span>(i) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + R) % <span class="number">26</span></span><br><span class="line">            result.append(<span class="built_in">chr</span>(shifted + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)))</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;a&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            shifted = (<span class="built_in">ord</span>(i) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + R) % <span class="number">26</span></span><br><span class="line">            result.append(<span class="built_in">chr</span>(shifted + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)))</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">            shifted = (<span class="built_in">ord</span>(i) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) + R) % <span class="number">10</span></span><br><span class="line">            result.append(<span class="built_in">chr</span>(shifted + <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(i)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">13</span></span><br><span class="line">b = <span class="number">14</span></span><br><span class="line">c = a ^ (b + a)</span><br><span class="line">d = b * <span class="number">100</span></span><br><span class="line">e = a ^ b</span><br><span class="line">m = d - c * <span class="number">4</span> + e - <span class="number">1</span></span><br><span class="line">r = m % <span class="number">26</span></span><br><span class="line"></span><br><span class="line">cipher1 = test(input0, r)</span><br><span class="line">cipher2 = test2(cipher1)</span><br><span class="line"></span><br><span class="line">num = [-<span class="number">1</span>, -<span class="number">36</span>, <span class="number">26</span>, -<span class="number">5</span>, <span class="number">14</span>, <span class="number">41</span>, <span class="number">6</span>, -<span class="number">9</span>, <span class="number">60</span>, <span class="number">29</span>, -<span class="number">28</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">35</span>, <span class="number">38</span>, <span class="number">26</span>, <span class="number">48</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    <span class="keyword">if</span> cipher2[i] != num[i]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;wrong!&#x27;</span>)</span><br><span class="line">        exit()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Rrrright!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逆向推导步骤：</span></span><br><span class="line"><span class="comment"># 1. 计算已知变量的值</span></span><br><span class="line">a = <span class="number">13</span></span><br><span class="line">b = <span class="number">14</span></span><br><span class="line">c = a ^ (a + b)  <span class="comment"># 13 ^ 27 = 22</span></span><br><span class="line">d = b * <span class="number">100</span>  <span class="comment"># 1400</span></span><br><span class="line">e = a ^ b  <span class="comment"># 13 ^ 14 = 3</span></span><br><span class="line">m = d - c * <span class="number">4</span> + e - <span class="number">1</span>  <span class="comment"># 1400 - 88 +3 -1 = 1314</span></span><br><span class="line">r = m % <span class="number">26</span>  <span class="comment"># 1314 % 26 = 14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 逆向test2函数</span></span><br><span class="line">num = [-<span class="number">1</span>, -<span class="number">36</span>, <span class="number">26</span>, -<span class="number">5</span>, <span class="number">14</span>, <span class="number">41</span>, <span class="number">6</span>, -<span class="number">9</span>, <span class="number">60</span>, <span class="number">29</span>, -<span class="number">28</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">35</span>, <span class="number">38</span>, <span class="number">26</span>, <span class="number">48</span>]</span><br><span class="line">key = <span class="string">&#x27;SYC&#x27;</span></span><br><span class="line"></span><br><span class="line">cipher1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    <span class="comment"># cipher2[i] = (cipher1[i] ^ i) + (~ord(key[i%3]) +1</span></span><br><span class="line">    <span class="comment"># 逆向: cipher1[i] = (num[i] - (~ord(key[i%3]) +1 )) ^ i</span></span><br><span class="line">    k = <span class="built_in">ord</span>(key[i % <span class="number">3</span>])</span><br><span class="line">    inv_k = ~k + <span class="number">1</span></span><br><span class="line">    c1 = (num[i] - inv_k) ^ i</span><br><span class="line">    cipher1.append(c1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 逆向test函数 (R=14)</span></span><br><span class="line">plaintext = []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cipher1:</span><br><span class="line">    c = <span class="built_in">chr</span>(c)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;A&#x27;</span> &lt;= c &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">        shifted = (<span class="built_in">ord</span>(c) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - <span class="number">14</span>) % <span class="number">26</span></span><br><span class="line">        plaintext.append(<span class="built_in">chr</span>(shifted + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)))</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;a&#x27;</span> &lt;= c &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">        shifted = (<span class="built_in">ord</span>(c) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) - <span class="number">14</span>) % <span class="number">26</span></span><br><span class="line">        plaintext.append(<span class="built_in">chr</span>(shifted + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)))</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= c &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">        shifted = (<span class="built_in">ord</span>(c) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) - <span class="number">14</span>) % <span class="number">10</span></span><br><span class="line">        plaintext.append(<span class="built_in">chr</span>(shifted + <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plaintext.append(c)</span><br><span class="line"></span><br><span class="line">input0 = <span class="string">&#x27;&#x27;</span>.join(plaintext)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, <span class="string">f&#x27;SYC&#123;&#123;<span class="subst">&#123;input0&#125;</span>&#125;&#125;&#x27;</span>)  <span class="comment"># 注意计算MD5，但根据题目直接输出明文</span></span><br><span class="line"><span class="comment"># SYC&#123;D0_You_Iik3_python&#125;</span></span><br></pre></td></tr></table></figure><h3 id="也许你也听jay"><a href="#也许你也听jay" class="headerlink" title="也许你也听jay"></a>也许你也听jay</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">b = [<span class="number">0x96</span>, <span class="number">0xa1</span>, <span class="number">0xa0</span>, <span class="number">0x9b</span>, <span class="number">0x9b</span>, <span class="number">0x5f</span>, <span class="number">0x49</span>, <span class="number">0x46</span>, <span class="number">0x85</span>, <span class="number">0x82</span>, <span class="number">0x53</span>, <span class="number">0x95</span>, <span class="number">0x7d</span>, <span class="number">0x36</span>, <span class="number">0x8d</span>, <span class="number">0x74</span>, <span class="number">0x82</span>, <span class="number">0x88</span>, <span class="number">0x46</span>,</span><br><span class="line">     <span class="number">0x7a</span>, <span class="number">0x81</span>, <span class="number">0x65</span>, <span class="number">0x80</span>, <span class="number">0x6c</span>, <span class="number">0x78</span>, <span class="number">0x2f</span>, <span class="number">0x6b</span>, <span class="number">0x6a</span>, <span class="number">0x27</span>, <span class="number">0x50</span>, <span class="number">0x61</span>, <span class="number">0x38</span>, <span class="number">0x3f</span>, <span class="number">0x37</span>, <span class="number">0x33</span>, <span class="number">0xf1</span>, <span class="number">0x27</span>, <span class="number">0x32</span>,</span><br><span class="line">     <span class="number">0x34</span>, <span class="number">0x1f</span>, <span class="number">0x39</span>, <span class="number">0x23</span>, <span class="number">0xde</span>, <span class="number">0x1c</span>, <span class="number">0x17</span>, <span class="number">0xd4</span>]</span><br><span class="line">c = [<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>,</span><br><span class="line">     <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x18</span>, <span class="number">0x19</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x1C</span>, <span class="number">0x1D</span>, <span class="number">0x1E</span>, <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0x21</span>, <span class="number">0x22</span>, <span class="number">0x23</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x26</span>,</span><br><span class="line">     <span class="number">0x27</span>, <span class="number">0x28</span>, <span class="number">0x29</span>, <span class="number">0x2A</span>, <span class="number">0x2B</span>, <span class="number">0x2C</span>, <span class="number">0x2D</span>, <span class="number">0x2E</span>, <span class="number">0x2F</span>, <span class="number">0x30</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x39</span>,</span><br><span class="line">     <span class="number">0x3A</span>, <span class="number">0x3B</span>, <span class="number">0x3C</span>, <span class="number">0x3D</span>, <span class="number">0x3E</span>, <span class="number">0x3F</span>, <span class="number">0x40</span>, <span class="number">0x41</span>, <span class="number">0x42</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x49</span>, <span class="number">0x4A</span>, <span class="number">0x4B</span>, <span class="number">0x4C</span>,</span><br><span class="line">     <span class="number">0x4D</span>, <span class="number">0x4E</span>, <span class="number">0x4F</span>, <span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x54</span>, <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x58</span>, <span class="number">0x59</span>, <span class="number">0x5A</span>, <span class="number">0x5B</span>, <span class="number">0x5C</span>, <span class="number">0x5D</span>, <span class="number">0x5E</span>, <span class="number">0x5F</span>,</span><br><span class="line">     <span class="number">0x60</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x65</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x6D</span>, <span class="number">0x6E</span>, <span class="number">0x6F</span>, <span class="number">0x70</span>, <span class="number">0x71</span>, <span class="number">0x72</span>,</span><br><span class="line">     <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x77</span>, <span class="number">0x78</span>, <span class="number">0x79</span>, <span class="number">0x7A</span>, <span class="number">0x7B</span>, <span class="number">0x7C</span>, <span class="number">0x7D</span>, <span class="number">0x7E</span>, <span class="number">0x7F</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0x82</span>, <span class="number">0x83</span>, <span class="number">0x84</span>, <span class="number">0x85</span>,</span><br><span class="line">     <span class="number">0x86</span>, <span class="number">0x87</span>, <span class="number">0x88</span>, <span class="number">0x89</span>, <span class="number">0x8A</span>, <span class="number">0x8B</span>, <span class="number">0x8C</span>, <span class="number">0x8D</span>]</span><br><span class="line">d = [<span class="number">0x5D</span>, <span class="number">0x5C</span>, <span class="number">0x5B</span>, <span class="number">0x5A</span>, <span class="number">0x59</span>, <span class="number">0x58</span>, <span class="number">0x57</span>, <span class="number">0x56</span>, <span class="number">0x55</span>, <span class="number">0x54</span>, <span class="number">0x53</span>, <span class="number">0x52</span>, <span class="number">0x51</span>, <span class="number">0x50</span>, <span class="number">0x4F</span>, <span class="number">0x4E</span>, <span class="number">0x4D</span>, <span class="number">0x4C</span>, <span class="number">0x4B</span>,</span><br><span class="line">     <span class="number">0x4A</span>, <span class="number">0x49</span>, <span class="number">0x48</span>, <span class="number">0x47</span>, <span class="number">0x46</span>, <span class="number">0x45</span>, <span class="number">0x44</span>, <span class="number">0x43</span>, <span class="number">0x42</span>, <span class="number">0x41</span>, <span class="number">0x40</span>, <span class="number">0x3F</span>, <span class="number">0x3E</span>, <span class="number">0x3D</span>, <span class="number">0x3C</span>, <span class="number">0x3B</span>, <span class="number">0x3A</span>, <span class="number">0x39</span>, <span class="number">0x38</span>,</span><br><span class="line">     <span class="number">0x37</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x34</span>, <span class="number">0x33</span>, <span class="number">0x32</span>, <span class="number">0x31</span>, <span class="number">0x30</span>, <span class="number">0x2F</span>, <span class="number">0x2E</span>, <span class="number">0x2D</span>, <span class="number">0x2C</span>, <span class="number">0x2B</span>, <span class="number">0x2A</span>, <span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0x27</span>, <span class="number">0x26</span>, <span class="number">0x25</span>,</span><br><span class="line">     <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x22</span>, <span class="number">0x21</span>, <span class="number">0x20</span>, <span class="number">0x1F</span>, <span class="number">0x1E</span>, <span class="number">0x1D</span>, <span class="number">0x1C</span>, <span class="number">0x1B</span>, <span class="number">0x1A</span>, <span class="number">0x19</span>, <span class="number">0x18</span>, <span class="number">0x17</span>, <span class="number">0x16</span>, <span class="number">0x15</span>, <span class="number">0x14</span>, <span class="number">0x13</span>, <span class="number">0x12</span>,</span><br><span class="line">     <span class="number">0x11</span>, <span class="number">0x10</span>, <span class="number">0x0F</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x0C</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x09</span>, <span class="number">0x08</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x01</span>]</span><br><span class="line">l = <span class="built_in">len</span>(b)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    b[i] -= d[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    b[i] += c[<span class="number">47</span> + i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    b[i] ^= c[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(b[i]).encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://am1re-sudo.github.io/Coisni&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(url))</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://am1re-sudo.github.io/Coisni漠github漠io寞35</span></span><br><span class="line"><span class="comment"># 在</span></span><br><span class="line"><span class="comment"># https://github.com/Am1re-sudo/Coisni.github.io/blob/main/geek/index.html</span></span><br><span class="line"><span class="comment"># 找到三个提示</span></span><br><span class="line"><span class="comment"># Q7u+cyiOQtKHRMqZNzPpApgmTL4j+TE= 密文</span></span><br><span class="line"><span class="comment"># lovebeforeBC 秘钥</span></span><br><span class="line"><span class="comment"># RC4 解密</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="玩就行了"><a href="#玩就行了" class="headerlink" title="玩就行了"></a>玩就行了</h3><p>方法一：是的，玩就行了，只要玩到对应分数就会在目录下生成一个Data.txt文件</p><p>方法二：用CE修改器找到分数修改就行</p><p>方法三：用despy打开Assembly-CSharp.dll，找到分数位置修改好后保存就行，或者改每次的得分大小</p><p><img src="https://s1.vika.cn/space/2025/03/30/d1619e2b3c134541921dacfce5232227" alt="PixPin_2025-03-01_22-32-24"></p><p>Data.txt文件里面是16进制数，用010十六进制编辑器打开，发现会被错误的识别然后再用十六进制翻译表示一遍，所以我们按ctrl+shift+v修正，</p><p>或者先将Data.txt中的内容复制一遍，再将光标放在第一位十六进制数字前按ctrl+v粘贴，相当于覆盖修改，然后另存为Data.exe文件</p><p>再用ID打开后看逻辑分析逆向即可</p><p><img src="https://s1.vika.cn/space/2025/03/30/ba1e1f9dfeb5404696bcd5347299b02d" alt="PixPin_2025-03-31_00-49-10"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __int64 __fastcall sub_14000144B(const char *a1, int a2)</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   __int64 result; // rax</span></span><br><span class="line"><span class="comment">#   char v3; // [rsp+27h] [rbp-9h]</span></span><br><span class="line"><span class="comment">#   int v4; // [rsp+28h] [rbp-8h]</span></span><br><span class="line"><span class="comment">#   unsigned int i; // [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   v4 = strlen(a1);</span></span><br><span class="line"><span class="comment">#   for ( i = 0; ; ++i )</span></span><br><span class="line"><span class="comment">#   &#123;</span></span><br><span class="line"><span class="comment">#     result = i;</span></span><br><span class="line"><span class="comment">#     if ( (int)i &gt;= v4 )</span></span><br><span class="line"><span class="comment">#       break;</span></span><br><span class="line"><span class="comment">#     v3 = a1[i];</span></span><br><span class="line"><span class="comment">#     if ( v3 &lt;= 96 || v3 &gt; 122 )</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#       if ( v3 &lt;= 64 || v3 &gt; 90 )</span></span><br><span class="line"><span class="comment">#       &#123;</span></span><br><span class="line"><span class="comment">#         if ( v3 &gt; 47 &amp;&amp; v3 &lt;= 57 )</span></span><br><span class="line"><span class="comment">#           a1[i] = (a2 + v3 - 48) % 10 + 48;</span></span><br><span class="line"><span class="comment">#       &#125;</span></span><br><span class="line"><span class="comment">#       else</span></span><br><span class="line"><span class="comment">#       &#123;</span></span><br><span class="line"><span class="comment">#         a1[i] = (v3 - 65 + a2) % 26 + 65;</span></span><br><span class="line"><span class="comment">#       &#125;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment">#     else</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#       a1[i] = (v3 - 97 + a2) % 26 + 97;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment">#   return result;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># __int64 __fastcall sub_140001596(const char *a1, const char *a2)</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   __int64 result; // rax</span></span><br><span class="line"><span class="comment">#   int v3; // [rsp+24h] [rbp-Ch]</span></span><br><span class="line"><span class="comment">#   int v4; // [rsp+28h] [rbp-8h]</span></span><br><span class="line"><span class="comment">#   signed int i; // [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   v4 = strlen(a1);</span></span><br><span class="line"><span class="comment">#   v3 = strlen(a2);</span></span><br><span class="line"><span class="comment">#   for ( i = 0; ; ++i )</span></span><br><span class="line"><span class="comment">#   &#123;</span></span><br><span class="line"><span class="comment">#     result = (unsigned int)i;</span></span><br><span class="line"><span class="comment">#     if ( i &gt;= v4 )</span></span><br><span class="line"><span class="comment">#       break;</span></span><br><span class="line"><span class="comment">#     a1[i] ^= a2[i % v3];</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment">#   return result;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串转十六进制</span></span><br><span class="line"><span class="comment"># _BYTE *__fastcall sub_14000161C(const char *a1, __int64 a2)</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   _BYTE *result; // rax</span></span><br><span class="line"><span class="comment">#   int v3; // [rsp+24h] [rbp-Ch]</span></span><br><span class="line"><span class="comment">#   int v4; // [rsp+28h] [rbp-8h]</span></span><br><span class="line"><span class="comment">#   int i; // [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   v3 = strlen(a1);</span></span><br><span class="line"><span class="comment">#   v4 = 0;</span></span><br><span class="line"><span class="comment">#   for ( i = 0; i &lt; v3; ++i )</span></span><br><span class="line"><span class="comment">#   &#123;</span></span><br><span class="line"><span class="comment">#     sub_140001408(v4 + a2, &quot;%02X&quot;, (unsigned int)a1[i]);</span></span><br><span class="line"><span class="comment">#     v4 += 2;</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment">#   result = (_BYTE *)(v4 + a2);</span></span><br><span class="line"><span class="comment">#   *result = 0;</span></span><br><span class="line"><span class="comment">#   return result;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># v5 = &#x27;0A161230300C2D0A2B303D2428233005242C2D26182206233E097F133A&#x27;</span></span><br><span class="line">v5 = [<span class="number">10</span>, <span class="number">22</span>, <span class="number">18</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">12</span>, <span class="number">45</span>, <span class="number">10</span>, <span class="number">43</span>, <span class="number">48</span>, <span class="number">61</span>, <span class="number">36</span>, <span class="number">40</span>, <span class="number">35</span>, <span class="number">48</span>, <span class="number">5</span>, <span class="number">36</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">24</span>, <span class="number">34</span>, <span class="number">6</span>, <span class="number">35</span>, <span class="number">62</span>, <span class="number">9</span>, <span class="number">127</span>, <span class="number">19</span>, <span class="number">58</span>]</span><br><span class="line">v4 = <span class="string">&#x27;GEEK&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v5)):</span><br><span class="line">    v5[i] = v5[i] ^ <span class="built_in">ord</span>(v4[i % <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">a2 = <span class="number">20</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> v5:</span><br><span class="line">    ascii_val = char</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理小写字母 (a-z: 97-122)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= ascii_val &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        flag += <span class="built_in">chr</span>((ascii_val - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) - a2) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">    <span class="comment"># 处理大写字母 (A-Z: 65-90)</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= ascii_val &lt;= <span class="built_in">ord</span>(<span class="string">&quot;Z&quot;</span>):</span><br><span class="line">        flag += <span class="built_in">chr</span>((ascii_val - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - a2) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">    <span class="comment"># 处理数字 (0-9: 48-57)</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) &lt;= ascii_val &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>):</span><br><span class="line">        flag += <span class="built_in">chr</span>((ascii_val - <span class="number">48</span> - a2) % <span class="number">10</span> + <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">    <span class="comment"># 其他字符保持不变</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(char)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SYC&#123;cOnGraduulaTions_mIneR:D&#125;</span></span><br></pre></td></tr></table></figure><h3 id="致我的星星"><a href="#致我的星星" class="headerlink" title="致我的星星"></a>致我的星星</h3><blockquote><p>maze，双重迷宫</p></blockquote><p>题目在index.js最后面，是一个迷宫题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">a = [Int(<span class="string">f&quot;a&#x27;_&#x27;&quot;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>)]</span><br><span class="line">array = []</span><br><span class="line"></span><br><span class="line">s.add(<span class="number">43654</span>*a1 - <span class="number">57003</span>*a2 -<span class="number">3158</span>*a3 + <span class="number">30120</span>*a4 -<span class="number">58621</span>*a5 -<span class="number">41947</span>*a6 +<span class="number">122237</span>*a7 +<span class="number">129534</span>*a8 == <span class="number">2594143</span>)</span><br><span class="line">s.add(-<span class="number">48022</span>*a1 + <span class="number">18308</span>*a2 + <span class="number">52478</span>*a3 + <span class="number">69397</span>*a4  +<span class="number">49696</span>*a5 + <span class="number">12288</span>*a6 -<span class="number">40437</span>*a7 -<span class="number">23154</span>*a8 ==  <span class="number">651137</span>)</span><br><span class="line">s.add(<span class="number">124109</span>*a1  +<span class="number">58952</span>*a2 + <span class="number">16645</span>*a3 -<span class="number">17531</span>*a4 + <span class="number">53139</span>*a5  +<span class="number">49937</span>*a6  + <span class="number">3282</span>*a7   +<span class="number">7656</span>*a8 == <span class="number">2071815</span>)</span><br><span class="line">s.add(<span class="number">108286</span>*a1 + <span class="number">118886</span>*a2 +<span class="number">116876</span>*a3   +<span class="number">2281</span>*a4 -<span class="number">64590</span>*a5  -<span class="number">3021</span>*a6 + <span class="number">13386</span>*a7 -<span class="number">56070</span>*a8 ==  <span class="number">703</span>)</span><br><span class="line">s.add(<span class="number">105983</span>*a1 + <span class="number">8794</span>*a2 + <span class="number">31851</span>*a3 -<span class="number">35052</span>*a4  -<span class="number">7880</span>*a5  + <span class="number">2183</span>*a6 + <span class="number">47575</span>*a7 +<span class="number">107236</span>*a8 == <span class="number">2511919</span>)</span><br><span class="line">s.add(-<span class="number">38005</span>*a1 -<span class="number">6833</span>*a2 +<span class="number">107897</span>*a3 +<span class="number">119771</span>*a4 +<span class="number">124322</span>*a5 + <span class="number">13335</span>*a6+ <span class="number">121590</span>*a7 -<span class="number">17434</span>*a8 == <span class="number">4816084</span>)</span><br><span class="line">s.add(<span class="number">60696</span>*a1 +<span class="number">95253</span>*a2 +<span class="number">101581</span>*a3 + <span class="number">93822</span>*a4 +<span class="number">112989</span>*a5  +<span class="number">65643</span>*a6  +<span class="number">45639</span>*a7 + <span class="number">26705</span>*a8 == <span class="number">5330538</span>)</span><br><span class="line">s.add(<span class="number">49019</span>*a1 +<span class="number">72343</span>*a2 -<span class="number">21814</span>*a3  +<span class="number">85020</span>*a4 -<span class="number">62332</span>*a5  +<span class="number">99828</span>*a6  +  <span class="number">587</span>*a7 -<span class="number">65119</span>*a8 ==  <span class="number">505173</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    r = s.model()</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;no answer&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># [a3 = 6,</span></span><br><span class="line"><span class="comment">#  a4 = 8,</span></span><br><span class="line"><span class="comment">#  a5 = 13,</span></span><br><span class="line"><span class="comment">#  a1 = 3,</span></span><br><span class="line"><span class="comment">#  a8 = 15,</span></span><br><span class="line"><span class="comment">#  a2 = 4,</span></span><br><span class="line"><span class="comment">#  a6 = 13,</span></span><br><span class="line"><span class="comment">#  a7 = 15]</span></span><br><span class="line"><span class="comment"># a1 = 3, a2 = 4, a3 = 6, a4 = 8, a5 = 13, a6 = 13, a7 = 15, a8 = 15</span></span><br><span class="line"><span class="comment"># S:(a1,a6) (a4,a5) Y:(a2,a8) (a3,a7)</span></span><br><span class="line"><span class="comment"># S:(3,13) (8,13) Y:(4,15) (6,15)</span></span><br></pre></td></tr></table></figure><p>坑点，之前一直按后面的迷宫图来放起点与终点，结果就是怎么放都不对劲，题解也不对；最后详细看一遍代码才发现，起点与终点是先按这个图填入，再转化为真正的迷宫图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;S1&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;Y1&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;Y2&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;S2&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 障碍物，遍历一遍，把障碍物用*来替代，但后面发现这其实才是路，w(ﾟДﾟ)w</span></span><br><span class="line">coordinates = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">11</span>], [<span class="number">1</span>, <span class="number">12</span>], [<span class="number">1</span>, <span class="number">13</span>], [<span class="number">1</span>, <span class="number">14</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">11</span>], [<span class="number">2</span>, <span class="number">12</span>], [<span class="number">2</span>, <span class="number">14</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">14</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">7</span>], [<span class="number">5</span>, <span class="number">8</span>], [<span class="number">5</span>, <span class="number">12</span>], [<span class="number">5</span>, <span class="number">14</span>], [<span class="number">5</span>, <span class="number">15</span>], [<span class="number">5</span>, <span class="number">18</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">1</span>], [<span class="number">6</span>, <span class="number">2</span>], [<span class="number">6</span>, <span class="number">4</span>], [<span class="number">6</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>], [<span class="number">6</span>, <span class="number">8</span>], [<span class="number">6</span>, <span class="number">11</span>], [<span class="number">6</span>, <span class="number">15</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">1</span>], [<span class="number">7</span>, <span class="number">5</span>], [<span class="number">7</span>, <span class="number">11</span>], [<span class="number">7</span>, <span class="number">12</span>], [<span class="number">7</span>, <span class="number">13</span>], [<span class="number">7</span>, <span class="number">14</span>], [<span class="number">7</span>, <span class="number">15</span>], [<span class="number">7</span>, <span class="number">16</span>],</span><br><span class="line">    [<span class="number">8</span>, <span class="number">1</span>], [<span class="number">8</span>, <span class="number">12</span>], [<span class="number">8</span>, <span class="number">13</span>], [<span class="number">8</span>, <span class="number">15</span>], [<span class="number">8</span>, <span class="number">18</span>],</span><br><span class="line">    [<span class="number">9</span>, <span class="number">3</span>], [<span class="number">9</span>, <span class="number">4</span>], [<span class="number">9</span>, <span class="number">6</span>], [<span class="number">9</span>, <span class="number">7</span>], [<span class="number">9</span>, <span class="number">8</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Exp:</p><p>将字符串形式的迷宫变为指定行列的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># maze_str_to_list</span></span><br><span class="line">maze_str = (<span class="string">&quot;###############################****######*##*######**#*#########*#########*################################**###*#**##*##**#**#**##*###*#####*###*#####******####*##########**#*##*#&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(maze_str))</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">row = <span class="number">18</span></span><br><span class="line">col = <span class="number">10</span></span><br><span class="line">maze = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(col):</span><br><span class="line">        <span class="keyword">if</span> maze_str[index] == <span class="string">&#x27;*&#x27;</span> <span class="keyword">or</span> maze_str[index] == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            tmp.append(maze_str[index])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp.append(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    maze.append(tmp)</span><br><span class="line"><span class="built_in">print</span>(maze)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用之前写好的通用求路径脚本，求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">maze = [</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;Y2&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;S2&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;#&#x27;</span>]]</span><br><span class="line"><span class="comment"># S:(3,13) (8,13) Y:(4,15) (6,15)</span></span><br><span class="line">path_len = <span class="number">0</span>  <span class="comment"># 如果题目没给出终点坐标，就会给路径长度，但记得 len = 题目给的len + 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">start, end, barrier</span>):</span><br><span class="line">    <span class="comment"># 方向：右、下、左、上</span></span><br><span class="line">    directions = [(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, -<span class="number">1</span>), (-<span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">    start_pos = <span class="literal">None</span></span><br><span class="line">    end_pos = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找起点和终点的坐标</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(maze)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(maze[i])):</span><br><span class="line">            <span class="keyword">if</span> maze[i][j] == start:  <span class="comment"># 找到起点</span></span><br><span class="line">                start_pos = (i, j)</span><br><span class="line">            <span class="keyword">if</span> maze[i][j] == end:  <span class="comment"># 找到终点</span></span><br><span class="line">                end_pos = (i, j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> start_pos <span class="keyword">or</span> <span class="keyword">not</span> end_pos:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;起点或终点不存在&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 如果起点或终点不存在，返回 None</span></span><br><span class="line"></span><br><span class="line">    queue = deque()</span><br><span class="line">    queue.append((start_pos, [start_pos]))  <span class="comment"># (当前位置, 路径)</span></span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line">    visited.add(start_pos)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        position, path = queue.popleft()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> position == end_pos:</span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历四个方向</span></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> directions:</span><br><span class="line">            next_position = (position[<span class="number">0</span>] + d[<span class="number">0</span>], position[<span class="number">1</span>] + d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= next_position[<span class="number">0</span>] &lt; <span class="built_in">len</span>(maze) <span class="keyword">and</span> <span class="number">0</span> &lt;= next_position[<span class="number">1</span>] &lt; <span class="built_in">len</span>(maze[<span class="number">0</span>]) <span class="keyword">and</span> \</span><br><span class="line">                    maze[next_position[<span class="number">0</span>]][next_position[<span class="number">1</span>]] != barrier <span class="keyword">and</span> next_position <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                queue.append((next_position, path + [next_position]))</span><br><span class="line">                visited.add(next_position)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 如果没有找到路径，返回 None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    maze[<span class="number">15</span>][<span class="number">2</span>] = <span class="string">&#x27;S2&#x27;</span>  <span class="comment"># 手动添加起点, x位置</span></span><br><span class="line">    path = bfs(<span class="string">&#x27;S2&#x27;</span>, <span class="string">&#x27;Y2&#x27;</span>, <span class="string">&#x27;#&#x27;</span>)  <span class="comment"># 手动添加, (起点, 终点, 障碍物)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到路径&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;移动路径坐标:&quot;</span>, path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;移动路径方位: &quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(path)):</span><br><span class="line">            x1, y1 = path[i - <span class="number">1</span>]</span><br><span class="line">            x2, y2 = path[i]</span><br><span class="line">            <span class="keyword">if</span> x1 &gt; x2:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;T&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 上</span></span><br><span class="line">            <span class="keyword">elif</span> x1 &lt; x2:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;R&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 下</span></span><br><span class="line">            <span class="keyword">elif</span> y1 &gt; y2:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;S&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 左</span></span><br><span class="line">            <span class="keyword">elif</span> y1 &lt; y2:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 右</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># STTAAARRRR</span></span><br><span class="line"><span class="comment"># AAATTTST AAATTTTS</span></span><br><span class="line"><span class="comment"># SYC&#123;STTAAARRRRAAATTTTS&#125;</span></span><br></pre></td></tr></table></figure><h3 id="giraffe-eat-rainbow"><a href="#giraffe-eat-rainbow" class="headerlink" title="giraffe_eat_rainbow"></a>giraffe_eat_rainbow</h3><blockquote><p>去除llvm，动态调试，输入32位字符，提取key和密文，进入encrypt( )就可以解密了</p></blockquote><p><img src="https://s1.vika.cn/space/2025/03/18/e33edb81c8f94e448d5abf6240906899" alt="PixPin_2025-03-18_19-15-41"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enc = [</span><br><span class="line">      <span class="number">0x1D</span>, <span class="number">0x36</span>, <span class="number">0x73</span>, <span class="number">0x16</span>, <span class="number">0x49</span>, <span class="number">0x2D</span>, <span class="number">0x1A</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0x06</span>, </span><br><span class="line">      <span class="number">0x42</span>, <span class="number">0x2C</span>, <span class="number">0x76</span>, <span class="number">0x07</span>, <span class="number">0x10</span>, <span class="number">0x0E</span>, <span class="number">0x7E</span>, <span class="number">0x39</span>, <span class="number">0x55</span>, <span class="number">0x32</span>, </span><br><span class="line">      <span class="number">0x75</span>, <span class="number">0x03</span>, <span class="number">0x1B</span>, <span class="number">0x1D</span>, <span class="number">0x19</span>, <span class="number">0x5F</span>, <span class="number">0x52</span>, <span class="number">0x23</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, </span><br><span class="line">      <span class="number">0x1D</span>, <span class="number">0x3F</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x27;BOb0m0oN&#x27;</span></span><br><span class="line">key = [</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x4F</span>, <span class="number">0x62</span>, <span class="number">0x30</span>, <span class="number">0x6D</span>, <span class="number">0x30</span>, <span class="number">0x6F</span>, <span class="number">0x4E</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2025/03/18/b40e4e3887ee4c5fa84b6fff08f8c9bd" alt="PixPin_2025-03-18_19-28-22"></p><p>扁平化没处理好还存在一些，但逻辑并不难，让ai处理一下逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">char</span> *input, <span class="type">const</span> <span class="type">char</span> *key, <span class="type">unsigned</span> <span class="type">char</span> *output)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> input_length = <span class="built_in">strlen</span>(input);</span><br><span class="line">    <span class="type">size_t</span> key_length = <span class="built_in">strlen</span>(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; input_length; i++) &#123;</span><br><span class="line">        <span class="comment">// 获取密钥中的对应字符（循环使用密钥）</span></span><br><span class="line">        <span class="type">char</span> key_char = key[i % key_length];</span><br><span class="line">        <span class="comment">// 获取输入字符</span></span><br><span class="line">        <span class="type">char</span> input_char = input[i];</span><br><span class="line">        <span class="comment">// 进行异或操作</span></span><br><span class="line">        output[i] = input_char ^ key_char;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> input_length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line">enc = [</span><br><span class="line">    <span class="number">0x1D</span>, <span class="number">0x36</span>, <span class="number">0x73</span>, <span class="number">0x16</span>, <span class="number">0x49</span>, <span class="number">0x2D</span>, <span class="number">0x1A</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0x06</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x2C</span>, <span class="number">0x76</span>, <span class="number">0x07</span>, <span class="number">0x10</span>, <span class="number">0x0E</span>, <span class="number">0x7E</span>, <span class="number">0x39</span>, <span class="number">0x55</span>, <span class="number">0x32</span>,</span><br><span class="line">    <span class="number">0x75</span>, <span class="number">0x03</span>, <span class="number">0x1B</span>, <span class="number">0x1D</span>, <span class="number">0x19</span>, <span class="number">0x5F</span>, <span class="number">0x52</span>, <span class="number">0x23</span>, <span class="number">0x01</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x1D</span>, <span class="number">0x3F</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#key = &#x27;BOb0m0oN&#x27;</span></span><br><span class="line">key = [</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x4F</span>, <span class="number">0x62</span>, <span class="number">0x30</span>, <span class="number">0x6D</span>, <span class="number">0x30</span>, <span class="number">0x6F</span>, <span class="number">0x4E</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    key_idx = (<span class="built_in">len</span>(enc)-<span class="number">1</span> - i) % <span class="built_in">len</span>(key)</span><br><span class="line">    flag += <span class="built_in">chr</span>(enc[i] ^ key[key_idx])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># SYC&#123;yOU_girAFe_L0Ve_EaT_W0bN1aR&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="AES"><a href="#AES" class="headerlink" title="AES!"></a>AES!</h3><blockquote><p>aes加密，魔改/换了S盒</p></blockquote><p><img src="https://s1.vika.cn/space/2025/03/18/550a0dae636c40fb87ac884acf672e54" alt="PixPin_2025-03-18_20-29-58"></p><p>提取key与密文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enc = [</span><br><span class="line">    <span class="number">0x99</span>, <span class="number">0xE8</span>, <span class="number">0xB8</span>, <span class="number">0x01</span>, <span class="number">0xC8</span>, <span class="number">0x82</span>, <span class="number">0x51</span>, <span class="number">0x93</span>, <span class="number">0x12</span>, <span class="number">0xEE</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x64</span>, <span class="number">0xE7</span>, <span class="number">0xEF</span>, <span class="number">0x63</span>, <span class="number">0x8D</span>, <span class="number">0x51</span>, <span class="number">0xDF</span>, <span class="number">0x5D</span>, <span class="number">0x78</span>,</span><br><span class="line">    <span class="number">0x39</span>, <span class="number">0xAA</span>, <span class="number">0x39</span>, <span class="number">0x62</span>, <span class="number">0xA0</span>, <span class="number">0xB4</span>, <span class="number">0x50</span>, <span class="number">0x30</span>, <span class="number">0x47</span>, <span class="number">0x30</span>,</span><br><span class="line">    <span class="number">0x21</span>, <span class="number">0x06</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;SYCLOVERSYCLOVER&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2025/03/18/3299adc0cc224ee1a8131e4d68379547" alt="PixPin_2025-03-18_20-28-55"></p><p>改变的S盒，提取一下</p><p><img src="https://s1.vika.cn/space/2025/03/18/ea0aea5a1f8f44d7b9b1341ba2a35be1" alt="PixPin_2025-03-18_20-41-24"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">S = [</span><br><span class="line">  <span class="number">0x7C</span>, <span class="number">0xCA</span>, <span class="number">0x7B</span>, <span class="number">0x77</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>,</span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0x47</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>, <span class="number">0x63</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>,</span><br><span class="line">  <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>,</span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>,</span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0xC7</span>,</span><br><span class="line">  <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>,</span><br><span class="line">  <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>,</span><br><span class="line">  <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">  <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>,</span><br><span class="line">  <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>, <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>,</span><br><span class="line">  <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>,</span><br><span class="line">  <span class="number">0x9F</span>, <span class="number">0xA8</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>,</span><br><span class="line">  <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>, <span class="number">0x97</span>, <span class="number">0xCD</span>,</span><br><span class="line">  <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>,</span><br><span class="line">  <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>,</span><br><span class="line">  <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>,</span><br><span class="line">  <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>,</span><br><span class="line">  <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>,</span><br><span class="line">  <span class="number">0xAE</span>, <span class="number">0x08</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>,</span><br><span class="line">  <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>,</span><br><span class="line">  <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>,</span><br><span class="line">  <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>,</span><br><span class="line">  <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>, <span class="number">0x8C</span>,</span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>,</span><br><span class="line">  <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>, <span class="number">0x87</span></span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br><span class="line"><span class="comment"># 256</span></span><br></pre></td></tr></table></figure><p>求逆S盒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_inverse_sbox</span>(<span class="params">sbox</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成逆S盒</span></span><br><span class="line"><span class="string">    :param sbox: 原始S盒（必须是一个双射的256字节列表）</span></span><br><span class="line"><span class="string">    :return: 逆S盒</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sbox) != <span class="number">256</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;S盒长度必须为256字节&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 验证S盒是否为双射</span></span><br><span class="line">    unique_values = <span class="built_in">set</span>(sbox)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(unique_values) != <span class="number">256</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;输入的S盒不是双射（存在重复值）&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成逆S盒</span></span><br><span class="line">    inverse_sbox = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">    <span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(sbox):</span><br><span class="line">        inverse_sbox[value] = i</span><br><span class="line">    <span class="keyword">return</span> inverse_sbox</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># AES标准S盒定义（示例）</span></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line">aes_sbox = [</span><br><span class="line">    <span class="comment"># 完整的AES S盒数据（此处仅展示部分，实际需要256个值）</span></span><br><span class="line">    <span class="comment"># ...（完整数据需补充）</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 生成逆S盒</span></span><br><span class="line">        inverse_aes_sbox = generate_inverse_sbox(aes_sbox)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 验证逆S盒</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">assert</span> inverse_aes_sbox[aes_sbox[i]] == i, <span class="string">f&quot;验证失败于索引 <span class="subst">&#123;i&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;逆S盒验证成功！&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 打印前16个值示例</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n逆S盒前16字节：&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;inverse_aes_sbox[i]:02X&#125;</span>&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>()</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>逆S盒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">S_inv = [</span><br><span class="line"><span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, <span class="number">0xBF</span>, <span class="number">0x40</span>, <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x82</span>, <span class="number">0xF2</span>, <span class="number">0xD7</span>, <span class="number">0xFA</span>,</span><br><span class="line"><span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x83</span>, <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFE</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>, <span class="number">0xE9</span>, <span class="number">0xCB</span>,</span><br><span class="line"><span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>, <span class="number">0xED</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xF9</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>,</span><br><span class="line"><span class="number">0x08</span>, <span class="number">0x2E</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>, <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>,</span><br><span class="line"><span class="number">0x72</span>, <span class="number">0xF7</span>, <span class="number">0xF5</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x0E</span>, <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>,</span><br><span class="line"><span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFC</span>, <span class="number">0xEC</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, <span class="number">0x5E</span>, <span class="number">0x16</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x85</span>,</span><br><span class="line"><span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x11</span>, <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, <span class="number">0xF6</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line"><span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x10</span>, <span class="number">0x03</span>, <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>,</span><br><span class="line"><span class="number">0x3A</span>, <span class="number">0x91</span>, <span class="number">0x12</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xFF</span>, <span class="number">0x97</span>, <span class="number">0xF1</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>, <span class="number">0xEF</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>,</span><br><span class="line"><span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>, <span class="number">0x35</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xF8</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>,</span><br><span class="line"><span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>, <span class="number">0x62</span>, <span class="number">0x0F</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>,</span><br><span class="line"><span class="number">0xFB</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>, <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFD</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>, <span class="number">0x5A</span>, <span class="number">0xF3</span>,</span><br><span class="line"><span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>, <span class="number">0xB1</span>, <span class="number">0x13</span>, <span class="number">0x01</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x81</span>, <span class="number">0xEB</span>, <span class="number">0x5F</span>,</span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>, <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEE</span>,</span><br><span class="line"><span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>, <span class="number">0xF4</span>, <span class="number">0xB0</span>, <span class="number">0xC8</span>, <span class="number">0xEA</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x84</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line"><span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x15</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_28205153/article/details/55798628">AES加密算法原理的详细介绍与实现-CSDN博客</a></p><p><a href="https://www.cnblogs.com/msq2000/p/13144370.html">AES加解密算法C实现 - 陌默安 - 博客园</a></p><p><a href="https://blog.csdn.net/PP_hui/article/details/120699056">AES加密，由S盒计算逆S盒程序_逆s盒如何计算-CSDN博客</a></p><p>找个完整的AES加密脚本，换好S盒与逆S盒，解密得flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYC&#123;B3l1eue_Th@t_y0u__l3aRn_Aes&#125;</span><br></pre></td></tr></table></figure><h3 id="ez-re"><a href="#ez-re" class="headerlink" title="ez_re"></a>ez_re</h3><blockquote><p>花指令，AES-CBC加密，TLS+API反调试，动态调试得key，iv，密文</p></blockquote><p>IDA打开后发现没有main，因为花指令的影响，去除花指令后反编译得main逻辑，<a href="https://www.bilibili.com/video/BV1w94y1r7HJ/?spm_id_from=333.337.search-card.all.click&amp;vd_source=2c4148ac928a1b2447f3d8c80156c3c4">【CTF花指令讲解】&amp;&amp;【长城杯铁三reverse-junk】_哔哩哔哩_bilibili</a></p><p>用keypatch处理掉IsDebugger反调试后，运行发现调试出问题了，可以运行但运行不到main函数，cmd命令窗口也没有任何显示</p><p>原因是TLS反调试悄无声息地令调试器失效</p><p>用PEview + winhex去掉TLS</p><p><img src="https://s1.vika.cn/space/2025/03/19/66939c239abf4ebc90321aa8e66d62ba" alt="PixPin_2025-03-19_14-39-41"></p><p><img src="https://s1.vika.cn/space/2025/03/19/5a910abf71b04006bd6ceb9c5ca9ea38" alt="PixPin_2025-03-19_14-39-18"></p><p><a href="https://www.bilibili.com/video/BV1sv4y1N7yf/?spm_id_from=333.337.search-card.all.click&amp;vd_source=2c4148ac928a1b2447f3d8c80156c3c4">【miniLCTF2022】TWIN（TLS回调函数 &amp; PEB反调试 &amp; Windows异常处理_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/Joyce_hjll/article/details/136732526">TLS回调函数–一文看懂（详）-CSDN博客</a></p><p><a href="https://www.cnblogs.com/PaperPlaneFly/p/18474056#4tls反调试">逆向常见反调试合集 - 纸飞机低空飞行 - 博客园</a></p><p><img src="https://s1.vika.cn/space/2025/03/19/a142da6cafb2436da6025aec9d955efd" alt="PixPin_2025-03-19_15-30-51"></p><p>key和密文（小端序提取）可以直接提取，iv被处理过了，用动态调试提取</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">*(_DWORD *)pbIV = <span class="number">0x941E70C1</span>;</span><br><span class="line">*(_DWORD *)&amp;pbIV[<span class="number">4</span>] = <span class="number">0x13142F4</span>;</span><br><span class="line">*(_DWORD *)&amp;pbIV[<span class="number">8</span>] = <span class="number">0x550A3FB0</span>;</span><br><span class="line">*(_DWORD *)&amp;pbIV[<span class="number">12</span>] = <span class="number">0xD399FFA1</span>;</span><br><span class="line">v<span class="number">12.</span>m128_u64[<span class="number">0</span>] = <span class="number">0xFEF76ECE6FA34BA2u</span>i64;</span><br><span class="line">v<span class="number">12.</span>m128_u64[<span class="number">1</span>] = <span class="number">0x67735D6CF76837EC</span>i64;</span><br><span class="line">v11[<span class="number">0</span>] = <span class="number">0x754CE0DD</span>;</span><br><span class="line">v11[<span class="number">1</span>] = <span class="number">0xB8143397</span>;</span><br><span class="line">*(__m128 *)pbIV = _mm_xor_ps(v12, *(__m128 *)pbIV);</span><br><span class="line">v11[<span class="number">2</span>] = <span class="number">0x1119B617</span>;</span><br><span class="line">v11[<span class="number">3</span>] = <span class="number">0x23608A61</span>;</span><br><span class="line">v11[<span class="number">4</span>] = <span class="number">0x1AE21646</span>;</span><br><span class="line">v11[<span class="number">5</span>] = <span class="number">0x265BC365</span>;</span><br><span class="line">v11[<span class="number">6</span>] = <span class="number">0x30ADF568</span>;</span><br><span class="line">v11[<span class="number">7</span>] = <span class="number">0xC64BEEB1</span>;</span><br><span class="line">v11[<span class="number">8</span>] = <span class="number">0xBB9EB5AB</span>;</span><br><span class="line">v11[<span class="number">9</span>] = <span class="number">0xC24A9573</span>;</span><br><span class="line">v11[<span class="number">10</span>] = <span class="number">0xA9CBEF78</span>;</span><br><span class="line">v11[<span class="number">11</span>] = <span class="number">0xA0E171BE</span>;</span><br></pre></td></tr></table></figure><p>动态调试提取iv， key，enc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iv = <span class="string">&#x27;633BBDFB3A2CC6FF5C0862A2CDA2EAB4&#x27;</span><span class="comment"># pdIV</span></span><br><span class="line">key = <span class="string">&#x27;ADDDDB082DD94DCABAD5D75639EAC9DA&#x27;</span> <span class="comment"># sub_F0109D(PdSecret)</span></span><br><span class="line">enc = <span class="string">&#x27;DDE04C75973314B817B61911618A60234616E21A65C35B2668F5AD30B1EE4BC6ABB59EBB73954AC278EFCBA9BE71E1A0&#x27;</span></span><br><span class="line"><span class="comment"># v11</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2025/03/19/487ee1e2c30a4b6b9f78c8a16049226f" alt="PixPin_2025-03-19_20-06-03"></p><p><a href="https://blog.csdn.net/m0_68529003/article/details/131772677">AES算法的CBC和ECB两种工作模式_aes cbc ebc区别-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_48119914/article/details/141831174">分组密码的模式AES-CBC模式流程解析附：应用代码实现-CSDN博客</a></p><hr><h3 id="ez-hook"><a href="#ez-hook" class="headerlink" title="ez_hook"></a>ez_hook</h3><blockquote><p>API反调试处理，hook，VirtualProtect</p></blockquote><p>IDA打开，有反调试，先用keypatch处理掉，再分析</p><p><img src="https://s1.vika.cn/space/2025/03/22/5b74f8ad0b7c44b5a783e84d6173773a" alt="PixPin_2025-03-22_23-27-54"></p><p>考点（<del>坑点</del>）在这，Address函数被hook了，不然逆向出来的是假的flag</p><p><img src="https://s1.vika.cn/space/2025/03/22/fe2b41c21fca46199e76ea5800bdec82" alt="PixPin_2025-03-22_23-19-21"></p><p>改变了Address函数的页属性，0x40<a href="https://learn.microsoft.com/zh-cn/windows/win32/Memory/memory-protection-constants">每次保护常量 (WinNT.h) - Win32 apps | Microsoft Learn</a>；重写了函数，也就是hook</p><p><img src="https://s1.vika.cn/space/2025/03/22/0c6c2dc5af014e5baf8cbe9ba9af2110" alt="PixPin_2025-03-22_23-22-41"></p><p><img src="https://s1.vika.cn/space/2025/03/22/48f8da9e9aa54fc79982acba2fea8887" alt="PixPin_2025-03-22_23-51-13"></p><p>按被hook后的xor写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enc = [</span><br><span class="line">    <span class="number">0x7A</span>, <span class="number">0x6F</span>, <span class="number">0x58</span>, <span class="number">0x70</span>, <span class="number">0x69</span>, <span class="number">0x68</span>, <span class="number">0x5E</span>, <span class="number">0x6C</span>, <span class="number">0x68</span>, <span class="number">0x58</span>, <span class="number">0x36</span>, <span class="number">0x73</span>, <span class="number">0x6F</span>,</span><br><span class="line">    <span class="number">0x58</span>, <span class="number">0x37</span>, <span class="number">0x6C</span>, <span class="number">0x72</span>, <span class="number">0x7E</span>, <span class="number">0x44</span>, <span class="number">0x54</span>, <span class="number">0x48</span>, <span class="number">0x74</span>, <span class="number">0x47</span>, <span class="number">0x70</span>, <span class="number">0x58</span>, <span class="number">0x7C</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    enc[i] ^= <span class="number">7</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(enc[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># &#125;h_wnoYko_1th_0kuyCSOs@w_&#123;</span></span><br></pre></td></tr></table></figure><p>Crypto一把唆，还看了半天，最后倒一下序就得到flag</p><p><img src="https://s1.vika.cn/space/2025/03/22/9b3a663def614632a7be346f944f30dd" alt="PixPin_2025-03-22_23-44-56"></p><hr><h3 id="奇怪的RC4"><a href="#奇怪的RC4" class="headerlink" title="奇怪的RC4"></a>奇怪的RC4</h3><p>用pycdc解包两次（分别获取）（<del>火绒误我</del>），可以在在线网站解包，不同担心python版本（最好自己搭一个本地网站，上网找有开源）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="comment">#! /usr/bin/env  3.8.0 (3413)</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#source path: easy_xor_and_rc4.py</span></span><br><span class="line"><span class="comment">#Compiled at: 1970-01-01 00:00:00</span></span><br><span class="line"><span class="comment">#Powered by BugScaner</span></span><br><span class="line"><span class="comment">#http://tools.bugscaner.com/</span></span><br><span class="line"><span class="comment">#如果觉得不错,请分享给你朋友使用吧!</span></span><br><span class="line"><span class="keyword">from</span> Rc4 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor1</span>(<span class="params">plaintext, xor_list</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        xor_list = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> xor_list]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            plaintext = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> plaintext]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)):</span><br><span class="line">                plaintext[i] ^= xor_list[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor2</span>(<span class="params">plaintext</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plaintext = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> plaintext]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext) - <span class="number">1</span>):</span><br><span class="line">            plaintext[i + <span class="number">1</span>] = plaintext[i] ^ plaintext[i + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">plaintext, key, xor_list</span>):</span><br><span class="line">    plaintext = rc4(plaintext, key)</span><br><span class="line">    plaintext = xor1(plaintext, xor_list)</span><br><span class="line">    plaintext = xor2(plaintext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plaintext = <span class="built_in">input</span>(<span class="string">&#x27;please give your input:&#x27;</span>)</span><br><span class="line">key = <span class="string">&#x27;SYCFOREVER&#x27;</span></span><br><span class="line">xor_list = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)))</span><br><span class="line">cipher = [<span class="number">158</span>, <span class="number">31</span>, <span class="number">205</span>, <span class="number">434</span>, <span class="number">354</span>, <span class="number">15</span>, <span class="number">383</span>, <span class="number">298</span>, <span class="number">304</span>, <span class="number">351</span>, <span class="number">465</span>, <span class="number">312</span>, <span class="number">261</span>, <span class="number">442</span>, </span><br><span class="line"> <span class="number">397</span>, <span class="number">474</span>, <span class="number">310</span>, <span class="number">397</span>, <span class="number">31</span>, <span class="number">21</span>, <span class="number">78</span>, <span class="number">67</span>, <span class="number">47</span>, <span class="number">133</span>, <span class="number">168</span>, <span class="number">48</span>, <span class="number">153</span>, <span class="number">99</span>, <span class="number">103</span>, </span><br><span class="line"> <span class="number">204</span>, <span class="number">137</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">13</span>, <span class="number">228</span>, <span class="number">3</span>, <span class="number">136</span>, <span class="number">141</span>, <span class="number">248</span>, <span class="number">124</span>, <span class="number">26</span>, <span class="number">26</span>, <span class="number">65</span>, <span class="number">200</span>, </span><br><span class="line"> <span class="number">7</span>]</span><br><span class="line">plaintext = enc(plaintext, key, xor_list)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    <span class="keyword">if</span> cipher[i] != plaintext[i]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Wrong&#x27;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;You know the flag!!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Rc4.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="comment">#! /usr/bin/env  3.8.0 (3413)</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#source path: Rc4.py</span></span><br><span class="line"><span class="comment">#Compiled at: 1970-01-01 00:00:00</span></span><br><span class="line"><span class="comment">#Powered by BugScaner</span></span><br><span class="line"><span class="comment">#http://tools.bugscaner.com/</span></span><br><span class="line"><span class="comment">#如果觉得不错,请分享给你朋友使用吧!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">KSA</span>(<span class="params">key</span>):</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    key_length = <span class="built_in">len</span>(key)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % key_length]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PRGA</span>(<span class="params">S</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = (S[i] + S[j]) % <span class="number">256</span></span><br><span class="line">        <span class="keyword">yield</span> k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4</span>(<span class="params">plaintext, key</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> key]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            plaintext = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> plaintext]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)):</span><br><span class="line">                plaintext[i] += i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                S = KSA(key)</span><br><span class="line">                xor_value = PRGA(S)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)):</span><br><span class="line">                    plaintext[i] ^= <span class="built_in">int</span>(<span class="built_in">next</span>(xor_value)) + <span class="number">6</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> plaintext</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">cipher = [<span class="number">158</span>, <span class="number">31</span>, <span class="number">205</span>, <span class="number">434</span>, <span class="number">354</span>, <span class="number">15</span>, <span class="number">383</span>, <span class="number">298</span>, <span class="number">304</span>, <span class="number">351</span>, <span class="number">465</span>, <span class="number">312</span>, <span class="number">261</span>, <span class="number">442</span>,</span><br><span class="line">          <span class="number">397</span>, <span class="number">474</span>, <span class="number">310</span>, <span class="number">397</span>, <span class="number">31</span>, <span class="number">21</span>, <span class="number">78</span>, <span class="number">67</span>, <span class="number">47</span>, <span class="number">133</span>, <span class="number">168</span>, <span class="number">48</span>, <span class="number">153</span>, <span class="number">99</span>, <span class="number">103</span>,</span><br><span class="line">          <span class="number">204</span>, <span class="number">137</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">13</span>, <span class="number">228</span>, <span class="number">3</span>, <span class="number">136</span>, <span class="number">141</span>, <span class="number">248</span>, <span class="number">124</span>, <span class="number">26</span>, <span class="number">26</span>, <span class="number">65</span>, <span class="number">200</span>, <span class="number">7</span>]</span><br><span class="line">xor_list = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(cipher)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(cipher))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de_xor2</span>(<span class="params">plaintext</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext) - <span class="number">2</span>, <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        plaintext[i + <span class="number">1</span>] = plaintext[i] ^ plaintext[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(de_xor2(cipher))</span><br><span class="line">cipher_xor2 = [<span class="number">158</span>, <span class="number">31</span>, <span class="number">205</span>, <span class="number">383</span>, <span class="number">208</span>, <span class="number">365</span>, <span class="number">368</span>, <span class="number">85</span>, <span class="number">26</span>, <span class="number">111</span>, <span class="number">142</span>, <span class="number">233</span>, <span class="number">61</span>, <span class="number">191</span>, <span class="number">55</span>, <span class="number">87</span>, <span class="number">236</span>, <span class="number">187</span>, <span class="number">402</span>, <span class="number">10</span>, <span class="number">91</span>, <span class="number">13</span>, <span class="number">108</span>, <span class="number">170</span>, <span class="number">45</span>, <span class="number">152</span>, <span class="number">169</span>, <span class="number">250</span>, <span class="number">4</span>, <span class="number">171</span>, <span class="number">69</span>, <span class="number">148</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">233</span>, <span class="number">231</span>, <span class="number">139</span>, <span class="number">5</span>, <span class="number">117</span>, <span class="number">132</span>, <span class="number">102</span>, <span class="number">0</span>, <span class="number">91</span>, <span class="number">137</span>, <span class="number">207</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de_xor1</span>(<span class="params">plaintext, xor_list</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)):</span><br><span class="line">        plaintext[i] ^= xor_list[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(de_xor1(cipher_xor2, xor_list))</span><br><span class="line">cipher_xor1 = [<span class="number">158</span>, <span class="number">30</span>, <span class="number">207</span>, <span class="number">380</span>, <span class="number">212</span>, <span class="number">360</span>, <span class="number">374</span>, <span class="number">82</span>, <span class="number">18</span>, <span class="number">102</span>, <span class="number">132</span>, <span class="number">226</span>, <span class="number">49</span>, <span class="number">178</span>, <span class="number">57</span>, <span class="number">88</span>, <span class="number">252</span>, <span class="number">170</span>, <span class="number">384</span>, <span class="number">25</span>, <span class="number">79</span>, <span class="number">24</span>, <span class="number">122</span>, <span class="number">189</span>, <span class="number">53</span>, <span class="number">129</span>, <span class="number">179</span>, <span class="number">225</span>, <span class="number">24</span>, <span class="number">182</span>, <span class="number">91</span>, <span class="number">139</span>, <span class="number">43</span>, <span class="number">58</span>, <span class="number">203</span>, <span class="number">196</span>, <span class="number">175</span>, <span class="number">32</span>, <span class="number">83</span>, <span class="number">163</span>, <span class="number">78</span>, <span class="number">41</span>, <span class="number">113</span>, <span class="number">162</span>, <span class="number">227</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">KSA</span>(<span class="params">key</span>):</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    key_length = <span class="built_in">len</span>(key)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % key_length]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PRGA</span>(<span class="params">S</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = (S[i] + S[j]) % <span class="number">256</span></span><br><span class="line">        <span class="keyword">yield</span> k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de_rc4</span>(<span class="params">plaintext, key</span>):</span><br><span class="line">    key = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> key]</span><br><span class="line">    S = KSA(key)</span><br><span class="line">    xor_value = PRGA(S)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)):</span><br><span class="line">        plaintext[i] ^= (<span class="built_in">next</span>(xor_value) + <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)):</span><br><span class="line">        plaintext[i] -= i</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;SYCFOREVER&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(de_rc4(cipher_xor1, key))</span><br><span class="line"></span><br><span class="line">ch = [<span class="number">83</span>, <span class="built_in">ord</span>(<span class="string">&#x27;Y&#x27;</span>), <span class="number">88</span>, <span class="number">123</span>, <span class="number">66</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">49</span>, <span class="number">101</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">116</span>, <span class="number">104</span>, <span class="number">65</span>, <span class="number">116</span>, <span class="number">95</span>, <span class="number">121</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">95</span>, <span class="number">97</span>, <span class="number">51</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">85</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">113</span>, <span class="number">117</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">64</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">95</span>, <span class="number">116</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">125</span>]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ch)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(ch[c]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 虽然不知道为什么偏偏第二个错了，但flag都出来了我就没管了</span></span><br><span class="line"><span class="comment"># SYC&#123;Bel1eve_thAt_you_a3e_Unique_@nd_tHe_beSt&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DH爱喝茶"><a href="#DH爱喝茶" class="headerlink" title="DH爱喝茶"></a>DH爱喝茶</h3><p>nop掉jnz/jz 和下面的db 0c7h，再按C转为汇编代码，再选中main按P创建函数，F5反编译即可</p><p><img src="https://s1.vika.cn/space/2025/03/30/5da559847b6f4848bc4af4d8e4c589a6" alt="PixPin_2025-03-31_02-51-56"></p><p><a href="https://blog.csdn.net/quartect/article/details/112976418">IDA逆向常用宏定义-增加_ida rol4-CSDN博客</a></p><p><img src="https://s1.vika.cn/space/2025/03/30/1abeb74f966a4d0993cb57c1d0a8584a" alt="PixPin_2025-03-31_02-56-24"></p><p>根据题目也知道考tea系列加密，魔改了一点，<a href="https://blog.csdn.net/quartect/article/details/112976418">IDA逆向常用宏定义-增加_ida rol4-CSDN博客</a></p><p><img src="https://s1.vika.cn/space/2025/03/30/6c85445f4c984d2a8862f5696f37b3e7" alt="PixPin_2025-03-31_02-59-23"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">de_tea</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *V, <span class="type">unsigned</span> <span class="type">int</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v0, v1;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> delta = (<span class="type">unsigned</span> __int8)(key[<span class="number">0</span>] ^ key[<span class="number">1</span>]) - <span class="number">1737075662</span>;</span><br><span class="line">    sum = delta * <span class="number">32</span>;</span><br><span class="line">    v0 = *V;</span><br><span class="line">    v1 = V[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)&#123;</span><br><span class="line">        v1 -= (v0 + sum) ^ ((v0 &lt;&lt; <span class="number">4</span>) + key[<span class="number">2</span>]) ^ ((v0 &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>]);</span><br><span class="line">        v0 -= (v1 + sum) ^ ((v1 &lt;&lt; <span class="number">4</span>) + key[<span class="number">0</span>]) ^ ((v1 &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    *V = v0;</span><br><span class="line">    V[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> cipher[<span class="number">8</span>] = &#123;<span class="number">0x1F85A965</span>, <span class="number">0xEEC063EC</span>, <span class="number">0x5BF1D0B6</span>, <span class="number">0xF2FDE7B0</span>,<span class="number">0xAA38809A</span>, <span class="number">0x670772E9</span>, <span class="number">0x360D24B9</span>,<span class="number">0xE98C688C</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;<span class="number">0x56789ABC</span>, <span class="number">0x6789ABCD</span>, <span class="number">0x789ABCDE</span>, <span class="number">0x89ABCDEF</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        key[i] = (key[i] &lt;&lt; <span class="number">6</span>) | (key[i] &gt;&gt; (<span class="number">32</span> - <span class="number">6</span>));</span><br><span class="line">        de_tea(&amp;cipher[<span class="number">2</span> * i], key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, cipher);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SYC&#123;DH_likes_flower_and_tea!!!!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="CPP-flower"><a href="#CPP-flower" class="headerlink" title="CPP_flower"></a>CPP_flower</h3><blockquote><p>jnz/jz ；call/retn</p></blockquote><p>找到IDA提示不能识别的位置，有花指令</p><p><img src="https://s1.vika.cn/space/2025/03/30/0c8f99ba59b046f39924baeeb46b79ab" alt="PixPin_2025-03-31_02-00-48"></p><p>call 后面的数据被识别为地址了，先按D将call转化为数据，nop掉E8，再按C将数据转化为代码，同理下面也一样，还要把jz/jnz也nop掉</p><p><img src="https://s1.vika.cn/space/2025/03/30/2d3dfcd51b6249ea82542bbd56f838bf" alt="PixPin_2025-03-31_02-01-16"></p><p>call/retn花指令，直接全部nop就可以了，同理下面的也是，一共三个</p><p><img src="https://s1.vika.cn/space/2025/03/30/9c2c61b6209746d18e077309f77e4a20" alt="PixPin_2025-03-31_02-04-05"></p><p>将错误的函数结尾endp删除掉，edit—&gt;function—&gt;delete function</p><p>再从下面最近的一个retn向上选中一直到sub_419D10按P创建函数，再按F5反编译即可</p><p><img src="https://s1.vika.cn/space/2025/03/30/78e1ab5e3a1c4e3b847c14d7669640f7" alt="PixPin_2025-03-31_02-26-15"></p><p>脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> enc[<span class="number">50</span>] = &#123;<span class="number">62</span>, <span class="number">152</span>, <span class="number">235</span>, <span class="number">38</span>, <span class="number">37</span>, <span class="number">142</span>, <span class="number">37</span>, <span class="number">229</span>, <span class="number">134</span>, <span class="number">200</span>, <span class="number">63</span>, <span class="number">152</span>, <span class="number">200</span>, <span class="number">222</span>, <span class="number">82</span>,</span><br><span class="line">        <span class="number">68</span>, <span class="number">160</span>, <span class="number">203</span>, <span class="number">43</span>, <span class="number">42</span>, <span class="number">60</span>, <span class="number">170</span>, <span class="number">190</span>, <span class="number">203</span>, <span class="number">136</span>, <span class="number">85</span>, <span class="number">158</span>, <span class="number">109</span>, <span class="number">217</span>, <span class="number">148</span>, <span class="number">151</span>, <span class="number">28</span>,</span><br><span class="line">        <span class="number">82</span>, <span class="number">49</span>, <span class="number">89</span>, <span class="number">254</span>, <span class="number">26</span>, <span class="number">26</span>, <span class="number">232</span>, <span class="number">208</span>, <span class="number">58</span>, <span class="number">156</span>, <span class="number">6</span>, <span class="number">94</span>, <span class="number">37</span>, <span class="number">90</span>, <span class="number">228</span>, <span class="number">34</span>, <span class="number">161</span>, <span class="number">197</span>&#125;;</span><br><span class="line">    <span class="type">int</span> f[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    srand(<span class="number">0x7DE9</span>);</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">50</span>) &#123;</span><br><span class="line">        f[i] = ((rand() % <span class="number">255</span>));</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> r = f[i] ^ enc[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SYC&#123;Y0u_c @ n_3nJoy_yhe_Flow3r_anytime_and_anywhere&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="凯撒加密"><a href="#凯撒加密" class="headerlink" title="凯撒加密"></a>凯撒加密</h3><p><img src="https://s1.vika.cn/space/2025/03/23/73e9c5aa7ff84ace936a14c83a79860c" alt="PixPin_2025-03-23_12-24-03"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_cipher</span>(<span class="params">text, shift, mode=<span class="string">&#x27;e&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param text: 输入文本（明文或密文）</span></span><br><span class="line"><span class="string">    :param shift: 偏移量（0-25）</span></span><br><span class="line"><span class="string">    :param mode: e = &#x27;encrypt&#x27; 加密 或 d = &#x27;decrypt&#x27; 解密</span></span><br><span class="line"><span class="string">    :return: 加密/解密后的字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    result = []</span><br><span class="line">    shift = shift % <span class="number">26</span>  <span class="comment"># 确保偏移量在合理范围内</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密时取反向偏移</span></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        shift = -shift</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            <span class="comment"># 计算基准ASCII值（A=65/a=97）</span></span><br><span class="line">            base = <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) <span class="keyword">if</span> char.isupper() <span class="keyword">else</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            <span class="comment"># 字符偏移计算</span></span><br><span class="line">            shifted_char = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - base + shift) % <span class="number">26</span> + base)</span><br><span class="line">            result.append(shifted_char)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 非字母字符直接保留</span></span><br><span class="line">            result.append(char)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    <span class="keyword">for</span> shift <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Shift <span class="subst">&#123;shift:<span class="number">2</span>&#125;</span>: <span class="subst">&#123;caesar_cipher(ciphertext, shift, <span class="string">&#x27;decrypt&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># text = input(&quot;请输入文本: &quot;)</span></span><br><span class="line">    <span class="comment"># shift = int(input(&quot;请输入偏移量 (0-25): &quot;))</span></span><br><span class="line">    <span class="comment"># mode = input(&quot;选择模式 (encrypt/decrypt): &quot;).lower()</span></span><br><span class="line"></span><br><span class="line">    text = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line">    shift = <span class="number">3</span></span><br><span class="line">    mode = <span class="string">&#x27;e&#x27;</span></span><br><span class="line"></span><br><span class="line">    output = caesar_cipher(text, shift, mode)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;结果: <span class="subst">&#123;output&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    brute_force(text)</span><br></pre></td></tr></table></figure><h3 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">19742875423645690846073637620470497648804310111201409901059297083827103813674034450200432098143959078292346910591785265323563248781526393718834491458926162514713269984791730816121181307827624489725923763353393879316510062227511469438742429290073999388690825732236465647396755899136346150862848924231619666069528077790933176798057396704758072769660663756346237040909579775389576227450505746914753205890194457812893098491264392293949768193694560954874603451253079446652049592976605414438411872223250039782381259212718733455588477129910357095186014496957765297934289263536712574572533650393220492870445376144568199077767</span></span><br><span class="line">e1 = <span class="number">911</span></span><br><span class="line">e2 = <span class="number">967</span></span><br><span class="line">c1 = <span class="number">18676091924461946809127036439355116782539894105245796626898495935702348484076501694838877829307466429933623102626122909782775514926293363853121828819237500456062111805212209491398720528499589486241208820804465599279152640624618194425740368495072591471531868392274503936869225072123214869399971636428177516761675388589238329574042518038702529606188240859751459632643230538522947412931990009143731829484941397093509641320264169403755707495153433568106934850283614529793695266717330769019091782929139589939928210818515744604847453929432990185347112319971445630830477574679898503825626294542336195240055995445217249602983</span></span><br><span class="line">c2 = <span class="number">4229417863231092939788858229435938841085459330992709019823280977891432565586698228613770964563920779991584732527715378842621171338649745186081520176123907689669636473919678398014317024138622949923292787095400632018991311254591786179660603414693984024161009444842277220189315861986306573182865656366278782315864366857374874763243428496061153290565891942968876789905670073321426112497113145141539289020571684634406829272902118484670099097148727072718299512735637087933649345419433312872607209633402427461708181971718804026293074540519907755129917132236240606834816534369171888633588190859475764799895410284484045429152</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_gong_N_def</span>(<span class="params">e1, e2, c1, c2, n</span>):  <span class="comment"># 共模攻击函数</span></span><br><span class="line">    e1, e2, c1, c2, n = <span class="built_in">int</span>(e1), <span class="built_in">int</span>(e2), <span class="built_in">int</span>(c1), <span class="built_in">int</span>(c2), <span class="built_in">int</span>(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;e1,e2:&quot;</span>, e1, e2)</span><br><span class="line">    s = gmpy2.gcdext(e1, e2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;mpz:&quot;</span>, s)</span><br><span class="line">    s1 = s[<span class="number">1</span>]</span><br><span class="line">    s2 = s[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> s1 &lt; <span class="number">0</span>:</span><br><span class="line">        s1 = - s1</span><br><span class="line">        c1 = gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s2 &lt; <span class="number">0</span>:</span><br><span class="line">        s2 = - s2</span><br><span class="line">        c2 = gmpy2.invert(c2, n)</span><br><span class="line">    m = (<span class="built_in">pow</span>(c1, s1, n) * <span class="built_in">pow</span>(c2, s2, n)) % n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de</span>(<span class="params">c, e, n</span>):  <span class="comment"># 因为此时的m不是真正的m，而是m^k，所以对m^k进行爆破</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; <span class="number">1000</span>:  <span class="comment"># 指定k小于1000</span></span><br><span class="line">        mk = c + n * k</span><br><span class="line">        flag, true1 = gmpy2.iroot(mk, e)  <span class="comment"># 返回的第一个数值为开方数，第二个数值为布尔型，可整除为true，可自行测试</span></span><br><span class="line">        <span class="keyword">if</span> <span class="literal">True</span> == true1:</span><br><span class="line">            <span class="comment"># print(libnum.n2s(int(flag)))</span></span><br><span class="line">            <span class="keyword">return</span> flag</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = rsa_gong_N_def(e1, e2, c1, c2, n)</span><br><span class="line">e = gmpy2.gcd(e1, e2)</span><br><span class="line">m1 = de(c, e, n)</span><br><span class="line"><span class="keyword">if</span> m1:  <span class="comment"># 指定输出m1</span></span><br><span class="line">    <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m1)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="XOR"><a href="#XOR" class="headerlink" title="XOR"></a>XOR</h3><p>暴力破解，大概30分钟</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"></span><br><span class="line">f1 = <span class="number">4585958212176920650644941909171976689111990</span></span><br><span class="line">f2 = <span class="number">3062959364761961602614252587049328627114908</span></span><br><span class="line">e2 = <span class="number">10706859949950921239354880312196039515724907</span></span><br><span class="line"></span><br><span class="line">enc = e2 ^ f2 ^ f1</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">                key = <span class="built_in">chr</span>(a) + <span class="built_in">chr</span>(b) + <span class="built_in">chr</span>(c) + <span class="built_in">chr</span>(d)</span><br><span class="line">                flag = xor(key.encode(), long_to_bytes(enc))</span><br><span class="line">                <span class="keyword">if</span> flag[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">b&#x27;SYC&#123;&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(flag)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2025/03/23/cb20d22e892444c391797dc1b70c4443" alt="PixPin_2025-03-02_13-50-41"></p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> mod_inverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定的值</span></span><br><span class="line">n = <span class="number">33108009203593648507706487693709965711774665216872550007309537128959455938833</span></span><br><span class="line">p = <span class="number">192173332221883349384646293941837353967</span></span><br><span class="line">q = <span class="number">172282016556631997385463935089230918399</span></span><br><span class="line">c = <span class="number">5366332878961364744687912786162467698377615956518615197391990327680664213847</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 φ(n)</span></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算私钥 d</span></span><br><span class="line">d = mod_inverse(e, phi_n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密密文</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将解密后的整数转换为字节字符串</span></span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recovered flag:&quot;</span>, flag.decode())</span><br><span class="line"><span class="comment"># SYC&#123;RSA_is_easy&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ncoCRT"><a href="#ncoCRT" class="headerlink" title="ncoCRT"></a>ncoCRT</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extended_gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (a, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, x, y = extended_gcd(b, a % b)</span><br><span class="line">        <span class="keyword">return</span> (g, y, x - (a // b) * y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">a1, m1, a2, m2</span>):</span><br><span class="line">    d = gcd(m1, m2)</span><br><span class="line">    <span class="keyword">if</span> (a1 - a2) % d != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 无解</span></span><br><span class="line">    g, p, q = extended_gcd(m1 // d, m2 // d)</span><br><span class="line">    lcm = m1 // d * m2</span><br><span class="line">    k = ((a2 - a1) // d) * p % (m2 // d)</span><br><span class="line">    x = (a1 + k * m1) % lcm</span><br><span class="line">    <span class="keyword">return</span> (x, lcm)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_crt</span>(<span class="params">c, p</span>):</span><br><span class="line">    current_x, current_mod = c[<span class="number">0</span>], p[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(c)):</span><br><span class="line">        res = merge(current_x, current_mod, c[i], p[i])</span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        current_x, current_mod = res</span><br><span class="line">    <span class="keyword">return</span> current_x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 题目数据</span></span><br><span class="line">p = [</span><br><span class="line">    <span class="number">1921232050179818686537976490035</span>,</span><br><span class="line">    <span class="number">2050175089402111328155892746480</span>,</span><br><span class="line">    <span class="number">1960810970476421389691930930824</span>,</span><br><span class="line">    <span class="number">1797713136323968089432024221276</span>,</span><br><span class="line">    <span class="number">2326915607951286191807212748022</span></span><br><span class="line">]</span><br><span class="line">c = [</span><br><span class="line">    <span class="number">1259284928311091851012441581576</span>,</span><br><span class="line">    <span class="number">1501691203352712190922548476321</span>,</span><br><span class="line">    <span class="number">1660842626322200346728249202857</span>,</span><br><span class="line">    <span class="number">657314037433265072289232145909</span>,</span><br><span class="line">    <span class="number">2056630082529583499248887436721</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并同余方程</span></span><br><span class="line">m = solve_crt(c, p)</span><br><span class="line"><span class="keyword">if</span> m <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无解：存在矛盾的约束条件&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;恢复的 m:&quot;</span>, m)</span><br><span class="line">    flag = long_to_bytes(m).rstrip(<span class="string">b&#x27;\x01&#x27;</span>)  <span class="comment"># 去除填充的\x01</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, flag.decode())</span><br><span class="line"><span class="comment"># SYC&#123;wha+s_wr0n9!_CRT_bu+_n0+_&lt;0mpr1me!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Truth-of-Word"><a href="#Truth-of-Word" class="headerlink" title="Truth of Word"></a>Truth of Word</h3><p>第一部分，全选，很容易就发现</p><p><img src="https://s1.vika.cn/space/2025/03/30/d1e10522b919449f94bb43e4086ff12f" alt="PixPin_2025-03-31_03-16-56"></p><p>第二部分，解压，有一个图片</p><p><img src="https://s1.vika.cn/space/2025/03/30/41f4d37fe8cb4129aeac81793b38ea27" alt="PixPin_2025-03-31_03-11-48"></p><p>第三部分，盲猜在宏里面，但奈何word和wps都默契的对运行宏收费</p><p><img src="https://s1.vika.cn/space/2025/03/31/eede131025604d238b5eea8360c488d4" alt="PixPin_2025-03-31_20-00-24"></p><h3 id="ez-jpg"><a href="#ez-jpg" class="headerlink" title="ez_jpg"></a>ez_jpg</h3><p>flag.txt用notepad++打开，发现只有一行base64编码，解密后发现了逆序的jpg文件头，reverse逆序一下，#3自动提示转化为图片了，再下载保存即可</p><p><img src="https://s1.vika.cn/space/2025/03/31/c9faa6cc6b2045109ec96c22da3e343b" alt="PixPin_2025-03-31_20-08-27"></p><p><img src="https://s1.vika.cn/space/2025/03/31/7dd6e1dc19c94deeb519cff72ba2b135" alt="download (1)"></p><p>改一下高宽都为0280（640）</p><p><img src="https://s1.vika.cn/space/2025/03/31/0640cd75520443be86e6a657f9008082" alt="PixPin_2025-03-31_20-21-27"></p><p>flag</p><p><img src="https://s1.vika.cn/space/2025/03/31/8b8737845b0646a083ec369dc3c898cb" alt="PixPin_2025-03-31_20-23-11"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="100-的圆"><a href="#100-的圆" class="headerlink" title="100%的圆"></a>100%的圆</h3><p>右键检查，可以找到一串base64编码，直接解密就是flag：SYC{5UcH_@_Wo0d3rfUl_CiRc1e}</p><p><img src="https://s1.vika.cn/space/2025/03/30/ea285bb1819a4630b24d06a8933a19ce" alt="PixPin_2025-03-31_00-43-38"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向-SMC</title>
      <link href="/2025/03/20/%E9%80%86%E5%90%91-SMC/"/>
      <url>/2025/03/20/%E9%80%86%E5%90%91-SMC/</url>
      
        <content type="html"><![CDATA[<h1 id="Self-Modified-Code"><a href="#Self-Modified-Code" class="headerlink" title="Self-Modified Code"></a>Self-Modified Code</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>自修改代码</strong>（Self-Modified Code）是一类特殊的代码技术，即<strong>在运行时修改自身代码</strong>，从而使得程序实际行为与反汇编结果不符，同时修改前的代码段数据也可能非合法指令，从而无法被反汇编器识别，这加大了软件逆向工程的难度。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>SMC的基本原理是在编译可执行文件时，将需要加密的代码区段（例如函数、代码块等）单独编译成一个section（段），并将其标记为<strong>可读、可写、不可执行</strong>（readable, writable, non-executable），然后通过某种方式在程序运行时将这个section解密为可执行代码，并将其标记为<strong>可读、可执行、不可写</strong>（readable, executable, non-writable）。这样，攻击者就无法在内存中找到加密的代码，从而无法直接执行或修改加密的代码。</p><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/memoryapi/nf-memoryapi-virtualprotect#parameters">VirtualProtect 函数 (memoryapi.h) - Win32 apps | Microsoft Learn</a>是 Windows 操作系统中的一个 API 函数，它允许应用程序改变一个内存页的保护属性（<a href="https://learn.microsoft.com/zh-cn/windows/win32/Memory/memory-protection-constants">每次保护常量</a>）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">VirtualProtect</span><span class="params">(</span></span><br><span class="line"><span class="params">  LPCVOID lpAddress,  <span class="comment">// 要改变保护属性的内存页的起始地址</span></span></span><br><span class="line"><span class="params">  SIZE_T dwSize,      <span class="comment">// 内存页的大小</span></span></span><br><span class="line"><span class="params">  DWORD flNewProtect, <span class="comment">// 新的保护属性</span></span></span><br><span class="line"><span class="params">  PDWORD lpflOldProtect <span class="comment">// 存储旧的保护属性</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ul><li><p>SMC的实现方式有很多种：</p><ul><li><p>通过修改PE文件的Section Header</p></li><li><p>使用API Hook实现代码加密和解密</p></li><li><p>使用VMProtect等第三方加密工具等</p></li></ul></li></ul><h2 id="破解方式"><a href="#破解方式" class="headerlink" title="破解方式"></a>破解方式</h2><ul><li>自修改代码破解方式：<ul><li>通过IDA动调,程序始终要根据正确代码来运行,我们就在程序正确的时候,再分析</li><li>通过分析加密逻辑,来还原程序</li><li>通过Ollydug来dump下正确的逻辑</li></ul></li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>[MoeCTF2023]SMC</p><p><img src="https://s1.vika.cn/space/2025/03/20/ab73e15d25434b919bfe988542e5220c" alt="PixPin_2025-03-20_17-08-17"></p><p>发现VirtualProtect函数，修改了loc_4014D0()权限</p><p><img src="https://s1.vika.cn/space/2025/03/20/c1e3279a33da40d78270a31fa3d94ed8" alt="PixPin_2025-03-20_17-10-37"></p><p>双击进入loc_4014D0，发现IDA识别不了</p><p><img src="https://s1.vika.cn/space/2025/03/20/c46edce51dfc4a16a7c92d66229aa84b" alt="PixPin_2025-03-20_17-16-29"></p><p>写idapython脚本还原</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">122</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  *((_BYTE *)sub_4014D0 + i) ^= <span class="number">0x66u</span>;</span><br><span class="line">  result = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2025/03/20/81d82b2c948b4cefadb366db91afae1f" alt="PixPin_2025-03-20_17-20-26"></p><p>选中loc_4014D0（D0到F2），按C转化为汇编代码（force强制），再按选中loc_4014D0：按P创建函数，按F5反编译即可</p><p><img src="https://s1.vika.cn/space/2025/03/20/f6bfbbf5fcd04c84b6307693192c6541" alt="PixPin_2025-03-20_17-22-34"></p><p>接着提取byte_40A000[]数据，解密</p><p>EXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enc = [</span><br><span class="line">    <span class="number">0x9F</span>, <span class="number">0x91</span>, <span class="number">0xA7</span>, <span class="number">0xA5</span>, <span class="number">0x94</span>, <span class="number">0xA6</span>, <span class="number">0x8D</span>, <span class="number">0xB5</span>, <span class="number">0xA7</span>, <span class="number">0x9C</span>,</span><br><span class="line">    <span class="number">0xA6</span>, <span class="number">0xA1</span>, <span class="number">0xBF</span>, <span class="number">0x91</span>, <span class="number">0xA4</span>, <span class="number">0x53</span>, <span class="number">0xA6</span>, <span class="number">0x53</span>, <span class="number">0xA5</span>, <span class="number">0xA3</span>,</span><br><span class="line">    <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x91</span>, <span class="number">0x9E</span>, <span class="number">0x8F</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag += <span class="built_in">chr</span>((enc[i] ^ <span class="number">0x39</span>) - <span class="number">57</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># moectf&#123;Self_Mod1f1cation&#125;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.secpulse.com/archives/197285.html">探究SMC局部代码加密技术以及在CTF中的运用 - SecPulse.COM | 安全脉搏</a></p><p><a href="https://blog.csdn.net/Sciurdae/article/details/133717752">CTF Reverse逆向学习之SMC动态代码加密技术-逆向 smc-CSDN博客</a></p><p><a href="https://xz.aliyun.com/news/14551?time__1311=eqUxuiitKGq7qhxBqDwjDAxYwO2bQQKqH4D&amp;u_atoken=0a41eea214a26e31ddaa99b8710cb2c8&amp;u_asig=0a472f8c17423939096368378e0035">文章 - CTF Reverse逆向学习之SMC动态代码加密技术 - 先知社区</a></p><p><a href="https://www.52pojie.cn/thread-1780843-1-1.html">【reverse】手把手带你基于dll实现多次SMC - 吾爱破解 - 52pojie.cn</a></p><p><a href="https://xz.aliyun.com/news/14093?time__1311=eqUxuiDti%3DQiwx05DI72xm2DRx7uQk8i8iD&amp;u_atoken=54435cd6be1a4d993a2048e549ba5793&amp;u_asig=0a472f9217423960410267956e0052">文章 - SMC in CTF - 先知社区</a></p><p><a href="https://blog.csdn.net/weixin_40729735/article/details/121595169">CTF-SMC 逆向练习_ctf smc-CSDN博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 逆向 </tag>
            
            <tag> SMC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2025/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2025/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络（第八版）"><a href="#计算机网络（第八版）" class="headerlink" title="计算机网络（第八版）"></a>计算机网络（第八版）</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p><strong>计算机网络</strong> （ 简称为<strong>网络</strong> ） 由 若干<strong>节点(node)</strong> 和 连接这些节点 的<strong>链路(link)</strong>组成 。</p></li><li><p>网络中的<strong>节点</strong>可以是计算机、集线器 、交换机或路由器等</p></li><li><p>网络相连的计算机常称为<strong>主机(host)</strong> 。 在互连网中不可缺少的<strong>路由器</strong> ，是一种特殊的计算机（有中央处理器 、存储器 、操作系统等 ），但不能称为主机。</p></li></ul><p><img src="https://s1.vika.cn/space/2025/02/23/5fade174aac54ab39e4a7fff17e6f221" alt="image-20250210190351863"></p><ul><li><strong>网络把许多计算机连接在一起 ， 而互连网则把许多网络通过一些路由 器 连接在一起 。与网络相连的计算机常称为主机</strong></li></ul><p><img src="https://s1.vika.cn/space/2025/02/23/56f79f2cb06f431d803b39c3ef1a762b" alt="image-20250210191024923"></p><ul><li><strong>互联网服务提供者/供应商</strong> <strong>ISP (Internet Service</strong> <strong>Provider)</strong> 。例如， 中国电信、 中国联通和中国移动等公司 都是我国最有名的<strong>ISP</strong> 。</li></ul><ul><li><strong>互联网交换点IXP (Internet eXchange Point)</strong>：更快地转发分组 ，更加有效和更加经济地利用网络资源</li></ul><p><img src="https://s1.vika.cn/space/2025/02/23/2133abd3179d4861a018ba34573010b1" alt="image-20250210191411953"></p><ul><li><strong>互联网协会</strong>(Internet Society , 简称为<strong>ISOC</strong>) [W-ISOC] <ul><li>其下<strong>技术组织</strong>叫作<strong>互联网体系结构委员会 IAB</strong> (Internet Architecture Board) ， 负责管理互联网有关协议的开发</li><li>IAB 下面又 设有两个<strong>工程部</strong>：<ul><li>(1) <strong>互联网工程部 IETF</strong> (Internet Engineering Task Force)</li><li>(2) <strong>互联网研究部 IRTF</strong> (Internet Research Task Force)</li></ul></li></ul></li><li><strong>RFC (Request For Comments)</strong>的意思就是 <strong>“ 请求评论 ”</strong> 。所有的 RFC 文档都可从互联网上免费下载[W-RFC]，而且任何人都可以用电子邮件随时发表对某个文档的意见或建议</li></ul><hr><h3 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h3><h4 id="边缘部分"><a href="#边缘部分" class="headerlink" title="边缘部分"></a>边缘部分</h4><ul><li><p>由所有连接在互联网上的主机组成。 这部分是<strong>用户直接使用的</strong> ，用来进行通信（传送数据 、音 频或视频）和资源共享。</p></li><li><p>这些主机又称为<strong>端系统(end system)</strong> ,可大可小，（摄像头、手机、平板、笔记本、服务器等）</p></li><li><p>我们说 ： “ 主机 A 和主机 B 进 行通信 “ ， 实际上是指： ” 运行在主机 A 上的某个程序和运行在主机 B 上的另 一个程序进行通信 ” 。 由于 “ 进程 ” 就是 “ 运行着的程序 “ ， 因此这也就是指： <strong>“ 主机 A 的 某个进程和主机 B 上的 另一个进程进行通信 ”</strong> 。这种 比较严密的说法通常可 以<strong>简称为 “计算机之间通信”</strong> 。</p></li><li><p>网络边缘的<strong>通信方式</strong></p><ul><li><p><strong>客户 —服务器方式 ( C/S 方式 ）</strong></p><p>主机 A 运行客户程序而主机 B 运行服务器程序 。 在 这种情况下 ， A 是客户而 B 是服务器。 客 户 A 向服务器 B 发出请求服务 ，而服务器 B 向客 户 A 提供服务 。 这里最主要 的特征就是：</p><p>​    <strong>客户是服务请求方 ， 服务器是服务提供方。</strong></p><p><img src="https://s1.vika.cn/space/2025/02/23/efd1928bb6b74010888b25a6e464114d" alt="image-20250210193642409"></p></li></ul></li></ul><ul><li><p><strong>对等方式 ( P2P 方式）</strong></p><ul><li><p>peer-to-peer, 简写为 P2P。是指两台主机在通信时 ， 并<strong>不区分</strong>哪一个是服务请求方和哪一 个是服务提供方 。 <strong>只要两台主机都运行了对等连接软件 ( P2P 软件 ）</strong> ， 它们就可以进行平等的对等连接通信 。 这时， <strong>双方都可以下载对方已经存储在硬盘中的共享文档</strong> 。 因此这种工作方式也称为 P2P 方式 </p></li><li><p>在图l-6中，主机C,D,E和F都运行了P2P程序，因此这几台主机都可进行对等通信（如C和D,E和F,以及C和F)。实际上，对等连接方式从本质上看仍然使用客户－服务器方式，只是对等连接中的每一台主机既是客户同时又是服务器。例如主机C,当C请求D的服务时，C是客户，D是服务器。但如果C又同时向F提供服务，那么C又同时起着服务器的作用</p></li><li><p>对等连接工作方式可支持大量对等用户（如上百万个）同时工作</p><p><img src="https://s1.vika.cn/space/2025/02/23/5d4590e023b949e885fcb912aa6708e8" alt="image-20250210194456319"></p></li></ul></li></ul><h4 id="核心部分"><a href="#核心部分" class="headerlink" title="核心部分"></a>核心部分</h4><ul><li><p>由大量网络和连接这些网络的路由器组成。 这部分是<strong>为边缘部分提供服务的</strong>（提供连通性和交换）。</p></li><li><p>在网络核心部分起特殊作用的是<strong>路由器(router)</strong>，它是一种专用计算机（但不叫作主机）。路由器是实现<strong>分组交换(packet switching)</strong>的关键构件，其任务是<strong>转发收到的分组</strong>，这是网络核心部分最重要的功能</p></li><li><p>分组交换的特点：</p><ul><li><p>分组交换则采用<strong>存储转发技术</strong>：</p><p>例如，每个数据段为<strong>1024bit</strong>气在每一个数据段前面，加上一些必要的控制信息组成的<strong>首部(header)</strong>后，就构成了一个<strong>分组(packet)</strong>。分组又称为<strong>“包”</strong>，而分组的首部也可称为<strong>“包头”</strong>。分组是在互联网中传送的数据单元。</p><p><img src="https://s1.vika.cn/space/2025/02/23/5b20c49c0f4642babee266bc50455def" alt="image-20250210205157375"></p></li><li><p>示意图</p><p><img src="https://s1.vika.cn/space/2025/02/23/5924729aa9614d868a3c37fe28d9bf46" alt="image-20250210205604895"></p></li><li><p>优缺点：</p><p><img src="https://s1.vika.cn/space/2025/02/23/1dfe2bd047164e35abce6bb60b2d3552" alt="image-20250210205907697"></p></li><li><p>交换对比：</p></li></ul></li></ul><pre><code>![image-20250210210043790](https://s1.vika.cn/space/2025/02/23/35446ad625b14682b2853e34f8f0bc90)</code></pre><h3 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h3><ul><li><strong>作用范围：</strong><ul><li><strong>广域网 WAN (Wide Area Network)</strong></li><li><strong>城域网 MAN (Metropolitan Area Network)</strong></li><li><strong>局域网 LAN (Local Area Network)</strong></li><li><strong>个人区域网 PAN (Personal Area Network) 、无线个人区域网 WPAN (Wireless PAN)</strong></li></ul></li></ul><h3 id="计算机的性能（很重要，还未补充）"><a href="#计算机的性能（很重要，还未补充）" class="headerlink" title="计算机的性能（很重要，还未补充）"></a>计算机的性能（很重要，还未补充）</h3><ul><li><p><strong>性能特征：</strong></p><ol><li><strong>速率</strong></li><li><strong>带宽</strong></li><li><strong>吞吐量</strong></li><li><strong>时延</strong><ul><li><strong>发送时延</strong></li><li><strong>传播时延</strong></li><li><strong>处理时延</strong></li><li><strong>排队时延</strong></li></ul></li><li><strong>时延带宽积</strong></li><li><strong>往返时间RTT</strong></li><li><strong>利用率</strong></li></ol></li><li><p><strong>非性能特征：</strong></p><ol><li><strong>费用</strong></li><li><strong>质量</strong></li><li><strong>标准化</strong></li><li><strong>可靠性</strong></li><li><strong>可拓展性和可升级性</strong></li><li><strong>易于管理与维护</strong></li></ol></li></ul><h3 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h3><h4 id="协议与划分层次"><a href="#协议与划分层次" class="headerlink" title="协议与划分层次"></a>协议与划分层次</h4><p>​    在计算机网络中要做到有条不紊地交换数据，就必须遵守一些事先约定好的规则。<strong>这些规则明确规定了所交换的数据的格式以及有关的同步问题</strong>。这里所说的<strong>同步</strong>不是狭义的（即同频或同频同相）而是广义的，即在视频讲解一定的条件下应当发生什么事件（例如，应当发送一个应答信息），<strong>因而同步含有时序的意思</strong>。这些<strong>为进行网络中的数据交换而建立的规则、标准或约定称为网络协议(network protocol)</strong>。网络协议也可简称为<strong>协议</strong>。</p><ul><li><p>网络协议主要由以下三个要素组成：</p><ul><li><p><strong>语法</strong>，即数据与控制信息的结构或格式；</p></li><li><p><strong>语义</strong>，即需要发出何种控制信息，完成何种动作以及做出何种响应；</p></li><li><p><strong>同步</strong>，即事件实现顺序的详细说明。</p></li><li><strong>或称“语法，语义， 动作，时序”</strong></li></ul></li><li><p>划分层次</p><p><img src="https://s1.vika.cn/space/2025/02/23/a0e7f5e95c2145adab4ac3b77dfa9e4b" alt="image-20250210212953613"></p></li></ul><h4 id="具有五层协议的体系结构"><a href="#具有五层协议的体系结构" class="headerlink" title="具有五层协议的体系结构"></a>具有五层协议的体系结构</h4><p><img src="https://s1.vika.cn/space/2025/02/23/805360b5a3204fb993d1108e8fd9012c" alt="image-20250210213115377"></p><p><img src="https://s1.vika.cn/space/2025/02/23/ed90db6f585445e8a7ad659926dcd1e6" alt="image-20250210213245045"></p><ul><li><strong>服务访问点SAP</strong> (Service Access Point) </li><li>OSI 参考模型把对等层次之间传送的数据单位称为该层的<strong>协议数据单元 PDU</strong> (Protocol Data Unit)</li><li>OSI把层与层之间交换的数据的单位称为<strong>服务数据单元SDU</strong>(Service Data Unit)，它可以与PDU不一样。例如，可以是多个SDU合成为一个PDU,也可以是一个SDU划分为几个PDU。</li></ul><p><img src="https://s1.vika.cn/space/2025/02/23/11afe5881c6844349a043bb8542f7d4a" alt="image-20250210213443010"></p><h4 id="TCP-IP-的体系结构"><a href="#TCP-IP-的体系结构" class="headerlink" title="TCP/IP 的体系结构"></a><strong>TCP/IP</strong> 的体系结构</h4><p><img src="https://s1.vika.cn/space/2025/02/23/dad004b7ab794002ab7473ecf7a850f8" alt="image-20250210213916954"></p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h3 id="数据通信基础知识"><a href="#数据通信基础知识" class="headerlink" title="数据通信基础知识"></a>数据通信基础知识</h3><ul><li><strong>数据通信系统的模型</strong></li><li><strong>模拟信号</strong>，或连续信号 ，代表消息的参数的取值是<strong>连续的</strong>。</li><li><strong>数字信号</strong>，或离散信号 ，代表消息的参数的取伯是<strong>离散的</strong>。</li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/c2514abf72d8401486312d4d39b9d9dc" alt="image-20250210214507335"></p><h4 id="常见编码方式"><a href="#常见编码方式" class="headerlink" title="常见编码方式"></a>常见编码方式</h4><p>在使用二进制编码时，只有两种不同的码元，一种代表0状态而另 一种代表1状态</p><p><img src="https://s1.vika.cn/space/2025/03/02/b98e68b0a50d4bcdb893a59f67d68e20" alt="image-20250210215026499"></p><h4 id="基本带通调制方法"><a href="#基本带通调制方法" class="headerlink" title="基本带通调制方法"></a>基本带通调制方法</h4><p><img src="https://s1.vika.cn/space/2025/03/02/5ff8f187d959421cafbf06551ce047cb" alt="image-20250210215135467"></p><h4 id="物理层下的传输媒介"><a href="#物理层下的传输媒介" class="headerlink" title="物理层下的传输媒介"></a>物理层下的传输媒介</h4><p><img src="https://s1.vika.cn/space/2025/03/02/069cd797fab34eeeb825c605c18467e9" alt="image-20250210223321988"></p><ul><li><p>导引型传输媒体：</p><ol><li>双绞线</li><li>同轴电缆</li><li>光缆（光纤）</li></ol></li><li><p>非导引型传输媒体：自由空间</p></li></ul><h3 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h3><ul><li>数字通信的优点就是：虽然在信道上传输时会不可避免地产生<strong>失真</strong>，但在接收端只要我们从失真的波形中能够识别出原来的信号，那么这种失真对通信质量就可视为无影响。</li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/24917f0ecd6d42249422d16cc2dd70bb" alt="image-20250210222541891"></p><h3 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h3><p><img src="https://s1.vika.cn/space/2025/03/02/dee9b8321f3542c9868f8d2d5e3b07d7" alt="image-20250210224134115"></p><h4 id="频分复用-FDM"><a href="#频分复用-FDM" class="headerlink" title="频分复用 FDM"></a>频分复用 FDM</h4><p>频分复用 FDM (Frequency Division Multiplexing）</p><p><img src="https://s1.vika.cn/space/2025/03/02/add4479ffc3b447786ebb9ca3180bd13" alt="image-20250210224153236"></p><h4 id="时分复用-TDM"><a href="#时分复用-TDM" class="headerlink" title="时分复用 TDM"></a>时分复用 TDM</h4><p>时分复用 TDM(Time Division Multiplexing)</p><p><img src="https://s1.vika.cn/space/2025/03/02/fb8bc1a6c2bf4ded96942191026e1525" alt="image-20250210224214169"></p><h4 id="统计时分复用-STDM"><a href="#统计时分复用-STDM" class="headerlink" title="统计时分复用 STDM"></a>统计时分复用 STDM</h4><p>统计时分复用 STDM(Statistic TDM)</p><p><img src="https://s1.vika.cn/space/2025/03/02/0f4033f8e7014060a1e7da9415426682" alt="image-20250210224235368"></p><h4 id="波分复用-WDM"><a href="#波分复用-WDM" class="headerlink" title="波分复用 WDM"></a>波分复用 WDM</h4><p>波分复用 WDM(Wavelength Division Multiplexing)</p><p><img src="https://s1.vika.cn/space/2025/03/02/211d2a4f2e1e482880299d50ef263798" alt="image-20250210224301648"></p><h4 id="码分复用-CDM"><a href="#码分复用-CDM" class="headerlink" title="码分复用 CDM"></a>码分复用 CDM</h4><p>码分复用 CDM（Code Division Multiplexing）</p><h3 id="宽带接入技术（待补充）"><a href="#宽带接入技术（待补充）" class="headerlink" title="宽带接入技术（待补充）"></a>宽带接入技术（待补充）</h3><h4 id="FTTx-技术（重要）"><a href="#FTTx-技术（重要）" class="headerlink" title="FTTx 技术（重要）"></a>FTTx 技术（重要）</h4><h4 id="光纤同轴混合-网-HFC-网-）"><a href="#光纤同轴混合-网-HFC-网-）" class="headerlink" title="光纤同轴混合 网 ( HFC 网 ）"></a>光纤同轴混合 网 ( HFC 网 ）</h4><h4 id="ADSL-技术"><a href="#ADSL-技术" class="headerlink" title="ADSL 技术"></a>ADSL 技术</h4><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><ul><li>数据链路层使用的信道主要类型：点对点信道、广播信道。</li><li><strong>局域网</strong>虽然是个网络，但我们<strong>并不</strong>把局域网放在网络层讨论，这是因为网络层要讨论的问题是多个网络互连的问题，是讨论分组怎样从一个网络，通过路由器，转发到另一个网络。</li><li>在本章中我们研究的是<strong>在同一个局域网中</strong>，分组怎样从一主机传送到另一台主机，但并不经过路由器转发。从整个的互联网来看，<strong>局域网仍属于数据链路层</strong>的范围</li></ul><hr><p><img src="https://s1.vika.cn/space/2025/03/02/90c1a53987244fe3b9eb8892881eb306" alt="image-20250212125221913"></p><h3 id="数据链路层的几个共同问题"><a href="#数据链路层的几个共同问题" class="headerlink" title="数据链路层的几个共同问题"></a>数据链路层的几个共同问题</h3><ul><li><strong>链路（Link）</strong>就是从一个节点<strong>到相邻节点</strong>的一段物理线路（有线或无线），而中间没有其他交换节点。</li><li><strong>数据链路（data link）</strong>除了必须有一条物理线路外，还必须要有一些必要的通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。现在最常用的方法是使用<strong>网络适配器</strong>（既有硬件，也包括软件）来实现这些协议。</li><li>早期的数据通信协议曾叫作通信<strong>规程( procedure)</strong>。 因此在数据链路层， 规程和协议是同义语。</li><li>点对点信道的数据链路层的协议数据单元一一<strong>帧</strong> </li><li>网络层协议数据单元就是 IP 数据报（或简称为<strong>数据报、分组或包</strong>）</li></ul><hr><p><img src="https://s1.vika.cn/space/2025/03/02/6a31366fbff841a6bbfd38ab067b2874" alt="image-20250212131324811"></p><ul><li><p><strong>三个基本问题:</strong></p><ul><li><p><strong>封装成帧</strong>( framing)就是在一段数据的前后分别添加首部和尾部， 这样就构成 了一个帧。每一种链路层协议都规定了所能传送的帧的<strong>数据部分长度上限——最大传送单元MTU</strong>(Maximum Transfer Unit)。</p><p><img src="https://s1.vika.cn/space/2025/03/02/e22dba6aa3e142c9b0948176bd4c636e" alt="image-20250212134952166"></p><ul><li><p>首部和尾部的一个重要作用就是进行<strong>帧界定</strong>（即确定帧的界限），首部和尾部还包括许多必要的控制信息。</p></li><li><p>控制字符(0x01)<strong>SOH</strong>(Start Of Header),(0x04)<strong>EOT</strong> ( End Of Transmission)</p><p><img src="https://s1.vika.cn/space/2025/03/02/e63bbf0a9aad4edea40abe150569dd05" alt="image-20250212140235055"></p></li><li><p>由于使用了帧定界符，接收端就知道前面收到的数据是个不完整的帧（只有首部开始符SOH而没有传输结束符EOT)，必须丢弃。而后面收到的数据有明确的帧定界符(SOH和EOT)，因此这是一个完整的帧，应当收下。</p></li></ul></li><li><p><strong>透明传输</strong></p><ul><li><p>由于帧的开始和结束的标记使用专门指明的控制字符，因此，所传输的数据中的任何8比特的组合一定不允许和用作帧界定的控制字符的比特编码一样，否则就会出现帧界定的错误。</p><p><img src="https://s1.vika.cn/space/2025/03/02/ca20f21077514b7fb8a4a0d84f5f9813" alt="image-20250212141057115"></p></li><li><p><strong>“透明”</strong>具体的方法是：发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个<strong>转义字符“ESC”</strong>（其十六进制编码是1B）</p><p><img src="https://s1.vika.cn/space/2025/03/02/0140829a5dc148aea9965f21b93efd9b" alt="image-20250212141333560"></p></li></ul></li><li><p><strong>差错检测（重要）</strong></p><ul><li><strong>可分为两大类</strong>：有<strong>比特差错</strong>（1变0，0变1）；无比特差错，但却出现了<strong>帧丢失、帧重复或帧失序</strong>。</li></ul><p>在一段时间内，传输错误的比特占所传输比特总数的比率称为<strong>误码率BER(Bit Error Rate)</strong>。例如，误码率为10^-10^时，表示平均每传送10^10^个比特就会出现一个比特的差错。</p><p>误码率与信噪比有很大的关系。如果设法提高信噪比，就可以使误码率减小。实际的通信链路并非是理想的，它不可能使误码率下降到零。因此，为了保证数据传输的可靠性，必须采用各种差错检测措施。目前在数据链路层广泛使用了<strong>循环冗余检验CRC(Cyclic Redundancy Check)</strong>的检错技术。</p><ul><li><p><strong>循环冗余检验 CRC,帧检验序列 FCS</strong>(Frame Check Sequence)</p><p><img src="https://s1.vika.cn/space/2025/03/02/9691fcc284854ffdb7065051ac147ce6" alt="image-20250212145627726"></p><hr></li></ul></li></ul></li></ul><pre><code>  ![image-20250212145357836](https://s1.vika.cn/space/2025/03/02/aa642aa3445b42e3b1a13f9160561611)  ---  ![image-20250212145845742](https://s1.vika.cn/space/2025/03/02/bafa3317f8004829aa0a2336597a3295)  ---  ![image-20250212150049939](https://s1.vika.cn/space/2025/03/02/20416c63c5294e0faf605826f3736660)</code></pre><h3 id="点对点协议PPP（重要，待补充）"><a href="#点对点协议PPP（重要，待补充）" class="headerlink" title="点对点协议PPP（重要，待补充）"></a>点对点协议PPP（重要，待补充）</h3><p><img src="https://s1.vika.cn/space/2025/03/02/6c8430b475ae4626b0cb0997b2f18ec4" alt="image-20250212150604934"></p><h4 id="PPP协议的特点"><a href="#PPP协议的特点" class="headerlink" title="PPP协议的特点"></a>PPP协议的特点</h4><ul><li><p><strong>应满足的需求：</strong></p><p><strong>简单、封装成帧、透明性、多层网络协议、多种类型链路、差错检测、检测链接状态、最大传送单元、网络层地址协商、数据压缩协商</strong></p></li><li><p><strong>组成：</strong></p><ul><li>一个将IP数据报封装到串行链路的方法。</li><li>一个用来建立、配置和测试数据链路连接的<strong>链路控制协议LCP</strong>(Link Control Protocol)。</li><li>一套<strong>网络控制协议NCP</strong>(Network Control Protocol),其中的每一个协议支持不同的网络层协议，如IP、OSI的网络层、DECnet和AppleTalk等。</li></ul></li></ul><h4 id="PPP协议的帧格式"><a href="#PPP协议的帧格式" class="headerlink" title="PPP协议的帧格式"></a>PPP协议的帧格式</h4><p><img src="https://s1.vika.cn/space/2025/03/02/2771604afc5f4982bb13f22cc1882fd3" alt="image-20250212154219246"></p><ul><li><p>协议字段:0x0021,IP数据报；0xC021，LCP数据</p></li><li><p>字节填充</p></li><li><p>零比特填充</p><p><img src="https://s1.vika.cn/space/2025/03/02/a9ffd606fad444e4a8136176c096776d" alt="image-20250212155052781"></p></li></ul><h4 id="PPP协议的工作状态"><a href="#PPP协议的工作状态" class="headerlink" title="PPP协议的工作状态"></a>PPP协议的工作状态</h4><p><img src="https://s1.vika.cn/space/2025/03/02/ac4f726e4740452384b5c3c7c3920331" alt="image-20250212155318717"></p><h3 id="使用广播信道的数据链路层（重要，待补充）"><a href="#使用广播信道的数据链路层（重要，待补充）" class="headerlink" title="使用广播信道的数据链路层（重要，待补充）"></a>使用广播信道的数据链路层（重要，待补充）</h3><h3 id="拓展的以太网"><a href="#拓展的以太网" class="headerlink" title="拓展的以太网"></a>拓展的以太网</h3><h3 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h3><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p><strong>网络层不提供服务质量的承诺。</strong></p><ul><li><strong>两个服务：</strong></li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/d4b89e04f9b54909852ab9870b6c8384" alt="image-20250212162205325"></p><hr><p><img src="https://s1.vika.cn/space/2025/03/02/6eb570e7747b4960be4bba396f58915e" alt="image-20250212162235520"></p><ul><li><p><strong>两个层面：</strong></p><p><img src="https://s1.vika.cn/space/2025/03/02/af373c8924cc455898b74d59a94daef5" alt="image-20250212162522780"></p></li><li><p><strong>软件定义网络 SDN（Software Defined Network）</strong></p><p><img src="https://s1.vika.cn/space/2025/03/02/9230ac08ac7d4bf28a7ec8b67d6efea3" alt="image-20250212162626937"></p></li></ul><h3 id="网际协议-IP"><a href="#网际协议-IP" class="headerlink" title="网际协议 IP"></a>网际协议 IP</h3><p>网际协议 IP (Internet Protocol)是TCP/IP体系中两个最主要的协议之，也是最重要的互联网标准协议之一。</p><ul><li><p>与协议 IP 配套使 用的还有 三个协议：</p><ul><li><p><strong>地址解析协议 ARP (Address Resolution Protocol)</strong> </p></li><li><p><strong>网际控制 报文协议 ICMP ( Internet Control Message Protocol)</strong> </p></li><li><p><strong>网际组管理协议 IGMP (Internet Group Management Protocol)</strong></p></li></ul></li></ul><p>​    <img src="https://s1.vika.cn/space/2025/03/02/32d45f3af04a4da29a6553ffed46ec4e" alt="image-20250212163624353"></p><h4 id="虚拟互联网络"><a href="#虚拟互联网络" class="headerlink" title="虚拟互联网络"></a>虚拟互联网络</h4><ul><li>将网络互相连接起来要使用一些<strong>中间设备</strong>。<ul><li>物理层使用的中间设备叫作<strong>转发器(repeater)</strong>。</li><li>数据链路层使用的中间设备叫作<strong>网桥</strong>或<strong>桥接器(bridge)</strong>，以及<strong>交换机(switch)</strong>。</li><li>网络层使用的中间设备叫作<strong>路由器(router）</strong></li><li>在网络层以上使用的中间设备叫作<strong>网关(gateway)</strong>。    </li></ul></li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/386f7cd005ff4153a56689bd947b00d8" alt="image-20250212164228968"></p><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p><img src="https://s1.vika.cn/space/2025/03/02/a17edb9a34804b6d8642984dd58fff3f" alt="image-20250212164722574"></p><ul><li><p><strong>IP地址：｛＜网络号＞，＜主机号＞｝</strong></p><p><img src="https://s1.vika.cn/space/2025/03/02/03329aca8a1940909fba1537c36378e3" alt="image-20250212164941014"></p></li><li><p>IP地址指明了<strong>连接到某个网络上的一个主机</strong>（或路由器）。</p></li><li><p>分类:</p><p><img src="https://s1.vika.cn/space/2025/03/02/f47267d85675453985256c49772e6568" alt="image-20250212165059987"></p><ul><li><p>第一，网络号为全0的IP地叮有特殊的用途，它表示<strong>“本网络”</strong>；</p></li><li><p>第二，网络号为127（即01111111)保留作为本地软件<strong>环回测试(loopback test)</strong>本主机的进程之间的通信之用。</p><p><img src="https://s1.vika.cn/space/2025/03/02/97ad8f94006b4a0087040021be94418d" alt="image-20250212165540549"></p></li></ul></li><li><p><strong>无分类编 址 CIDR</strong></p><ul><li>网络前缀</li><li>地址块</li><li>地址掩码（子网掩码）</li></ul></li></ul><p>​    <img src="https://s1.vika.cn/space/2025/03/02/6f979b00b84f49e08fd8b5dd73f7a10c" alt="image-20250212170042760"></p><p>A类网络，地址掩码为255.0.0.0或255.0.0.0/8</p><p>B类网络，地址掩码为255.255.0.0或255.255.0.0/16</p><p>C类网络，地址掩码为255.255.255.0或255.255.255.0/24</p><hr><p><strong>网络前缀越短的地址块所包含的地址数就越多</strong>。</p><p><img src="https://s1.vika.cn/space/2025/03/02/170a5af41173495bbf4473093d1d2437" alt="image-20250212170619781"></p><h4 id="IP地址与MAC地址"><a href="#IP地址与MAC地址" class="headerlink" title="IP地址与MAC地址"></a>IP地址与MAC地址</h4><p>在局域网中，由于MAC地址已固化在网卡上的ROM中，因此常常将MAC地址称为<strong>硬件地址</strong>或<strong>物理地址</strong>。</p><p><img src="https://s1.vika.cn/space/2025/03/02/4b4d49f60ff24d08bb841d6202923895" alt=""></p><hr><p><img src="https://s1.vika.cn/space/2025/03/02/2b42b44214af480daf158b6c7c767eeb" alt="image-20250212171124207"></p><h4 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h4><p>已经知道了一个机器（主机或路由器）的IP地址，需要找出其相应的MAC地址。</p><p><img src="https://s1.vika.cn/space/2025/03/02/98b7538b6ea34ec08397f8d42eb97850" alt="image-20250212171352158"></p><ul><li>工作原理：</li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/d6f400c8493a43ebb04cca638c0be6ff" alt="image-20250212171503916"></p><ul><li><p>四种典型情况：</p><ul><li>H主机，N网络，R路由器</li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/e347c404e9ec45d4b20801677615f2ca" alt="image-20250212171725361"></p></li></ul><ol><li>H1到H2</li><li>H1到H3</li><li>R1到H3</li><li>R1到H4</li></ol><h4 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h4><p><img src="https://s1.vika.cn/space/2025/03/02/8823e2e8a6b3488c8f4e05d8b6f42c18" alt="image-20250212172228425"></p><h3 id="IP层转发分组的过程"><a href="#IP层转发分组的过程" class="headerlink" title="IP层转发分组的过程"></a>IP层转发分组的过程</h3><h3 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a>网际控制报文协议 ICMP</h3><h3 id="IPV6"><a href="#IPV6" class="headerlink" title="IPV6"></a>IPV6</h3><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h2 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h2><h2 id="互联网上的音频-视频服务"><a href="#互联网上的音频-视频服务" class="headerlink" title="互联网上的音频/视频服务"></a>互联网上的音频/视频服务</h2><h2 id="无线网络和移动网络"><a href="#无线网络和移动网络" class="headerlink" title="无线网络和移动网络"></a>无线网络和移动网络</h2><h2 id="英文缩写"><a href="#英文缩写" class="headerlink" title="英文缩写"></a>英文缩写</h2><ul><li><strong>国际标准化组织ISO</strong></li><li><p><strong>开放系统互连基本参考模型OSI/RM</strong>(Open Systems Interconnection Reference Model)，简称为<strong>OSI</strong>。</p></li><li><p><strong>帧检验序列 FCS</strong>(Frame Check Sequence)</p></li></ul><p>[COME0 6]:</p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向-反调试</title>
      <link href="/2025/03/02/%E9%80%86%E5%90%91-%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
      <url>/2025/03/02/%E9%80%86%E5%90%91-%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="反调试技术-部分"><a href="#反调试技术-部分" class="headerlink" title="反调试技术(部分)"></a>反调试技术(部分)</h1><ul><li><p>动态调试是一种观察程序运行状态的一种手段。</p></li><li><p>逆向工程中的动态调试的目的主要有：验证静态分析结果和观察程序运行时的数据。</p></li><li><p>而为了防止我们对程序进行调试，程序开发者通常会设置反调试来检测自己开发的程序是否正在被调试。</p></li><li><p>花指令通常干扰静态分析；反调试与之相反，主要为了干扰动态调试</p></li></ul><h2 id="API反调试"><a href="#API反调试" class="headerlink" title="API反调试"></a>API反调试</h2><p>Windows内部提供了一些用于检测调试器的<strong>API</strong></p><p>基于<strong>PEB</strong>（Process Environment Block，进程环境块）的静态反调试，存放进程信息的一个结构体</p><p><strong>TEB</strong> （Thread Environment Block，线程环境块）结构体，进程中的每一个线程都对应着一个TEB结构体</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kd&gt;dt_TEB</span><br><span class="line">nt! _TEB</span><br><span class="line">...</span><br><span class="line">+<span class="number">0</span>x030 ProcessEnvironmentBlock :Ptr32_PEB</span><br><span class="line">...</span><br><span class="line">kd&gt;dt_TEB</span><br><span class="line">...</span><br><span class="line">+<span class="number">0</span>x002 BeingDebugged:UChar</span><br><span class="line">...</span><br><span class="line">+Ox018 ProcessHeap:Ptr32 Void</span><br><span class="line">...</span><br><span class="line">+<span class="number">0</span>x068 NtGlobalF1ag:Uint4B</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PEB结构体中中，<code>BeingDebugged</code>、<code>ProcessHeap</code>、<code>NtGlobalFlag</code>是与调试信息相关</p><ul><li><p><code>BeingDebugged</code>:当进程处于被调试状态时，值为1，否则为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov eax,dword ptr fs:[18];          //获取TEB地址,AddressOfTEB</span><br><span class="line">mov eax,dword ptr ds:[eax+30];    //通过TEB获取PEB的地址,AddressOfPEB</span><br><span class="line">mov eax byte ptr da:[eax+2];        //获取PEB偏移为2的结构体元素BeginDebugged，并返回这个值</span><br><span class="line">retn</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>ProcessHeap</code>:指向Heap结构体，偏移0xC处为<code>Flags</code>成员，偏移0x10处为<code>ForceFlags</code>成员。</p><p>通常情况下，<code>Flags</code>的值为2，<code>ForceFlags</code>的值为0，当进程被调试时会发生改变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov eax,dword ptr fs:[0x18];     //TEB的起始地址</span><br><span class="line">mov eax,dword ptr ds:[eax+30];   //PEB的地址</span><br><span class="line">mov eax,dword ptr ds:[eax+18];   //PEB.Processheap的地址</span><br></pre></td></tr></table></figure></li></ul><ul><li><code>NGlobalFlag</code>:占四个字节，默认值为0。当进程处于被调试状态时，第一个字节会被置为0x70。</li></ul><hr><h3 id="IsDebuggerPresent"><a href="#IsDebuggerPresent" class="headerlink" title="IsDebuggerPresent()"></a>IsDebuggerPresent()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">IsDebuggerPresent</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>返回值为1表示当前进程被调试的状态，反之为0.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call IsDebuggerPresent</span><br><span class="line">test al, al</span><br><span class="line">jne being_debugged</span><br></pre></td></tr></table></figure><p>当程序处于3环(低权限)时， <code>FS:[0]</code> 寄存器指向<strong>TEB</strong>，<strong>TEB</strong>向后偏移0x30字节<code>FS[0x30h]</code>的位置保存的是<strong>PEB</strong>结构体的地址。</p><p>在 PEB 0x2 偏移处存储的是一字节长度的 <code>BeingDebugged</code> 标志位,</p><p><code>IsDebuggerPresent</code>函数本质是读取该进程对应 PEB 的 <code>BeingDebugged</code> 标志位并返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov eax,dword ptr fs:[18];          //获取TEB地址,AddressOfTEB</span><br><span class="line">mov eax,dword ptr ds:[eax+30];    //通过TEB获取PEB的地址,AddressOfPEB</span><br><span class="line">mov eax byte ptr da:[eax+2];        //获取PEB偏移为2的结构体元素BeginDebugged，并返回这个值</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2025/03/02/f7a8bffdafcc409e91cb85f3ceb81a96" alt="6ded46482d53190075b609d8596b2218"></p><ul><li>绕过方法<ul><li>只需要将PEB 0x2偏移处的结构体元素<code>BeingDebugged</code>标志设为<code>0</code>即可 (或改变一下返回值)</li><li>把判断<code>je</code>改为<code>jne</code></li></ul></li></ul><hr><h3 id="CheckRemoteDebuggerPresent"><a href="#CheckRemoteDebuggerPresent" class="headerlink" title="CheckRemoteDebuggerPresent()"></a>CheckRemoteDebuggerPresent()</h3><p>另一个常用的<strong>API</strong>是<code>CheckRemoteDebuggerPresent</code>，返回值为1表示当前进程被调试的状态，反之为0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL WINAPI <span class="title function_">CheckRemoteDebuggerPresent</span><span class="params">(</span></span><br><span class="line"><span class="params">  _In_    HANDLE hProcess,</span></span><br><span class="line"><span class="params">  _Inout_ PBOOL  pbDebuggerPresent</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>如果调试器存在 (通常是检测自己是否正在被调试), 该函数会将<code>pbDebuggerPresent</code>指向的值设为<code>0xffffffff</code></p><p>函数在判断 <code>hProcess</code>不是 0 以及检查输出参数指针是否为<code>NULL</code> 后就调用了 <code>NtQueryInformationProcess</code>函数</p><p><img src="https://s1.vika.cn/space/2025/03/02/2af96753bbe9438e957d19b322d406f2" alt="b057599fb76ceaed483d0eb9a3e16daf"></p><hr><h3 id="NtQueryInformationProcess"><a href="#NtQueryInformationProcess" class="headerlink" title="NtQueryInformationProcess()"></a>NtQueryInformationProcess()</h3><p>检索有关指定进程的信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__kernel_entry NTSTATUS <span class="title function_">NtQueryInformationProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]            HANDLE           ProcessHandle,</span></span><br><span class="line"><span class="params">  [in]            PROCESSINFOCLASS ProcessInformationClass,</span></span><br><span class="line"><span class="params">  [out]           PVOID            ProcessInformation,</span></span><br><span class="line"><span class="params">  [in]            ULONG            ProcessInformationLength,</span></span><br><span class="line"><span class="params">  [out, optional] PULONG           ReturnLength</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>参数解释：<br>ProcessHandle：要为其检索信息的进程句柄。<br>ProcessInformationClass：要检索的进程信息的类型。<br>ProcessInformation：指向调用应用程序提供的缓冲区的指针，函数将请求的信息写入其中。 写入的信息的大小因 ProcessInformationClass 参数的数据类型而异。<br>ProcessInformationLength：指向的缓冲区的大小（以字节为单位）。<br>ReturnLength：指向变量的指针，其中函数返回所请求信息的大小。 如果函数成功，则这是 由 ProcessInformation 参数指向的缓冲区中写入的信息的大小 (如果缓冲区太小，则为成功接收信息) 所需的最小缓冲区大小。</p></blockquote><hr><h2 id="进程名反调试"><a href="#进程名反调试" class="headerlink" title="进程名反调试"></a>进程名反调试</h2><h3 id="CreateToolhelp32Snapshot"><a href="#CreateToolhelp32Snapshot" class="headerlink" title="CreateToolhelp32Snapshot()"></a>CreateToolhelp32Snapshot()</h3><p>遍历当前系统中的进程列表，检测是否存在与调试器相关的进程名</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否存在指定的调试器进程</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsDebuggerProcessRunning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* debuggerNames[] = &#123; <span class="string">&quot;ollydbg.exe&quot;</span>, <span class="string">&quot;x64dbg.exe&quot;</span>, <span class="string">&quot;ida.exe&quot;</span>, <span class="string">&quot;windbg.exe&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建进程快照</span></span><br><span class="line">    HANDLE hSnapshot = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PROCESSENTRY32 pe32;</span><br><span class="line">    pe<span class="number">32.</span>dwSize = <span class="built_in">sizeof</span>(PROCESSENTRY32);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历进程列表</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Process32First</span>(hSnapshot, &amp;pe32)) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历已知的调试器名称</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; debuggerName : debuggerNames) &#123;</span><br><span class="line">                <span class="comment">// 将进程名转换为小写以进行匹配</span></span><br><span class="line">                std::string processName = pe<span class="number">32.</span>szExeFile;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; c : processName) c = <span class="built_in">tolower</span>(c);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (processName == debuggerName) &#123;</span><br><span class="line">                    <span class="built_in">CloseHandle</span>(hSnapshot);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 找到匹配的调试器进程</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hSnapshot, &amp;pe32));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseHandle</span>(hSnapshot);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 未找到调试器进程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">IsDebuggerProcessRunning</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Debugger process detected! Exiting...\n&quot;</span>;</span><br><span class="line">        <span class="built_in">ExitProcess</span>(<span class="number">1</span>);  <span class="comment">// 检测到调试器，退出程序</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;No debugger detected.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常程序逻辑</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Program is running.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>调试器进程名列表</strong>：在<code>debuggerNames</code>数组中列出了常见的调试器进程名（如<code>ollydbg.exe</code>, <code>x64dbg.exe</code>等）。可以根据需要添加更多的调试器进程名。</li><li><strong>CreateToolhelp32Snapshot</strong>：这是一个Windows API，用于创建系统中所有进程的快照，以便遍历这些进程。</li><li><strong>Process32First 和 Process32Next</strong>：这些函数用于遍历进程快照中的每一个进程。</li><li><strong>tolower</strong>：为了匹配时忽略大小写，将进程名全部转换为小写进行比较。</li><li><strong>ExitProcess</strong>：如果发现调试器进程，程序直接退出。</li><li>这种方法可以用来检测外部调试器是否正在运行，但它不是百分之百可靠，因为高级调试器可能会通过修改进程名或隐藏自己来规避检测。</li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p><strong>Fuko’s starfish</strong></p><p>一个很典的 windows exe 逆向，考察基本的 dll 程序调试，windows 常见反调试和常见花指令。</p><p>程序开始时，在挂载 dll 的同时启动一个线程函数(dll中)。</p><p><img src="https://s1.vika.cn/space/2025/03/02/25961323f83d4817b32bd8a1f9451078" alt="PixPin_2025-03-02_15-56-09"></p><p><img src="https://s1.vika.cn/space/2025/03/02/54305d39f3d141859a129bf8f95e13a6" alt="PixPin_2025-03-02_16-25-37"></p><p>在 exe 初始化和加载 dll 的过程中都会加载一个全局对象，在全局对象的构造函数中设置了一个反调试。</p><p><img src="https://s1.vika.cn/space/2025/03/02/2d6396e4e923497c84921508e009a1dc" alt="PixPin_2025-03-02_15-47-05"></p><p><img src="https://s1.vika.cn/space/2025/03/02/849742c1addf4a4d9eebb3984b42b5f7" alt="PixPin_2025-03-02_15-47-50"></p><p>这里只需要 <code>patch</code> 掉 <code>push rax</code> 到<code>pop rax</code> 的代码就能看到真实逻辑。</p><p><img src="https://s1.vika.cn/space/2025/03/02/1cf7912061824e31b311a112b9df4c94" alt="PixPin_2025-03-02_15-48-34"></p><p><img src="https://s1.vika.cn/space/2025/03/02/c0b5398aa78d46c0ab968be261e541d9" alt="PixPin_2025-03-02_15-49-37"></p><p>反调试<code>IsDebuggerpersent()</code></p><p><img src="https://s1.vika.cn/space/2025/03/02/622571235f5a43ca92e9816cd4124760" alt="PixPin_2025-03-02_15-50-15"></p><p>用<code>keypatch</code>把<code>jz</code>改为<code>jez</code>，或直接改成<code>jmp</code></p><p><img src="https://s1.vika.cn/space/2025/03/02/c75a68e049124cc795b46aed349d8d47" alt="PixPin_2025-03-02_15-51-19"></p><p><img src="https://s1.vika.cn/space/2025/03/02/98032a5617bd490e8a6c09b06410b6a9" alt="PixPin_2025-03-02_15-52-01"></p><p>对密钥进行了初始化。这里开始的初始化是个障眼法，在花指令后继续更新了密钥，可以看到在后面还有一段更新密钥的代码。</p><p><img src="https://s1.vika.cn/space/2025/03/02/e03f512607fe4b56890e47c829ca4107" alt="PixPin_2025-03-02_20-17-11"></p><p>然后玩过游戏后，进入加密逻辑。这里其实就是一个标准 <code>aes-ecb</code> 加密算法。唯一需要注意的是，在密钥扩展前，会对<code>key</code> 进行最后的操作。如果在调试状态，则会输出<code>hmm...</code>，如果不在调试状态，则会将密钥异或 <code>0x17</code>。</p><p><img src="https://s1.vika.cn/space/2025/03/02/4e8c551477e343fa9063d8620e0815a9" alt="PixPin_2025-03-02_16-12-43"></p><ul><li>CreateToolhelp32Snapshot()</li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/54305d39f3d141859a129bf8f95e13a6" alt="PixPin_2025-03-02_16-25-37"></p><ul><li>CheckRemoteDebuggerPresent()</li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/620127b59b414415a271e2c9335c3b46" alt="PixPin_2025-03-02_20-34-08"></p><p>首先获取正确的 key：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">16</span>];  <span class="comment">// 定义一个长度为16的数组来存储密钥</span></span><br><span class="line">    srand(<span class="number">114514</span>);          <span class="comment">// 初始化随机数种子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">        key[i] = <span class="number">0x17</span> ^ (rand() % <span class="number">0xff</span>);  <span class="comment">// 生成密钥的每个字节</span></span><br><span class="line">        <span class="keyword">if</span> (key[i] &lt; <span class="number">16</span>) <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);    <span class="comment">// 如果小于16，补0</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>, key[i]);             <span class="comment">// 打印密钥字节</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 程序正常结束</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 09e5fdeb683175b6b13b840891eb78d2</span></span><br></pre></td></tr></table></figure><p>然后拿到密文，进行 <code>aes-ecb</code> 解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">hex_key = <span class="string">&quot;09e5fdeb683175b6b13b840891eb78d2&quot;</span></span><br><span class="line">hex_ciphertext = <span class="string">&quot;3d011c190ba090815f672731a89aa47497362167ab2eb4a09418d37d93e646e7&quot;</span></span><br><span class="line">key = binascii.unhexlify(hex_key)</span><br><span class="line">ciphertext = binascii.unhexlify(hex_ciphertext)</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">decrypted = cipher.decrypt(ciphertext)</span><br><span class="line"><span class="built_in">print</span>(decrypted)</span><br><span class="line"><span class="comment"># b&quot;VNCTF&#123;W0w_u_g0t_Fuk0&#x27;s_st4rf1sh&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><p><a href="https://ctf-wiki.org/reverse/platform/windows/anti-debug/example/">反调试技术例题 - CTF Wiki</a></p><p><a href="https://www.cnblogs.com/PaperPlaneFly/p/18474056">逆向常见反调试合集 - 纸飞机低空飞行 - 博客园</a></p><p><a href="https://blog.csdn.net/qq_73985089/article/details/131394834">【CTF-Reverse】IDA动态调试，反调试技术_ida 动态调试-CSDN博客</a></p><p><a href="https://www.bilibili.com/list/watchlater?oid=114002474572402&amp;bvid=BV1WAKMevE6W&amp;spm_id_from=333.1007.top_right_bar_window_view_later.content.click">【第拾期 REVERSE 分享会】VNCTF2025-REVERSE 出题人集结！哔哩哔哩视频</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 逆向 </tag>
            
            <tag> 反调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向-手动脱壳</title>
      <link href="/2025/02/22/%E9%80%86%E5%90%91-%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/"/>
      <url>/2025/02/22/%E9%80%86%E5%90%91-%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="手动脱壳"><a href="#手动脱壳" class="headerlink" title="手动脱壳"></a>手动脱壳</h1><h2 id="单步跟踪法"><a href="#单步跟踪法" class="headerlink" title="单步跟踪法"></a>单步跟踪法</h2><p>单步跟踪法的原理就是通过单步(F8)、单步进入(F7)和运行到(F4)功能，<strong>完整走过程序的自脱壳过程</strong>，跳过一些循环恢复代码的片段，并用单步进入确保程序不会略过OEP。这样可以在软件自动脱壳模块运行完毕后，到达OEP，并dump程序。</p><h2 id="ESP定律法"><a href="#ESP定律法" class="headerlink" title="ESP定律法"></a>ESP定律法</h2><p>ESP定律法是脱壳的利器，是应用频率最高的脱壳方法之一。</p><p>ESP定律的原理在于程序中<strong>堆栈平衡</strong>的合理利用。由于在程序自解密或者自解压过程中，不少壳会先将当前寄存器内容压栈，如使用pushad，在解压结束后，会将之前的寄存器值出栈，如使用popad。因此在寄存器出栈时，往往程序代码被自动恢复，此时硬件断点触发。然后在程序当前位置，只需要少许单步跟踪，就很容易到达正确的OEP位置。</p><h2 id="内存镜像法-二次断点法"><a href="#内存镜像法-二次断点法" class="headerlink" title="内存镜像法(二次断点法)"></a>内存镜像法(二次断点法)</h2><p>内存镜像法是在加壳程序被加载时，通过OD的ALT+M快捷键，进入到程序虚拟内存区段。然后通过加两次内存一次性断点，到达程序正确OEP的位置。</p><p>内存镜像法的原理在于对于程序资源段和代码段下断点，一般程序自解压或者自解密时，会首先访问资源段获取所需资源，然后在自动脱壳完成后，转回程序代码段。这时候下内存一次性断点，程序就会停在OEP处。</p><h2 id="一步到达OEP"><a href="#一步到达OEP" class="headerlink" title="一步到达OEP"></a>一步到达OEP</h2><p>所谓的一步到达OEP的脱壳方法，是根据所脱壳的特征，寻找其距离OEP最近的一处汇编指令，然后下int3断点，在程序走到OEP的时候dump程序。如一些压缩壳往往popad指令距离OEP或者Magic Jump特别近，因此使用Ollydbg的搜索功能，可以搜索壳的特征汇编代码，达到一步断点到达OEP的效果。</p><h2 id="最后一次异常法"><a href="#最后一次异常法" class="headerlink" title="最后一次异常法"></a>最后一次异常法</h2><p>最后一次异常法的原理是，程序在自解压或自解密过程中，可能会触发无数次的异常。如果能定位到最后一次程序异常的位置，可能就会很接近自动脱壳完成位置。现在最后一次异常法脱壳可以利用Ollydbg的异常计数器插件，先记录异常数目，然后重新载入，自动停在最后一次异常处。</p><h2 id="模拟跟踪法"><a href="#模拟跟踪法" class="headerlink" title="模拟跟踪法"></a>模拟跟踪法</h2><p>模拟跟踪法的原理就是使用Ollydbg下条件断点，SFX相当于是一个自解压段，在自解压段结束时(eip的值转到代码段时)，已经距离OEP很近，但是这种跟踪方法会比较耗时。</p><h2 id="“SFX”法"><a href="#“SFX”法" class="headerlink" title="“SFX”法"></a>“SFX”法</h2><p>“SFX”法利用了Ollydbg自带的OEP寻找功能，可以选择直接让程序停在OD找到的OEP处，此时自解压已经完成，可以直接dump程序。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://ctf-wiki.org/reverse/platform/windows/unpack/packer-introduction/">保护壳简介 - CTF Wiki</a></p><p><a href="https://www.bilibili.com/video/BV14srVYbES2/?spm_id_from=333.337.search-card.all.click&amp;vd_source=2c4148ac928a1b2447f3d8c80156c3c4">逆向手动脱壳教程_哔哩哔哩_bilibili</a></p><p><a href="https://bbs.kanxue.com/thread-268159.htm">原创] 借助 x64dbg 的 UPX 手工脱壳-加壳脱壳-看雪</a></p><p><a href="https://www.cnblogs.com/5315hejialei/p/7060315.html">逆向脱壳——脱壳后的修复 - 君知らない - 博客园</a></p><p><a href="https://xz.aliyun.com/news/14618?time__1311=eqUxuiiti%3DD%3DKDKG%3DD%2FGnbq4mEmtdKaq4D&amp;u_atoken=bcaefee4d96fbdca5e8e19fecb51ed62&amp;u_asig=0a47314717402179718923288e0044">文章 - Windows逆向之脱壳-IAT修复 - 先知社区</a></p><p><a href="https://www.cnblogs.com/LyShark/p/13731329.html">PE格式：手工实现各种脱壳后的修复 - lyshark - 博客园</a></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>查壳，UPX壳，64位</p><p><img src="https://s1.vika.cn/space/2025/02/19/8e2f2b6cce8a41c09136df9b2565a08c" alt="PixPin_2025-02-19_18-07-31"></p><p>试着运行一下</p><p><img src="https://s1.vika.cn/space/2025/02/19/8f616b1346004984859654dabc7e94ce" alt="PixPin_2025-02-19_18-16-40"></p><p>用x64dbg打开，打开断点查看，可以看到x64dbg自动为我们设置了几个断点，其中第三个断点是我们的入口断点</p><p>我们可以删除前两个断点，只保留入口断点</p><p><img src="https://s1.vika.cn/space/2025/02/22/67a251b612a548bc869e00a60e1da138" alt="PixPin_2025-02-22_16-23-08"></p><p>然后直接按<code>F9</code>运行，到<code>push rbx</code>断点处，此时栈顶<code>RSP D8EA8FFB88</code></p><p><img src="https://s1.vika.cn/space/2025/02/22/d6293e0f51e54b93993bc83e0a0be3dc" alt="PixPin_2025-02-22_16-33-52"></p><p>接着按<code>F8</code>步过，把<code>rbx</code>压入栈，栈顶<code>RBP D8EAFFB80</code></p><p><img src="https://s1.vika.cn/space/2025/02/22/c48f40d743d640aeb5a3663eab0886a1" alt="PixPin_2025-02-22_16-36-53"></p><p>在<code>RSP</code>处下硬件断点，因为是64位程序，所以选4字节</p><p><img src="https://s1.vika.cn/space/2025/02/22/8a07497ce6dc41c69a44e24d973ee8dd" alt="PixPin_2025-02-22_16-39-30"></p><p><img src="https://s1.vika.cn/space/2025/02/22/ac442fa8deba49ddae2ad537fd95def9" alt="PixPin_2025-02-22_16-40-59"></p><p>按<code>F9</code>运行到硬件断点，可以发现已经<code>pop rbx</code>，当前面出现了一点麻烦，因为前面有一个回跳，不知道要执行多少次</p><p><img src="https://s1.vika.cn/space/2025/02/22/44317ef33b724caa996fe7ecc3e3b4e4" alt="PixPin_2025-02-22_16-47-36"></p><p>接着可以，按<code>F8</code>运行到<code>cmp</code>处，在<code>jne</code>下面一行下一个断点，选中那一行，按<code>F4</code>运行到选区，即可解决回跳</p><p><img src="https://s1.vika.cn/space/2025/02/22/4b9e333d0b374b3e8c6270c28c169032" alt="PixPin_2025-02-22_16-54-31"></p><p>此时，前面又有一个<code>Jmp</code>，但发现是一个大跳转（一般小跳转左边会显示跳转到哪的虚线，如前面那个回跳）</p><p>但一般出现大跳转，那么一般就是程序的入口了（OEP）,但不一定，也许是后面出现的大跳转，具体是怎么回事之后在弄清楚</p><p>接着按<code>F7</code>步入<code>jmp</code>，选择x64dbg自带的插件-scylla，可惜的是我的没有自带，于是到github下了一个，注意改好OEP,直接dump就行</p><p><img src="https://s1.vika.cn/space/2025/02/22/2c8eb35baa804a20908856eaf68af5b8" alt="PixPin_2025-02-22_17-26-04"></p><p>dump后的程序可能不能直接运行，需要修复IAT（导入表），但可以用IDA反编译</p><ul><li>UPX加壳之前的样子，再用<code>upx -d</code>之后打开也是原样</li></ul><p><img src="https://s1.vika.cn/space/2025/02/22/94f459c94ca6470692936b09b6616f24" alt="image-20250216145937992"></p><ul><li>UPX加壳后手动脱壳的样子（没有修复导入表IAT）</li></ul><p><img src="https://s1.vika.cn/space/2025/02/22/32e27afcb33f489d9838e98b9957d48b" alt="PixPin_2025-02-22_17-38-42"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[2019红帽杯]childRE</title>
      <link href="/2025/02/22/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-childRE/"/>
      <url>/2025/02/22/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-childRE/</url>
      
        <content type="html"><![CDATA[<h1 id="2019红帽杯-childRE"><a href="#2019红帽杯-childRE" class="headerlink" title="[2019红帽杯]childRE"></a>[2019红帽杯]childRE</h1><p>64位，无壳</p><p><img src="https://s1.vika.cn/space/2025/02/22/94f459c94ca6470692936b09b6616f24" alt="image-20250216145937992"></p><p>动态调试一下，发现没用，inputString是根据我们的输入形成的，但是错的（全0），没用；</p><p>有点绕，幸亏学了些数论，密码学，不然可能不会往这方面想</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s[a[i] % 23] = b[i]</span><br><span class="line">s[a[i] / 23] = c[i]</span><br><span class="line"></span><br><span class="line">a[i] % 23 ==&gt; x(商) ==&gt;index(b[i])</span><br><span class="line">a[i] / 23 ==&gt; y(余数)==&gt;index(c[i])</span><br><span class="line"></span><br><span class="line">a[i] / 23 = a[i] % 23 + d(余数) </span><br><span class="line">==&gt; a[i] = (a[i] % 23) * 23 + d</span><br><span class="line">==&gt; a[i] = index(b[i]) * 23 + index(c[i])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把inputString[v14]推出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">a123 = [</span><br><span class="line">  <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, </span><br><span class="line">  <span class="number">0x2D</span>, <span class="number">0x3D</span>, <span class="number">0x21</span>, <span class="number">0x40</span>, <span class="number">0x23</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x5E</span>, <span class="number">0x26</span>, <span class="number">0x2A</span>, </span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x29</span>, <span class="number">0x5F</span>, <span class="number">0x2B</span>, <span class="number">0x71</span>, <span class="number">0x77</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x79</span>, </span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x6F</span>, <span class="number">0x70</span>, <span class="number">0x5B</span>, <span class="number">0x5D</span>, <span class="number">0x51</span>, <span class="number">0x57</span>, <span class="number">0x45</span>, <span class="number">0x52</span>, </span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0x59</span>, <span class="number">0x55</span>, <span class="number">0x49</span>, <span class="number">0x4F</span>, <span class="number">0x50</span>, <span class="number">0x7B</span>, <span class="number">0x7D</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, </span><br><span class="line">  <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x3B</span>, <span class="number">0x27</span>, <span class="number">0x41</span>, </span><br><span class="line">  <span class="number">0x53</span>, <span class="number">0x44</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x4A</span>, <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x3A</span>, <span class="number">0x22</span>, </span><br><span class="line">  <span class="number">0x5A</span>, <span class="number">0x58</span>, <span class="number">0x43</span>, <span class="number">0x56</span>, <span class="number">0x42</span>, <span class="number">0x4E</span>, <span class="number">0x4D</span>, <span class="number">0x3C</span>, <span class="number">0x3E</span>, <span class="number">0x3F</span>, </span><br><span class="line">  <span class="number">0x7A</span>, <span class="number">0x78</span>, <span class="number">0x63</span>, <span class="number">0x76</span>, <span class="number">0x62</span>, <span class="number">0x6E</span>, <span class="number">0x6D</span>, <span class="number">0x2C</span>, <span class="number">0x2E</span>, <span class="number">0x2F</span>, </span><br><span class="line">  <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">a555 = [</span><br><span class="line">  <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x33</span>, <span class="number">0x32</span>, <span class="number">0x35</span>,</span><br><span class="line">  <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x32</span>, <span class="number">0x32</span>, <span class="number">0x32</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x35</span>,</span><br><span class="line">  <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x32</span>, <span class="number">0x34</span>, <span class="number">0x33</span>, <span class="number">0x34</span>,</span><br><span class="line">  <span class="number">0x36</span>, <span class="number">0x36</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x33</span>, <span class="number">0x36</span>, <span class="number">0x36</span>,</span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0x35</span>, <span class="number">0x34</span>, <span class="number">0x34</span>, <span class="number">0x34</span>, <span class="number">0x32</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x35</span>,</span><br><span class="line">  <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x32</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x32</span>,</span><br><span class="line">  <span class="number">0x32</span>, <span class="number">0x32</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">a462 = [</span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x5F</span>, <span class="number">0x40</span>, <span class="number">0x34</span>, <span class="number">0x36</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0x21</span>, <span class="number">0x30</span>, <span class="number">0x38</span>,</span><br><span class="line">  <span class="number">0x21</span>, <span class="number">0x36</span>, <span class="number">0x5F</span>, <span class="number">0x30</span>, <span class="number">0x2A</span>, <span class="number">0x30</span>, <span class="number">0x34</span>, <span class="number">0x34</span>, <span class="number">0x32</span>, <span class="number">0x21</span>,</span><br><span class="line">  <span class="number">0x40</span>, <span class="number">0x31</span>, <span class="number">0x38</span>, <span class="number">0x36</span>, <span class="number">0x25</span>, <span class="number">0x25</span>, <span class="number">0x30</span>, <span class="number">0x40</span>, <span class="number">0x33</span>, <span class="number">0x3D</span>,</span><br><span class="line">  <span class="number">0x36</span>, <span class="number">0x36</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x39</span>, <span class="number">0x37</span>, <span class="number">0x34</span>, <span class="number">0x2A</span>, <span class="number">0x33</span>, <span class="number">0x32</span>,</span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x3D</span>, <span class="number">0x26</span>, <span class="number">0x30</span>, <span class="number">0x5E</span>, <span class="number">0x33</span>, <span class="number">0x26</span>, <span class="number">0x31</span>, <span class="number">0x40</span>,</span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x26</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, <span class="number">0x38</span>, <span class="number">0x21</span>, <span class="number">0x36</span>, <span class="number">0x5F</span>, <span class="number">0x30</span>,</span><br><span class="line">  <span class="number">0x2A</span>, <span class="number">0x26</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inputString = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">62</span>):</span><br><span class="line">    inputString += <span class="built_in">chr</span>(a123.index(a555[i])*<span class="number">23</span> + a123.index(a462[i]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(inputString, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</span></span><br></pre></td></tr></table></figure><p><code>private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</code>不知道有什么用，继续逆推看<code>inputString</code>怎么来的</p><p>AI了一下<code>UnDecorateSymbolName(v5, outputString, 0x100u, 0);</code>,还有微软的解释<a href="[unDecorateSymbolName 函数 (dbghelp.h">unDecorateSymbolName 函数 (dbghelp.h)</a> - Win32 apps | Microsoft Learn](<a href="https://learn.microsoft.com/zh-cn/windows/win32/api/dbghelp/nf-dbghelp-undecoratesymbolname">https://learn.microsoft.com/zh-cn/windows/win32/api/dbghelp/nf-dbghelp-undecoratesymbolname</a>))</p><ul><li><p>v5，输入</p></li><li><p>outinputString，输出</p></li><li><p>100,长度</p></li><li><p>0x0000 对应<code>UNDNAME_COMPLETE</code>,启用完全取消评分</p></li></ul><blockquote><p><code>UnDecorateSymbolName</code> 是一个用于取消修饰 C++ 符号名称的函数，属于 Windows 的 DbgHelp 库。它的主要作用是将经过编译器修饰的符号名称还原为更直观、更易读的形式。</p><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">UnDecorateSymbolName</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"> _In_  PCTSTR DecoratedName,</span></span></span><br><span class="line"><span class="params"><span class="function"> _Out_ PTSTR  UnDecoratedName,</span></span></span><br><span class="line"><span class="params"><span class="function"> _In_  DWORD UnDecoratedLength,</span></span></span><br><span class="line"><span class="params"><span class="function"> _In_  DWORD Flags</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ol><li><strong><code>DecoratedName</code></strong><br>输入参数，表示经过修饰的 C++ 符号名称。修饰的符号通常以问号（<code>?</code>）开头。</li><li><strong><code>UnDecoratedName</code></strong><br>输出参数，指向一个字符串缓冲区，用于存储取消修饰后的符号名称。</li><li><strong><code>UnDecoratedLength</code></strong><br>指定 <code>UnDecoratedName</code> 缓冲区的大小（以字符为单位），必须足够大以容纳取消修饰后的名称。</li><li><strong><code>Flags</code></strong><br>用于控制取消修饰的行为。常见的标志包括：<ul><li><code>UNDNAME_COMPLETE</code>（默认）：完全取消修饰。</li><li><code>UNDNAME_NAME_ONLY</code>：仅取消修饰主声明的名称。</li><li><code>UNDNAME_NO_ACCESS_SPECIFIERS</code>：禁用成员的访问说明符。</li></ul></li></ol><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>如果函数成功，返回值是 <code>UnDecoratedName</code> 缓冲区中的字符数（不包括 NULL 终止符）。</li><li>如果函数失败，返回值为零，可以通过调用 <code>GetLastError</code> 获取更多错误信息。</li></ul><p>以下是一个简单的使用示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;DbgHelp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Dbghelp.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>] = <span class="string">&quot;?getArgumentTypes@UnDecorator@@CG?AVDName@@XZ&quot;</span>;</span><br><span class="line">    <span class="built_in">UnDecorateSymbolName</span>(str, str, <span class="built_in">sizeof</span>(str), UNDNAME_COMPLETE);</span><br><span class="line">    std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>UnDecorateSymbolName</code> 将修饰后的符号名称 <code>?getArgumentTypes@UnDecorator@@CG?AVDName@@XZ</code> 转换为更易读的形式</p></blockquote><p><a href="https://www.jianshu.com/p/c2ff30558284">关于C++名称修饰的解析 - 简书</a></p><p>意思是<code>UnDecorateSymbolName</code>  将<code>?getArgumentTypes@UnDecorator@@CG?AVDName@@XZ</code>(C++ 装饰符号，表示一个函数名)</p><p>会将其取消修饰为更易读的形式。类似于我们推出的<code>private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</code></p><p>搜了一下，C++ 名称修饰的符号规则，有很多不同规则，<a href="https://learn.microsoft.com/en-us/cpp/build/reference/decorated-names?view=msvc-170">装饰名称 |Microsoft 学习</a></p><p>文章最后提到可以使用 undname.exe 将修饰的名称转换为未修饰的形式。此示例显示了它的工作原理：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\&gt;<span class="title">undname</span> ?<span class="title">func1</span>@<span class="title">a</span>@@<span class="title">AAEXH</span>@<span class="title">Z</span></span></span><br><span class="line"><span class="function"><span class="title">Microsoft</span> (<span class="title">R</span>) <span class="title">C</span>++ <span class="title">Name</span> <span class="title">Undecorator</span></span></span><br><span class="line"><span class="function"><span class="title">Copyright</span> (<span class="title">C</span>) <span class="title">Microsoft</span> <span class="title">Corporation</span>. <span class="title">All</span> <span class="title">rights</span> <span class="title">reserved</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Undecoration</span> <span class="title">of</span> :- &quot;?<span class="title">func1</span>@<span class="title">a</span>@@<span class="title">AAEXH</span>@<span class="title">Z</span>&quot;</span></span><br><span class="line"><span class="function"><span class="title">is</span> :- &quot;<span class="title">private</span>: <span class="title">void</span> <span class="title">__thiscall</span> <span class="title">a</span>::<span class="title">func1</span>(<span class="title">int</span>)&quot;</span></span><br></pre></td></tr></table></figure><hr><p><a href="https://www.cnblogs.com/yxysuanfa/p/6984895.html">C++ 编译器的函数名修饰规则 - yxysuanfa - 博客园</a></p><blockquote><p>根据 Microsoft Visual C++ 的名称修饰规则，将 <code>private: char* __thiscall R0Pxx::My_Aut0_PWN(unsigned char*)</code> 转换为修饰后的状态，可以按照以下步骤进行：</p><h3 id="1-类名和成员函数"><a href="#1-类名和成员函数" class="headerlink" title="1. 类名和成员函数"></a>1. <strong>类名和成员函数</strong></h3><ul><li>类名：<code>R0Pxx</code></li><li>成员函数：<code>My_Aut0_PWN</code></li><li>访问修饰符：<code>private</code></li><li>调用约定：<code>__thiscall</code>（默认的类成员函数调用约定）</li></ul><h3 id="2-参数类型"><a href="#2-参数类型" class="headerlink" title="2. 参数类型"></a>2. <strong>参数类型</strong></h3><ul><li>参数：<code>unsigned char*</code></li><li>在 Microsoft Visual C++ 的修饰规则中，<code>unsigned char</code> 通常表示为 <code>E</code>，指针用 <code>PA</code> 表示。</li></ul><h3 id="3-返回类型"><a href="#3-返回类型" class="headerlink" title="3. 返回类型"></a>3. <strong>返回类型</strong></h3><ul><li>返回类型：<code>char*</code></li><li><code>char</code> 表示为 <code>D</code>，指针用 <code>PA</code> 表示。</li></ul><h3 id="4-修饰规则"><a href="#4-修饰规则" class="headerlink" title="4. 修饰规则"></a>4. <strong>修饰规则</strong></h3><ul><li>私有成员函数的修饰符为 <code>@@AAE</code>。</li><li>参数列表以 <code>@Z</code> 结尾。</li></ul><h3 id="5-完整修饰后的名称"><a href="#5-完整修饰后的名称" class="headerlink" title="5. 完整修饰后的名称"></a>5. <strong>完整修饰后的名称</strong></h3><p>根据上述规则，<code>private: char* __thiscall R0Pxx::My_Aut0_PWN(unsigned char*)</code> 的修饰后名称为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;?My_Aut0_PWN@R0Pxx@@AAEPADPEAE@Z</span><br></pre></td></tr></table></figure><h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><ul><li><code>?My_Aut0_PWN@R0Pxx@@</code>：表示类 <code>R0Pxx</code> 的私有成员函数 <code>My_Aut0_PWN</code>。</li><li><code>AAE</code>：表示私有成员函数的修饰符。</li><li><code>PAD</code>：表示返回类型为 <code>char*</code>。</li><li><code>PEAE</code>：表示参数类型为 <code>unsigned char*</code>。</li><li><code>@Z</code>：表示参数列表结束。</li></ul><p>如果需要进一步确认或解析修饰后的名称，可以使用工具如 <code>undname</code> 或 <code>UnDecorateSymbolName</code> API</p></blockquote><hr><p><code>?My_Aut0_PWN@R0Pxx@@AAEPADPEAE@Z</code></p><p>到这里就没头绪了，看了大佬的题解</p><p><a href="https://www.cnblogs.com/Mayfly-nymph/p/11869959.html#childRE">2019 红帽杯 Re WP - Hk_Mayfly - 博客园</a></p><p>弱在了动态调试上，没发现result的变化，按照大佬的方法实际操作了一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz12345&#x27;</span></span><br><span class="line">dec1 = <span class="string">&#x27;7071687273696474756A76776B656278796C7A316D6632336E34356F676361&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">serial = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> dec1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dec1:</span><br><span class="line">    serial.append(str1.index(i))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> serial</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z&#x27;</span></span><br><span class="line">enc = [<span class="string">&#x27;&#x27;</span>] * <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>):</span><br><span class="line">    enc[serial[i]] = name[i]</span><br><span class="line">enc = <span class="string">&#x27;&#x27;</span>.join(enc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> enc</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> md5(enc).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;63b148e750fed3a33419168ac58083f5&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF-Reverse</title>
      <link href="/2025/02/15/BUUCTF-Reverse/"/>
      <url>/2025/02/15/BUUCTF-Reverse/</url>
      
        <content type="html"><![CDATA[<h1 id="红帽杯"><a href="#红帽杯" class="headerlink" title="红帽杯"></a>红帽杯</h1><h2 id="2019红帽杯-Snake"><a href="#2019红帽杯-Snake" class="headerlink" title="[2019红帽杯]Snake"></a>[2019红帽杯]Snake</h2><h1 id="ACTF新生赛"><a href="#ACTF新生赛" class="headerlink" title="ACTF新生赛"></a>ACTF新生赛</h1><h2 id="ACTF新生赛2020-easyre"><a href="#ACTF新生赛2020-easyre" class="headerlink" title="[ACTF新生赛2020]easyre"></a>[ACTF新生赛2020]easyre</h2><ul><li><code>upx -d</code>脱壳</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]easyre.png" alt="alt text"></p><ul><li><code>IDA</code>打开发现只有一个简单的加密，加密后为<code>v4</code>，即<code>*F&#39;\&quot;N,\&quot;(I?+@</code></li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]easyre-1.png" alt="alt text"><br><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]easyre-2.png" alt="alt text"></p><ul><li><code>shift+E</code>提取数据，编写python解密</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">v4 = <span class="string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span></span><br><span class="line">__data_start__ = [</span><br><span class="line">    <span class="number">126</span>, <span class="number">125</span>, <span class="number">124</span>, <span class="number">123</span>, <span class="number">122</span>, <span class="number">121</span>, <span class="number">120</span>, <span class="number">119</span>, <span class="number">118</span>, <span class="number">117</span>,</span><br><span class="line">    <span class="number">116</span>, <span class="number">115</span>, <span class="number">114</span>, <span class="number">113</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">109</span>, <span class="number">108</span>, <span class="number">107</span>,</span><br><span class="line">    <span class="number">106</span>, <span class="number">105</span>, <span class="number">104</span>, <span class="number">103</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">99</span>, <span class="number">98</span>, <span class="number">97</span>,</span><br><span class="line">    <span class="number">96</span>, <span class="number">95</span>, <span class="number">94</span>, <span class="number">93</span>, <span class="number">92</span>, <span class="number">91</span>, <span class="number">90</span>, <span class="number">89</span>, <span class="number">88</span>, <span class="number">87</span>,</span><br><span class="line">    <span class="number">86</span>, <span class="number">85</span>, <span class="number">84</span>, <span class="number">83</span>, <span class="number">82</span>, <span class="number">81</span>, <span class="number">80</span>, <span class="number">79</span>, <span class="number">78</span>, <span class="number">77</span>,</span><br><span class="line">    <span class="number">76</span>, <span class="number">75</span>, <span class="number">74</span>, <span class="number">73</span>, <span class="number">72</span>, <span class="number">71</span>, <span class="number">70</span>, <span class="number">69</span>, <span class="number">68</span>, <span class="number">67</span>,</span><br><span class="line">    <span class="number">66</span>, <span class="number">65</span>, <span class="number">64</span>, <span class="number">63</span>, <span class="number">62</span>, <span class="number">61</span>, <span class="number">60</span>, <span class="number">59</span>, <span class="number">58</span>, <span class="number">57</span>,</span><br><span class="line">    <span class="number">56</span>, <span class="number">55</span>, <span class="number">54</span>, <span class="number">53</span>, <span class="number">52</span>, <span class="number">51</span>, <span class="number">50</span>, <span class="number">49</span>, <span class="number">48</span>, <span class="number">47</span>,</span><br><span class="line">    <span class="number">46</span>, <span class="number">45</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">42</span>, <span class="number">41</span>, <span class="number">40</span>, <span class="number">39</span>, <span class="number">38</span>, <span class="number">37</span>,</span><br><span class="line">    <span class="number">36</span>, <span class="number">35</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">0</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v4)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(__data_start__)):</span><br><span class="line">        <span class="keyword">if</span> v4[i] == <span class="built_in">chr</span>(__data_start__[j]):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(j + <span class="number">1</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            </span><br></pre></td></tr></table></figure><h2 id="ACTF新生赛2020-Oruga"><a href="#ACTF新生赛2020-Oruga" class="headerlink" title="[ACTF新生赛2020]Oruga"></a>[ACTF新生赛2020]Oruga</h2><p><strong>迷宫题，与常规迷宫有点不一样</strong></p><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]Oruga-1.png" alt="alt text"></p><ul><li>迷宫，终点 <code>!</code>，迷宫在<code>byte_201020</code></li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]Oruga-3.png" alt="alt text"></p><ul><li>在<code>byte_201020[]</code>按<code>shift+E</code>提取迷宫，变为迷宫，指定行、列</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ida_chars_byte_201020[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x23</span>, <span class="number">0x23</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, </span><br><span class="line">  <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x50</span>, <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x4C</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x50</span>, </span><br><span class="line">  <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4C</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4C</span>, <span class="number">0x4C</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4D</span>, <span class="number">0x4D</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x4D</span>, <span class="number">0x4D</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x45</span>, <span class="number">0x54</span>, <span class="number">0x54</span>, </span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x54</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x54</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, </span><br><span class="line">  <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x45</span></span><br><span class="line">&#125;;</span><br><span class="line"># maze_str_to_list</span><br><span class="line">maze_str = (<span class="string">&quot;    #       ####   ##   OO              OO PP      L OO OO PP      L OO OO P      LL OO    P         OO    P    #                           #         MMM   #          MMM    EE   0 M M M    E               EETTTI M M M    E  T I M M M    E  T I M M M!   EE&quot;</span>)</span><br><span class="line">print(len(maze_str))</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">row = <span class="number">16</span></span><br><span class="line">col = <span class="number">16</span></span><br><span class="line">maze = []</span><br><span class="line"><span class="keyword">for</span> i in range(row):</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> j in range(col):</span><br><span class="line">        tmp.append(maze_str[index])</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    maze.append(tmp)</span><br><span class="line">print(maze)</span><br><span class="line"></span><br><span class="line"># <span class="number">256</span></span><br><span class="line"># [</span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>],</span><br><span class="line">#     [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>],</span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;E&#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;E&#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;E&#x27;</span>]</span><br><span class="line"></span><br><span class="line"># ]</span><br><span class="line"># 起点<span class="string">&#x27; &#x27;</span>（<span class="number">0</span>，<span class="number">0</span>） ，终点<span class="string">&#x27;!&#x27;</span>（<span class="number">15</span>,<span class="number">10</span>）</span><br></pre></td></tr></table></figure><ul><li>同一障碍为<code>#</code>以便后续脚本，当后来发现这不是通常的迷宫，用<code>bfs</code>算法走的路径是错的，关键在<code>v2 += v4</code>这表示一直移动，所以移动应该是按下面图片来走</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">maze_str = (<span class="string">&quot;    #       ####   ##   OO              OO PP      L OO OO PP      L OO OO P      LL OO    P         OO    P    #                           #         MMM   #          MMM    EE   0 M M M    E               EETTTI M M M    E  T I M M M    E  T I M M M!   EE&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(maze_str))</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">row = <span class="number">16</span></span><br><span class="line">col = <span class="number">16</span></span><br><span class="line">maze = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(col):</span><br><span class="line">        <span class="keyword">if</span> maze_str[index] == <span class="string">&#x27;!&#x27;</span> <span class="keyword">or</span> maze_str[index] == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            tmp.append(maze_str[index])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp.append(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    maze.append(tmp)</span><br><span class="line"><span class="built_in">print</span>(maze)</span><br><span class="line"><span class="comment"># 256</span></span><br><span class="line"><span class="comment"># [</span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27;#&#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27;#&#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;!&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;]</span></span><br><span class="line"><span class="comment"># ]</span></span><br></pre></td></tr></table></figure><p>向下移动：M</p><p>向左移动：J</p><p>向上移动：E</p><p>向右移动：W</p><p><code>flag&#123;MEWEMEWJMEWJM&#125;</code></p><ul><li>找的网图大概这样走</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]Oruga-2.png" alt="alt text"></p><h2 id="ACTF新生赛2020-Universe-final-answer"><a href="#ACTF新生赛2020-Universe-final-answer" class="headerlink" title="[ACTF新生赛2020]Universe_final_answer"></a>[ACTF新生赛2020]Universe_final_answer</h2><ul><li>64位，无壳，IDA打开</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]Universe_final_answer.png" alt="alt text"></p><ul><li>用z3处理，根据图中，v1和v2，v6和v7要交换一下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">v1 = Int(<span class="string">&#x27;v2&#x27;</span>) <span class="comment"># 交换</span></span><br><span class="line">v2 = Int(<span class="string">&#x27;v1&#x27;</span>)</span><br><span class="line">v3 = Int(<span class="string">&#x27;v3&#x27;</span>)</span><br><span class="line">v4 = Int(<span class="string">&#x27;v4&#x27;</span>)</span><br><span class="line">v5 = Int(<span class="string">&#x27;v5&#x27;</span>)</span><br><span class="line">v6 = Int(<span class="string">&#x27;v7&#x27;</span>) <span class="comment"># 交换</span></span><br><span class="line">v7 = Int(<span class="string">&#x27;v6&#x27;</span>)</span><br><span class="line">v8 = Int(<span class="string">&#x27;v8&#x27;</span>)</span><br><span class="line">v9 = Int(<span class="string">&#x27;v9&#x27;</span>)</span><br><span class="line">v11 = Int(<span class="string">&#x27;v11&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s.add(-<span class="number">85</span> * v9 + <span class="number">58</span> * v8 + <span class="number">97</span> * v6 + v7 + -<span class="number">45</span> * v5 + <span class="number">84</span> * v4 + <span class="number">95</span> * v2 - <span class="number">20</span> * v1 + <span class="number">12</span> * v3 == <span class="number">12613</span>)</span><br><span class="line">s.add(<span class="number">30</span> * v11 + -<span class="number">70</span> * v9 + -<span class="number">122</span> * v6 + -<span class="number">81</span> * v7 + -<span class="number">66</span> * v5 + -<span class="number">115</span> * v4 + -<span class="number">41</span> * v3 + -<span class="number">86</span> * v1 - <span class="number">15</span> * v2 - <span class="number">30</span> * v8 == -<span class="number">54400</span>)</span><br><span class="line">s.add(-<span class="number">103</span> * v11 + <span class="number">120</span> * v8 + <span class="number">108</span> * v7 + <span class="number">48</span> * v4 + -<span class="number">89</span> * v3 + <span class="number">78</span> * v1 - <span class="number">41</span> * v2 + <span class="number">31</span> * v5 - (v6 * <span class="number">64</span>) - <span class="number">120</span> * v9 == -<span class="number">10283</span>)</span><br><span class="line">s.add(<span class="number">71</span> * v6 + (v7 * <span class="number">128</span>) + <span class="number">99</span> * v5 + -<span class="number">111</span> * v3 + <span class="number">85</span> * v1 + <span class="number">79</span> * v2 - <span class="number">30</span> * v4 - <span class="number">119</span> * v8 + <span class="number">48</span> * v9 - <span class="number">16</span> * v11 == <span class="number">22855</span>)</span><br><span class="line">s.add(<span class="number">5</span> * v11 + <span class="number">23</span> * v9 + <span class="number">122</span> * v8 + -<span class="number">19</span> * v6 + <span class="number">99</span> * v7 + -<span class="number">117</span> * v5 + -<span class="number">69</span> * v3 + <span class="number">22</span> * v1 - <span class="number">98</span> * v2 + <span class="number">10</span> * v4 == -<span class="number">2944</span>)</span><br><span class="line">s.add(-<span class="number">54</span> * v11 + -<span class="number">23</span> * v8 + -<span class="number">82</span> * v3 + -<span class="number">85</span> * v2 + <span class="number">124</span> * v1 - <span class="number">11</span> * v4 - <span class="number">8</span> * v5 - <span class="number">60</span> * v7 + <span class="number">95</span> * v6 + <span class="number">100</span> * v9 == -<span class="number">2222</span>)</span><br><span class="line">s.add(-<span class="number">83</span> * v11 + -<span class="number">111</span> * v7 + -<span class="number">57</span> * v2 + <span class="number">41</span> * v1 + <span class="number">73</span> * v3 - <span class="number">18</span> * v4 + <span class="number">26</span> * v5 + <span class="number">16</span> * v6 + <span class="number">77</span> * v8 - <span class="number">63</span> * v9 == -<span class="number">13258</span>)</span><br><span class="line">s.add(<span class="number">81</span> * v11 + -<span class="number">48</span> * v9 + <span class="number">66</span> * v8 + -<span class="number">104</span> * v6 + -<span class="number">121</span> * v7 + <span class="number">95</span> * v5 + <span class="number">85</span> * v4 + <span class="number">60</span> * v3 + -<span class="number">85</span> * v2 + <span class="number">80</span> * v1 == -<span class="number">1559</span>)</span><br><span class="line">s.add(<span class="number">101</span> * v11 + -<span class="number">85</span> * v9 + <span class="number">7</span> * v6 + <span class="number">117</span> * v7 + -<span class="number">83</span> * v5 + -<span class="number">101</span> * v4 + <span class="number">90</span> * v3 + -<span class="number">28</span> * v1 + <span class="number">18</span> * v2 - v8 == <span class="number">6308</span>)</span><br><span class="line">s.add(<span class="number">99</span> * v11 + -<span class="number">28</span> * v9 + <span class="number">5</span> * v8 + <span class="number">93</span> * v6 + -<span class="number">18</span> * v7 + -<span class="number">127</span> * v5 + <span class="number">6</span> * v4 + -<span class="number">9</span> * v3 + -<span class="number">93</span> * v1 + <span class="number">58</span> * v2 == -<span class="number">1697</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    result = s.model()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># [v1 = 70,</span></span><br><span class="line"><span class="comment">#  v2 = 48,</span></span><br><span class="line"><span class="comment">#  v4 = 82,</span></span><br><span class="line"><span class="comment">#  v11 = 64,</span></span><br><span class="line"><span class="comment">#  v3 = 117,</span></span><br><span class="line"><span class="comment">#  v5 = 84,</span></span><br><span class="line"><span class="comment">#  v7 = 95,</span></span><br><span class="line"><span class="comment">#  v9 = 119,</span></span><br><span class="line"><span class="comment">#  v8 = 55,</span></span><br><span class="line"><span class="comment">#  v6 = 121]</span></span><br><span class="line">flag = [</span><br><span class="line">    <span class="number">70</span>, <span class="number">48</span>, <span class="number">117</span>, <span class="number">82</span>, <span class="number">84</span>, <span class="number">121</span>, <span class="number">95</span>, <span class="number">55</span>, <span class="number">119</span>, <span class="number">64</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(c), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># F0uRTy_7w@</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>还有一步<code>sub_C50</code>，再运行程序输入<code>F0uRTy_7w@</code>，得到<code>F0uRTy_7w@_42</code></li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]Universe_final_answer-1.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;F0uRTy_7w@_42&#125;</span><br></pre></td></tr></table></figure><h2 id="ACTF新生赛2020-SoulLike"><a href="#ACTF新生赛2020-SoulLike" class="headerlink" title="[ACTF新生赛2020]SoulLike"></a>[ACTF新生赛2020]SoulLike</h2><p>sub_83A显示不出来问题解决方法：找到ida目录中的<code>cfg/hexrays.cfg</code>文件，将其中<code>MAX_FUNCSIZE = 64</code>修改为<code>1024</code></p><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216203738791.png" alt="image-20250216203738791"></p><p>进行了3000多行的异或操作，然后用异或结果与v3进行对比</p><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216205842849.png" alt="image-20250216205842849"></p><p><code>flag&#123;b0Nf|Re_LiT!&#125;</code></p><p>找到的三种方法</p><p>exp1：暴力破解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> v3[] = &#123;<span class="number">126</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">107</span>, <span class="number">53</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">30</span>, <span class="number">56</span>&#125;;</span><br><span class="line"><span class="type">int</span> a1[<span class="number">20</span>], flag[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">sub_83A</span><span class="params">(<span class="type">int</span> *a1)</span> </span>&#123;</span><br><span class="line">  *a1 ^= <span class="number">0x2Bu</span>;</span><br><span class="line">  a1[<span class="number">1</span>] ^= <span class="number">0x6Cu</span>;</span><br><span class="line">  a1[<span class="number">2</span>] ^= <span class="number">0x7Eu</span>;</span><br><span class="line">  a1[<span class="number">3</span>] ^= <span class="number">0x56u</span>;</span><br><span class="line">  a1[<span class="number">4</span>] ^= <span class="number">0x39u</span>;</span><br><span class="line">  a1[<span class="number">5</span>] ^= <span class="number">3u</span>;</span><br><span class="line">  a1[<span class="number">6</span>] ^= <span class="number">0x2Du</span>;</span><br><span class="line">  a1[<span class="number">7</span>] ^= <span class="number">0x28u</span>;</span><br><span class="line">  a1[<span class="number">8</span>] ^= <span class="number">8u</span>;</span><br><span class="line">  ++a1[<span class="number">9</span>];</span><br><span class="line">......    <span class="comment">//太长了这里就不放了，其实就是把IDA里的异或部分全部复制粘贴下来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">126</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; k++) a1[k] = flag[k];</span><br><span class="line">      a1[i] = j;</span><br><span class="line">      <span class="built_in">sub_83A</span>(a1);</span><br><span class="line">      <span class="keyword">if</span> (a1[i] == v3[i]) &#123;</span><br><span class="line">      flag[i] = j;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) cout &lt;&lt; (<span class="type">char</span>)flag[i];  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp2:使用pwntool暴力破解，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">&quot;actf&#123;&quot;</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">        p = process(<span class="string">&#x27;./SoulLike&#x27;</span>)</span><br><span class="line">        _flag = flag + <span class="built_in">chr</span>(i)<span class="comment"># _flag(临时flag) = &quot;actf&#123;&quot; + chr(i)</span></span><br><span class="line">        <span class="built_in">print</span>(_flag)</span><br><span class="line">        p.sendline(_flag)<span class="comment"># 发送临时flag</span></span><br><span class="line">        s = p.recvline().decode()<span class="comment"># 接收回显</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;on #&quot;</span> <span class="keyword">in</span> s:<span class="comment"># 如果回显中有&quot;on #&quot;</span></span><br><span class="line">            r = <span class="built_in">int</span>(s.split(<span class="string">&quot;on #&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;\n&quot;</span>)[<span class="number">0</span>])<span class="comment"># 先按换行符&quot;\n&quot;分割取前面的，再按&quot;on #&quot;分割去后面部分，如&quot;wrong on # 34\n try again\n&quot;,则取到&quot;34&quot;</span></span><br><span class="line">            <span class="keyword">if</span> r == k+<span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(s)</span><br><span class="line">                flag += <span class="built_in">chr</span>(i)<span class="comment"># 更新flag</span></span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">        p.close()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216230202330.png" alt="image-20250216230202330"></p><p>exp3: 使用angr</p><p><a href="https://www.cnblogs.com/level5uiharu/p/16925991.html">angr_ctf——从0学习angr（一）：angr简介与核心概念 - Uiharu - 博客园</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">base_addr=<span class="number">0x400000</span></span><br><span class="line">p=angr.Project(<span class="string">&quot;SoulLike&quot;</span>,auto_load_libs=<span class="literal">False</span>,main_opts=&#123;<span class="string">&quot;base_addr&quot;</span>:base_addr&#125;)</span><br><span class="line"></span><br><span class="line">init_state=p.factory.entry_state()</span><br><span class="line">sm=p.factory.simgr(init_state)</span><br><span class="line">sm.explore(find=base_addr+<span class="number">0x1117d</span>)</span><br><span class="line"><span class="keyword">if</span> sm.found:</span><br><span class="line">    found_state=sm.found[<span class="number">0</span>]</span><br><span class="line">    found_state.posix.dumps(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><p>虽然一开始都处理，但现在这三种方法都弄懂了，还是收获满满的</p><h2 id="ACTF新生赛2020-fungame"><a href="#ACTF新生赛2020-fungame" class="headerlink" title="[ACTF新生赛2020]fungame"></a>[ACTF新生赛2020]fungame</h2><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216231222662.png" alt="image-20250216231222662"></p><p>一个简单的异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">y1 = [</span><br><span class="line">  <span class="number">0x23</span>, <span class="number">0x61</span>, <span class="number">0x3E</span>, <span class="number">0x69</span>, <span class="number">0x54</span>, <span class="number">0x41</span>, <span class="number">0x18</span>, <span class="number">0x4D</span>, <span class="number">0x6E</span>, <span class="number">0x3B</span>,</span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x53</span>, <span class="number">0x30</span>, <span class="number">0x79</span>, <span class="number">0x45</span>, <span class="number">0x5B</span>, <span class="number">0x71</span></span><br><span class="line">]</span><br><span class="line">y2 = [</span><br><span class="line">  <span class="number">0x71</span>, <span class="number">0x04</span>, <span class="number">0x61</span>, <span class="number">0x58</span>, <span class="number">0x27</span>, <span class="number">0x1E</span>, <span class="number">0x4B</span>, <span class="number">0x22</span>, <span class="number">0x5E</span>, <span class="number">0x64</span>,</span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x26</span>, <span class="number">0x5E</span>, <span class="number">0x17</span>, <span class="number">0x3C</span>, <span class="number">0x7A</span>, <span class="number">0xFF</span></span><br><span class="line">]</span><br><span class="line">a1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    a1 += <span class="built_in">chr</span>(y2[i] ^ y1[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a1, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># Re_1s_So0_funny!</span></span><br></pre></td></tr></table></figure><p>提交然后发现不对，结合在字符串表里看到的<code>please input angin:</code>和<code>base64表</code>，因为运行程序提示输入的是<code>please input</code>,且输错就退出了，所以查看一下<code>please input angin:</code>所在地方</p><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216233058059.png" alt="image-20250216233058059"></p><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216232654497.png" alt="image-20250216232654497"></p><p>但还是有问题，最后经人提醒才知道，还考了栈溢出的知识，也就是<code>a1s0_pWn</code>的提示</p><p><code>Destination[12]</code>长度只有12，而第一部分长度位16，也就是说溢出了4，刚好把栈底填满(32位程序)，返回地址传入了<code>_X</code>的地址</p><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216233500622.png" alt="image-20250216233500622"></p><p>传入的地址为<code>40233D</code>，即为<code>ret</code>返回的地址<img src="https://s1.vika.cn/space/2025/02/18/a6c85ed8dfff41ab9f388b692615784f" alt=""></p><p><img src="https://s1.vika.cn/space/2025/02/18/7632cacf1e2648a6a920cf07a006c0b0" alt=""></p><ul><li>验证</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;flag&#123;Re_1s_So0_funny!&#x27;</span></span><br><span class="line">flag += <span class="built_in">chr</span>(<span class="number">0x3D</span>)</span><br><span class="line">flag += <span class="built_in">chr</span>(<span class="number">0x23</span>)</span><br><span class="line">flag += <span class="built_in">chr</span>(<span class="number">0x40</span>)</span><br><span class="line">flag += <span class="string">&#x27;a1s0_pWn&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;Re_1s_So0_funny!=#@a1s0_pWn&#125;</span></span><br></pre></td></tr></table></figure><h1 id="BJDCTF"><a href="#BJDCTF" class="headerlink" title="BJDCTF"></a>BJDCTF</h1><h2 id="BJDCTF2020-BJD-hamburger-competition"><a href="#BJDCTF2020-BJD-hamburger-competition" class="headerlink" title="[BJDCTF2020]BJD-hamburger-competition"></a>[BJDCTF2020]BJD-hamburger-competition</h2><p><a href="https://bbs.kanxue.com/thread-272066.htm">WP</a></p><ul><li>第一次做的Unity3D题目，抽象的老八秘制小汉堡游戏</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[BJDCTF2020]BJD-hamburger-competition-5.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Unity3D是由Unity Technologies开发的一个让玩家轻松创建互动内容的多平台的综合型游戏开发工具，</span><br><span class="line">Unity3D是用C#开发的，</span><br><span class="line">C#的反汇编工具为dnspy，但是把哪个东西丢进去呢？</span><br><span class="line"> </span><br><span class="line">unity在打包玩程序后，会将所有的代码打进一个Assembly-CSharp.dll的文件里面，</span><br><span class="line">通过这个文件的反编译，就能详细看见里面的代码内容。(这个文件在Managed目录下)</span><br></pre></td></tr></table></figure><p><img src="./pic/BUUCTF-Reverse.assets/[BJDCTF2020]BJD-hamburger-competition-1.png" alt="alt text"></p><ul><li>意思是<code>sha1</code>对<code>str</code>加密结果为图中那一串，再用<code>str</code>的<code>MD5</code>的前20位作为flag</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[BJDCTF2020]BJD-hamburger-competition-2.png" alt="alt text"></p><ul><li>所以在线sha1解密，在MD5加密就行</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[BJDCTF2020]BJD-hamburger-competition-3.png" alt="alt text"></p><p><img src="./pic/BUUCTF-Reverse.assets/[BJDCTF2020]BJD-hamburger-competition-4.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B8C37E33DEFDE51CF91E1E03E51657DA</span><br></pre></td></tr></table></figure><p>取前20个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;B8C37E33DEFDE51CF91E&#125;</span><br></pre></td></tr></table></figure><h1 id="MRCTF"><a href="#MRCTF" class="headerlink" title="MRCTF"></a>MRCTF</h1><h2 id="MRCTF2020-hello-world-go"><a href="#MRCTF2020-hello-world-go" class="headerlink" title="[MRCTF2020]hello_world_go"></a>[MRCTF2020]hello_world_go</h2><ul><li>应该是个签到题，IDA打开就是flag</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[MRCTF2020]hello_world_go-1.png" alt="alt text "></p><h2 id="MRCTF2020-PixelShooter"><a href="#MRCTF2020-PixelShooter" class="headerlink" title="[MRCTF2020]PixelShooter"></a>[MRCTF2020]PixelShooter</h2><ul><li>unity游戏逆向还得是dnspy</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[MRCTF2020]PixelShooter-1.png" alt="alt text"></p><p><img src="./pic/BUUCTF-Reverse.assets/[MRCTF2020]PixelShooter.png" alt="alt text"></p><h2 id="MRCTF2020-Transform"><a href="#MRCTF2020-Transform" class="headerlink" title="[MRCTF2020]Transform"></a>[MRCTF2020]Transform</h2><p><img src="./pic/BUUCTF-Reverse.assets/[MRCTF2020]Transform.png" alt="alt text"></p><ul><li>64位，无壳</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[MRCTF2020]Transform-2.png" alt="alt text"></p><ul><li>不懂，搜的，但对解题没影响，因为提取的数据（data）都小于2^8^=128</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">对于 LOBYTE(<span class="number">9</span>)，我们首先需要理解 LOBYTE 宏的作用：它提取一个 <span class="number">16</span> 位数的低 <span class="number">8</span> 位部分。</span><br><span class="line"></span><br><span class="line">LOBYTE(w) 宏通常是这样定义的：</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOBYTE(w) ((unsigned char)(w &amp; 0xFF))</span></span><br><span class="line">分析</span><br><span class="line">给定输入值 <span class="number">9</span>：</span><br><span class="line"></span><br><span class="line"><span class="number">9</span> 的二进制表示是 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1001</span> (<span class="number">16</span> 位的二进制表示)，在低字节中，我们看到它的低 <span class="number">8</span> 位是 <span class="number">0000</span> <span class="number">1001</span>，即 <span class="number">9</span>。</span><br><span class="line"></span><br><span class="line">执行 LOBYTE(<span class="number">9</span>)：</span><br><span class="line"></span><br><span class="line"><span class="number">9</span> 的二进制表示 <span class="number">0000</span> <span class="number">1001</span>，低 <span class="number">8</span> 位是 <span class="number">0000</span> <span class="number">1001</span>，它的值为 <span class="number">9</span>。</span><br><span class="line">结论</span><br><span class="line">LOBYTE(<span class="number">9</span>) 的结果是 <span class="number">9</span>。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    <span class="number">103</span>, <span class="number">121</span>, <span class="number">123</span>, <span class="number">127</span>, <span class="number">117</span>, <span class="number">43</span>, <span class="number">60</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">121</span>,</span><br><span class="line">    <span class="number">87</span>, <span class="number">94</span>, <span class="number">93</span>, <span class="number">66</span>, <span class="number">123</span>, <span class="number">45</span>, <span class="number">42</span>, <span class="number">102</span>, <span class="number">66</span>, <span class="number">126</span>,</span><br><span class="line">    <span class="number">76</span>, <span class="number">87</span>, <span class="number">121</span>, <span class="number">65</span>, <span class="number">107</span>, <span class="number">126</span>, <span class="number">101</span>, <span class="number">60</span>, <span class="number">92</span>, <span class="number">69</span>,</span><br><span class="line">    <span class="number">111</span>, <span class="number">98</span>, <span class="number">77</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">index = [<span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">32</span>, <span class="number">29</span>, <span class="number">11</span>, <span class="number">30</span>, <span class="number">27</span>,</span><br><span class="line">         <span class="number">22</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">31</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">14</span>, <span class="number">0</span>, ]</span><br><span class="line"><span class="comment"># print(len(data))</span></span><br><span class="line"><span class="comment"># print(len(index))</span></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">33</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    flag[index[i]] = <span class="built_in">chr</span>(data[i] ^ index[i])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))</span><br><span class="line"><span class="comment"># MRCTF&#123;Tr4nsp0sltiON_Clph3r_1s_3z&#125;</span></span><br></pre></td></tr></table></figure><h1 id="GWCTF"><a href="#GWCTF" class="headerlink" title="GWCTF"></a>GWCTF</h1><h1 id="HDCTF"><a href="#HDCTF" class="headerlink" title="HDCTF"></a>HDCTF</h1><h1 id="WUSTCTF"><a href="#WUSTCTF" class="headerlink" title="WUSTCTF"></a>WUSTCTF</h1><h2 id="WUSTCTF2020-Cr0ssfun"><a href="#WUSTCTF2020-Cr0ssfun" class="headerlink" title="[WUSTCTF2020]Cr0ssfun"></a>[WUSTCTF2020]Cr0ssfun</h2><ul><li>查壳，无</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]Cr0ssfun.png" alt="alt text"></p><ul><li>单纯的套娃拼接，直接让kimi帮我提取了</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __fastcall <span class="title function_">iven_is_handsome</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1[<span class="number">10</span>] == <span class="number">112</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">13</span>] == <span class="number">64</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">3</span>] == <span class="number">102</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">26</span>] == <span class="number">114</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">20</span>] == <span class="number">101</span></span><br><span class="line">      &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)iven_is_c0ol(a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BOOL8 __fastcall <span class="title function_">iven_is_c0ol</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1[<span class="number">7</span>] == <span class="number">48</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">16</span>] == <span class="number">95</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">11</span>] == <span class="number">112</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">23</span>] == <span class="number">101</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">30</span>] == <span class="number">117</span></span><br><span class="line">      &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)iven_1s_educated(a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BOOL8 __fastcall <span class="title function_">iven_1s_educated</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> *a1 == <span class="number">119</span> &amp;&amp; a1[<span class="number">6</span>] == <span class="number">50</span> &amp;&amp; a1[<span class="number">22</span>] == <span class="number">115</span> &amp;&amp; a1[<span class="number">31</span>] == <span class="number">110</span> &amp;&amp; a1[<span class="number">12</span>] == <span class="number">95</span> &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)iven_1s_brave(a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BOOL8 __fastcall <span class="title function_">iven_1s_brave</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1[<span class="number">15</span>] == <span class="number">100</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">8</span>] == <span class="number">123</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">18</span>] == <span class="number">51</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">28</span>] == <span class="number">95</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">21</span>] == <span class="number">114</span></span><br><span class="line">      &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)iven_1s_great(a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BOOL8 __fastcall <span class="title function_">iven_1s_great</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1[<span class="number">2</span>] == <span class="number">116</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">9</span>] == <span class="number">99</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">32</span>] == <span class="number">125</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">19</span>] == <span class="number">118</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">5</span>] == <span class="number">48</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">14</span>] == <span class="number">110</span></span><br><span class="line">      &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)iven_and_grace(a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BOOL8 __fastcall <span class="title function_">iven_and_grace</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1[<span class="number">4</span>] == <span class="number">50</span> &amp;&amp; a1[<span class="number">17</span>] == <span class="number">114</span> &amp;&amp; a1[<span class="number">29</span>] == <span class="number">102</span> &amp;&amp; a1[<span class="number">17</span>] == <span class="number">114</span> &amp;&amp; a1[<span class="number">24</span>] == <span class="number">95</span> &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)finally_fun(a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BOOL8 __fastcall <span class="title function_">finally_fun</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1[<span class="number">1</span>] == <span class="number">99</span> &amp;&amp; a1[<span class="number">25</span>] == <span class="number">64</span> &amp;&amp; a1[<span class="number">27</span>] == <span class="number">101</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a1[<span class="number">10</span>] == <span class="number">112</span></span><br><span class="line">a1[<span class="number">13</span>] == <span class="number">64</span></span><br><span class="line">a1[<span class="number">3</span>] == <span class="number">102</span></span><br><span class="line">a1[<span class="number">26</span>] == <span class="number">114</span></span><br><span class="line">a1[<span class="number">20</span>] == <span class="number">101</span></span><br><span class="line">a1[<span class="number">7</span>] == <span class="number">48</span></span><br><span class="line">a1[<span class="number">16</span>] == <span class="number">95</span></span><br><span class="line">a1[<span class="number">11</span>] == <span class="number">112</span></span><br><span class="line">a1[<span class="number">23</span>] == <span class="number">101</span></span><br><span class="line">a1[<span class="number">30</span>] == <span class="number">117</span></span><br><span class="line">a1[<span class="number">15</span>] == <span class="number">100</span></span><br><span class="line">a1[<span class="number">8</span>] == <span class="number">123</span></span><br><span class="line">a1[<span class="number">18</span>] == <span class="number">51</span></span><br><span class="line">a1[<span class="number">28</span>] == <span class="number">95</span></span><br><span class="line">a1[<span class="number">21</span>] == <span class="number">114</span></span><br><span class="line">a1[<span class="number">2</span>] == <span class="number">116</span>  </span><br><span class="line">a1[<span class="number">9</span>] == <span class="number">99</span></span><br><span class="line">a1[<span class="number">32</span>] == <span class="number">125</span></span><br><span class="line">a1[<span class="number">19</span>] == <span class="number">118</span></span><br><span class="line">a1[<span class="number">5</span>] == <span class="number">48</span></span><br><span class="line">a1[<span class="number">14</span>] == <span class="number">110</span></span><br><span class="line">a1[<span class="number">4</span>] == <span class="number">50</span> </span><br><span class="line">a1[<span class="number">17</span>] == <span class="number">114</span> </span><br><span class="line">a1[<span class="number">29</span>] == <span class="number">102</span> </span><br><span class="line">a1[<span class="number">17</span>] == <span class="number">114</span> </span><br><span class="line">a1[<span class="number">24</span>] == <span class="number">95</span></span><br><span class="line">a1[<span class="number">1</span>] == <span class="number">99</span> </span><br><span class="line">a1[<span class="number">25</span>] == <span class="number">64</span> </span><br><span class="line">a1[<span class="number">27</span>] == <span class="number">101</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]Cr0ssfun-2.png" alt="alt text"></p><ul><li>最后用flag{}包裹</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cctf2000&#123;cpp_@nd_r3verse_@re_fun&#125;</span><br><span class="line"># flag&#123;cpp_@nd_r3verse_@re_fun&#125;</span><br></pre></td></tr></table></figure><h2 id="WUSTCTF2020-level2"><a href="#WUSTCTF2020-level2" class="headerlink" title="[WUSTCTF2020]level2"></a>[WUSTCTF2020]level2</h2><ul><li>UPX加壳了</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level2.png" alt="alt text"></p><ul><li><code>upx -d</code>去壳</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level2-1.png" alt="alt text" /></p><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level2-2.png" alt="alt text"></p><h2 id="WUSTCTF2020-level3"><a href="#WUSTCTF2020-level3" class="headerlink" title="[WUSTCTF2020]level3"></a>[WUSTCTF2020]level3</h2><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level3.png" alt="alt text"></p><ul><li>明示是Base64加密，shift+F12找到密文，用赛博厨子解密了一下，不对<br><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level3-2.png" alt="alt text"><br><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level3-1.png" alt="alt text"></li><li>查看Base64表，按 X 查看表的引用，果然不对劲，发现有对表的操作<br><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level3-3.png" alt="alt text"><br><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level3-4.png" alt="alt text"></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">base64_table = [</span><br><span class="line">    <span class="number">0x41</span>, <span class="number">0x42</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x49</span>, <span class="number">0x4A</span>,</span><br><span class="line">    <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x4D</span>, <span class="number">0x4E</span>, <span class="number">0x4F</span>, <span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x54</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x58</span>, <span class="number">0x59</span>, <span class="number">0x5A</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>,</span><br><span class="line">    <span class="number">0x65</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x6D</span>, <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x6F</span>, <span class="number">0x70</span>, <span class="number">0x71</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x77</span>, <span class="number">0x78</span>,</span><br><span class="line">    <span class="number">0x79</span>, <span class="number">0x7A</span>, <span class="number">0x30</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>,</span><br><span class="line">    <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x2B</span>, <span class="number">0x2F</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    v1 = base64_table[i]</span><br><span class="line">    base64_table[i] = base64_table[<span class="number">19</span> - i]</span><br><span class="line">    result = <span class="number">19</span> - i</span><br><span class="line">    base64_table[result] = v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> base64_table</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(i)), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># TSRQPONMLKJIHGFEDCBAUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</span></span><br></pre></td></tr></table></figure><ul><li>换表，赛博厨子解一下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;Base64_is_the_start_of_reverse&#125;</span><br></pre></td></tr></table></figure><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level3-5.png" alt="alt text"></p><ul><li>之前看到的一个wp里的脚本，挺有意思的，直接本地换表（映射）解密，在这贴一下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64 <span class="comment">#导入base64模块用于解密</span></span><br><span class="line">s1 = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span> <span class="comment">#标准表</span></span><br><span class="line">s2 = <span class="string">&#x27;qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD&#x27;</span> <span class="comment">#base64换表</span></span><br><span class="line">en_text = <span class="string">&#x27;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM/8==&#x27;</span> <span class="comment">#密文</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">map</span> = <span class="built_in">str</span>.maketrans(s2, s1) <span class="comment">#用str类中的maketrans建立映射，注意第一个参数是需要映射的字符串，第二个参数是映射的目标</span></span><br><span class="line">map_text = en_text.translate(<span class="built_in">map</span>) <span class="comment">#映射实现替换密文，替换前是base64换表加密，替换后则是base64标准表加密</span></span><br><span class="line"><span class="built_in">print</span>(map_text) <span class="comment">#可以先看看标准表加密的密文</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(map_text)) <span class="comment">#直接使用提供的base64解密函数，获得明文，就是flag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TlNTQ1RGe2E4ZDQzNDc3MjI4MDBlNzJlMzRlMWFiYTNmZTkxNGFlfQ==</span></span><br><span class="line"><span class="comment"># b&#x27;NSSCTF&#123;a8d4347722800e72e34e1aba3fe914ae&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">en_base64 = <span class="string">&#x27;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==&#x27;</span></span><br><span class="line">de_base64 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">old_base64_table = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">new_base64_table = <span class="string">&#x27;TSRQPONMLKJIHGFEDCBAUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((base64.b64decode((en_base64.translate(<span class="built_in">str</span>.maketrans(new_base64_table, old_base64_table))).encode())).decode())</span><br><span class="line"><span class="comment"># wctf2020&#123;Base64_is_the_start_of_reverse&#125;</span></span><br></pre></td></tr></table></figure><h2 id="WUSTCTF2020-level4"><a href="#WUSTCTF2020-level4" class="headerlink" title="[WUSTCTF2020]level4"></a>[WUSTCTF2020]level4</h2><ul><li>64位，无壳</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level4.png" alt="alt text"></p><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level4-1.png" alt="alt text"></p><ul><li>一眼没看出来，仔细看了才知道，<code>Date Structure</code>考了个数据结构</li></ul><ul><li>二叉树中序遍历</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">type1</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    type1(*((_QWORD *)a1 + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">putchar</span>(*a1);</span><br><span class="line">    <span class="keyword">return</span> type1(*((_QWORD *)a1 + <span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>二叉树后序遍历</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">type2</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    type2(*((_QWORD *)a1 + <span class="number">1</span>));</span><br><span class="line">    type2(*((_QWORD *)a1 + <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">putchar</span>(*a1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>程序运行的结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Traversal type 1:2f0t02T&#123;hcsiI_SwA__r7Ee&#125;</span><br><span class="line">Traversal type 2:20f0Th&#123;2tsIS_icArE&#125;e7__w</span><br></pre></td></tr></table></figure><ul><li>已知后序中序输出前序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_tree</span>(<span class="params">post, mid</span>):</span><br><span class="line">    <span class="comment"># 如果没有元素，返回空树</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> post <span class="keyword">or</span> <span class="keyword">not</span> mid:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">  </span><br><span class="line">    root_val = post[-<span class="number">1</span>] <span class="comment"># 后序遍历的最后一个元素是当前树的根节点</span></span><br><span class="line">    root_index = mid.index(root_val)  <span class="comment"># 找到根节点在中序遍历中的位置</span></span><br><span class="line">    root = &#123;<span class="string">&#x27;val&#x27;</span>: root_val, <span class="string">&#x27;left&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;right&#x27;</span>: <span class="literal">None</span>&#125; <span class="comment"># 创建树的根节点</span></span><br><span class="line">    root[<span class="string">&#x27;left&#x27;</span>] = build_tree(post[:root_index], mid[:root_index])  <span class="comment"># 递归构建左子树</span></span><br><span class="line">    root[<span class="string">&#x27;right&#x27;</span>] = build_tree(post[root_index:-<span class="number">1</span>], mid[root_index + <span class="number">1</span>:])  <span class="comment"># 递归构建右子树</span></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preorder_traversal</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="comment"># 如果树为空，返回空列表</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="comment"># 返回根节点值 + 左子树的前序遍历 + 右子树的前序遍历</span></span><br><span class="line">    <span class="keyword">return</span> [root[<span class="string">&#x27;val&#x27;</span>]] + preorder_traversal(root[<span class="string">&#x27;left&#x27;</span>]) + preorder_traversal(root[<span class="string">&#x27;right&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入后序遍历和中序遍历</span></span><br><span class="line">post_order = <span class="string">&quot;20f0Th&#123;2tsIS_icArE&#125;e7__w&quot;</span></span><br><span class="line">in_order = <span class="string">&quot;2f0t02T&#123;hcsiI_SwA__r7Ee&#125;&quot;</span></span><br><span class="line"><span class="comment"># 重建二叉树</span></span><br><span class="line">tree_root = build_tree(<span class="built_in">list</span>(post_order), <span class="built_in">list</span>(in_order))</span><br><span class="line"><span class="comment"># 获取前序遍历结果</span></span><br><span class="line">pre_order_result = <span class="string">&#x27;&#x27;</span>.join(preorder_traversal(tree_root))</span><br><span class="line"><span class="built_in">print</span>(pre_order_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># wctf2020&#123;This_IS_A_7reE&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FlareOnCTF</title>
      <link href="/2025/02/14/FlareOnCTF/"/>
      <url>/2025/02/14/FlareOnCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="FlareOnCTF-练习"><a href="#FlareOnCTF-练习" class="headerlink" title="FlareOnCTF 练习"></a>FlareOnCTF 练习</h1><h2 id="FlareOn4-IgniteMe"><a href="#FlareOn4-IgniteMe" class="headerlink" title="[FlareOn4] IgniteMe"></a>[FlareOn4] IgniteMe</h2><ul><li><p>无壳, ida 打开<br><img src="./pic/FlareOnCTF.assets/[FlareOn4]IgniteMe.png" alt="alt text"><br><img src="./pic/FlareOnCTF.assets/[FlareOn4]IgniteMe-2.png" alt="alt text"><br><img src="./pic/FlareOnCTF.assets/[FlareOn4]IgniteMe-1.png" alt="alt text"></p></li><li><p>在 <code>xor_flag[i] = v4 ^ input[i]</code> 处下断点，动态调试后就可以看到 v4 的值了，（把鼠标放 v4 上就可以显示值），不好截图，双击 v4 也可以看到值为 4<br><img src="./pic/FlareOnCTF.assets/[FlareOn4]IgniteMe-3.png" alt="alt text"></p></li><li><p>最后, 从 <code>最后一个</code> 开始异或 <code>前一个</code> 的运算</p></li><li><p>易错的是，<code>v4 = a[i] ^ v4</code>, 之前写成 <code>v4 = a[i]</code> 卡了好久</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = [</span><br><span class="line">  <span class="number">0x0D</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x45</span>, <span class="number">0x2A</span>, <span class="number">0x17</span>, <span class="number">0x78</span>, <span class="number">0x44</span>, <span class="number">0x2B</span>, <span class="number">0x6C</span>, </span><br><span class="line">  <span class="number">0x5D</span>, <span class="number">0x5E</span>, <span class="number">0x45</span>, <span class="number">0x12</span>, <span class="number">0x2F</span>, <span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x44</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, </span><br><span class="line">  <span class="number">0x56</span>, <span class="number">0x09</span>, <span class="number">0x5F</span>, <span class="number">0x45</span>, <span class="number">0x47</span>, <span class="number">0x73</span>, <span class="number">0x26</span>, <span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x13</span>, </span><br><span class="line">  <span class="number">0x17</span>, <span class="number">0x48</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, <span class="number">0x40</span>, <span class="number">0x4D</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x69</span></span><br><span class="line">]</span><br><span class="line">v4 = <span class="number">0x4</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a) - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(a[i] ^ v4)</span><br><span class="line">    v4 = a[i] ^ v4</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># _y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="FlareOn1-Bob-Doge"><a href="#FlareOn1-Bob-Doge" class="headerlink" title="[FlareOn1] Bob-Doge"></a>[FlareOn1] Bob-Doge</h2><ul><li>一个下载器，下载后运行是这个东西</li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn1]Bob-Doge-2.png" alt="alt text"></p><p><img src="./pic/FlareOnCTF.assets/[FlareOn1]Bob-Doge-3.png" alt="alt text"></p><hr><ul><li>IDA 反编译, 看不懂没见过的形式<br><img src="./pic/FlareOnCTF.assets/[FlareOn1]Bob-Doge-4.png" alt="alt text"></li></ul><ul><li><p>换一个工具, despy 打开, 看上舒服多了</p></li><li><p>主要在这，<code>DECODE</code> 按钮事件，最终解码后的字符串 <code>text3</code> 显示在 <code>lbl_title</code> 标签中。</p></li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn1]Bob-Doge-5.png" alt="alt text"></p><ul><li>下断点，动态调试，直接看内容</li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn1]Bob-Doge-1.png" alt="alt text"></p><h2 id="FlareOn3-Challenge1"><a href="#FlareOn3-Challenge1" class="headerlink" title="[FlareOn3] Challenge1"></a>[FlareOn3] Challenge1</h2><p><img src="./pic/FlareOnCTF.assets/[FlareOn3]Challenge1.png" alt="alt text"> <img src="./pic/FlareOnCTF.assets/[FlareOn3]Challenge1-3.png" alt="alt text"></p><ul><li>base64 加密</li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn3]Challenge1-2.png" alt="alt text"></p><ul><li><code>shift+f12</code> 查看字符串，发现换表了</li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn3]Challenge1-4.png" alt="alt text"> <img src="./pic/FlareOnCTF.assets/[FlareOn3]Challenge1-1.png" alt="alt text"></p><ul><li>赛博厨子梭哈一下，根据后面小写的形式可知，换的表前面少了个 <code>Z</code></li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn3]Challenge1-5.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;sh00ting_phish_in_a_barrel@flare-on.com&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="FlareOn6-Overlong"><a href="#FlareOn6-Overlong" class="headerlink" title="[FlareOn6] Overlong"></a>[FlareOn6] Overlong</h2><ul><li>根据题目提示，这句话冒号 <code>:</code> 后面应该还有内容</li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn6]Overlong.png" alt="alt text"></p><ul><li>题目内容很少，都看一下<br><img src="./pic/FlareOnCTF.assets/[FlareOn6]Overlong-1.png" alt="alt text"></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __stdcall <span class="title function_">start</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> Text[<span class="number">128</span>]; <span class="comment">// [esp+0h] [ebp-84h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [esp+80h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = sub_401160(Text, (<span class="type">int</span>)&amp;unk_402008, <span class="number">28u</span>);</span><br><span class="line">  Text[v6] = <span class="number">0</span>;</span><br><span class="line">  MessageBoxA(<span class="number">0</span>, Text, Caption, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title function_">sub_401160</span><span class="params">(<span class="type">char</span> *a1, <span class="type">char</span> *a2, <span class="type">unsigned</span> <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+4h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a3; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    a2 += sub_401000(a1, a2);</span><br><span class="line">    <span class="keyword">if</span> ( !*a1++ )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里进行加密</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_401000</span><span class="params">(<span class="type">unsigned</span> __int8 *a1, <span class="type">char</span> *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [esp+0h] [ebp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v4; <span class="comment">// [esp+4h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)(<span class="type">unsigned</span> __int8)*a2 &gt;&gt; <span class="number">3</span> == <span class="number">30</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = a2[<span class="number">3</span>] &amp; <span class="number">0x3F</span> | ((a2[<span class="number">2</span>] &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>);</span><br><span class="line">    v3 = <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="type">int</span>)(<span class="type">unsigned</span> __int8)*a2 &gt;&gt; <span class="number">4</span> == <span class="number">14</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = a2[<span class="number">2</span>] &amp; <span class="number">0x3F</span> | ((a2[<span class="number">1</span>] &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>);</span><br><span class="line">    v3 = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="type">int</span>)(<span class="type">unsigned</span> __int8)*a2 &gt;&gt; <span class="number">5</span> == <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = a2[<span class="number">1</span>] &amp; <span class="number">0x3F</span> | ((*a2 &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>);</span><br><span class="line">    v3 = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = *a2;</span><br><span class="line">    v3 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = v4;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 <code>&amp;unk_FB2008</code> 按 <code>shift+e</code> 提取数据，按加密写 python 脚本解密</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">a2 = [<span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0x89</span>, <span class="number">0xc0</span>, <span class="number">0xa0</span>, <span class="number">0xc1</span>, <span class="number">0xae</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xa5</span>,</span><br><span class="line">      <span class="number">0xc1</span>, <span class="number">0xb6</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xa5</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xb2</span>, <span class="number">0xf0</span>,</span><br><span class="line">      <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xa2</span>, <span class="number">0x72</span>, <span class="number">0x6f</span>, <span class="number">0xc1</span>, <span class="number">0xab</span>,</span><br><span class="line">      <span class="number">0x65</span>, <span class="number">0xe0</span>, <span class="number">0x80</span>, <span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xb4</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xa8</span>,</span><br><span class="line">      <span class="number">0xc1</span>, <span class="number">0xa5</span>, <span class="number">0x20</span>, <span class="number">0xc1</span>, <span class="number">0xa5</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xae</span>, <span class="number">0x63</span>, <span class="number">0xc1</span>,</span><br><span class="line">      <span class="number">0xaf</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xa4</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xa9</span>, <span class="number">0x6e</span>, <span class="number">0xc1</span>,</span><br><span class="line">      <span class="number">0xa7</span>, <span class="number">0xc0</span>, <span class="number">0xba</span>, <span class="number">0x20</span>, <span class="number">0x49</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>, <span class="number">0xc1</span>,</span><br><span class="line">      <span class="number">0xa1</span>, <span class="number">0xc1</span>, <span class="number">0x9f</span>, <span class="number">0xc1</span>, <span class="number">0x8d</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>, <span class="number">0xc1</span>, <span class="number">0xb4</span>,</span><br><span class="line">      <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xa8</span>, <span class="number">0xc1</span>, <span class="number">0x9f</span>,</span><br><span class="line">      <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xa5</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>, <span class="number">0xc1</span>, <span class="number">0xa5</span>, <span class="number">0xe0</span>,</span><br><span class="line">      <span class="number">0x81</span>, <span class="number">0x9f</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xae</span>, <span class="number">0xc1</span>, <span class="number">0x9f</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>,</span><br><span class="line">      <span class="number">0x81</span>, <span class="number">0x83</span>, <span class="number">0xc1</span>, <span class="number">0x9f</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xaf</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>,</span><br><span class="line">      <span class="number">0xc1</span>, <span class="number">0x84</span>, <span class="number">0x5f</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xa9</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>,</span><br><span class="line">      <span class="number">0x6e</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xa7</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0x80</span>,</span><br><span class="line">      <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xa6</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xac</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>,</span><br><span class="line">      <span class="number">0xa1</span>, <span class="number">0xc1</span>, <span class="number">0xb2</span>, <span class="number">0xc1</span>, <span class="number">0xa5</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0xad</span>, <span class="number">0xf0</span>,</span><br><span class="line">      <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xaf</span>, <span class="number">0x6e</span>, <span class="number">0xc0</span>, <span class="number">0xae</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xa3</span>,</span><br><span class="line">      <span class="number">0x6f</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xad</span>, <span class="number">0x0</span>]</span><br><span class="line">flag = []</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">68</span>):</span><br><span class="line">    <span class="keyword">if</span> a2[j] &gt;&gt; <span class="number">3</span> == <span class="number">30</span>:</span><br><span class="line">        v4 = a2[j + <span class="number">3</span>] &amp; <span class="number">0x3f</span> | ((a2[j + <span class="number">2</span>] &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">6</span>)</span><br><span class="line">        v3 = <span class="number">4</span></span><br><span class="line">    <span class="keyword">elif</span> a2[j] &gt;&gt; <span class="number">4</span> == <span class="number">14</span>:</span><br><span class="line">        v4 = a2[j + <span class="number">2</span>] &amp; <span class="number">0x3F</span> | ((a2[j + <span class="number">1</span>] &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>)</span><br><span class="line">        v3 = <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> a2[j] &gt;&gt; <span class="number">5</span> == <span class="number">6</span>:</span><br><span class="line">        v4 = a2[j + <span class="number">1</span>] &amp; <span class="number">0x3F</span> | ((a2[j] &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>)</span><br><span class="line">        v3 = <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        v4 = a2[j]</span><br><span class="line">        v3 = <span class="number">1</span></span><br><span class="line">    flag.append(<span class="built_in">chr</span>(v4))</span><br><span class="line">    j += v3</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># I never broke the encoding: I_a_M_t_h_e_e_n_C_o_D_i_n_g@flare-on.com</span></span><br><span class="line">flag&#123;I_a_M_t_h_e_e_n_C_o_D_i_n_g@flare-on.com&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="FlareOn5-Ultimate-MineSweeper"><a href="#FlareOn5-Ultimate-MineSweeper" class="headerlink" title="[FlareOn5] Ultimate MineSweeper"></a>[FlareOn5] Ultimate MineSweeper</h2><p><a href="https://www.cnblogs.com/z5onk0/p/17462714.html">大佬题解</a></p><ul><li>透视挂</li><li>无敌挂</li><li>提取数据</li></ul><hr><p>这题不会，但大佬三个方法中的一个，手动操作一下</p><ul><li>无敌挂</li></ul><p><code>右键-编辑方法</code> 或 <code>ctrl+shift+E</code><br>改为 <code>if (this.MineField.BombRevealed &amp;&amp; false)</code> 或直接把这段删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (this.MineField.BombRevealed)</span><br><span class="line">&#123;</span><br><span class="line">    this.stopwatch.Stop();</span><br><span class="line">    Application.DoEvents();</span><br><span class="line">    Thread.Sleep(1000);</span><br><span class="line">    new FailurePopup().ShowDialog();</span><br><span class="line">    Application.Exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变成这样</p><p><img src="./pic/FlareOnCTF.assets/[FlareOn5]Ultimate-MineSweeper.png" alt="alt text"></p><p><code>文件-保存模块</code>，然后运行程序，找到旗子</p><p><img src="./pic/FlareOnCTF.assets/[FlareOn5]Ultimate-MineSweeper-2.png" alt="alt text"><br><img src="./pic/FlareOnCTF.assets/[FlareOn5]Ultimate MineSweeper-1.png" alt="alt text"></p><p><img src="./pic/FlareOnCTF.assets/[FlareOn5]Ultimate-MineSweeper-4.png" alt="alt text"><br><img src="./pic/FlareOnCTF.assets/[FlareOn5]Ultimate-MineSweeper-3.png" alt="alt text"></p><hr><h2 id="FlareOn4-login"><a href="#FlareOn4-login" class="headerlink" title="[FlareOn4]login"></a>[FlareOn4]login</h2><ul><li>题目是一个网页加密，直接查看页面源代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">Html</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>FLARE On 2017<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Enter the flag&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;prompt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Click to check the flag&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;prompt&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> flag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;flag&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> rotFlag = flag.<span class="title function_">replace</span>(<span class="regexp">/[a-zA-Z]/g</span>, <span class="keyword">function</span>(<span class="params">c</span>)&#123;<span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) + <span class="number">13</span>) ? c : c - <span class="number">26</span>);&#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;Correct flag!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;Incorrect flag, rot again&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>rot13加密</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;prompt&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;flag&quot;</span>).<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">var</span> rotFlag = flag.<span class="title function_">replace</span>(<span class="regexp">/[a-zA-Z]/g</span>, <span class="keyword">function</span>(<span class="params">c</span>)&#123;<span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) + <span class="number">13</span>) ? c : c - <span class="number">26</span>);&#125;);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;Correct flag!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;Incorrect flag, rot again&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure><ul><li>rot13解密<br><img src="./pic/FlareOnCTF.assets/[FlareOn4]login.png" alt="alt text"></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test-img</title>
      <link href="/2025/02/01/test-img/"/>
      <url>/2025/02/01/test-img/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文章置顶轮播图</title>
      <link href="/2025/01/29/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
      <url>/2025/01/29/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 创建日期</span><br><span class="line">updated: 更新日期</span><br><span class="line">cover: 文章封面</span><br><span class="line">description: 文章描述</span><br><span class="line">swiper_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三篇文章</title>
      <link href="/2025/01/29/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2025/01/29/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第二篇文章</title>
      <link href="/2025/01/29/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2025/01/29/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="images/2025-01-29-第二篇文章/image.png" alt="alt text"></p><p><img src="/images/2025-01-29-第二篇文章/image1.png" alt="alt text"></p><p><img src="./images/2025-01-29-第二篇文章/image1.png" alt="alt text"></p><p><img src="./images/image.png" alt="alt text"></p><p><img src="/_posts/images/2025-01-29-第二篇文章/image1.png" alt="alt text"></p><p><img src="/pic/2025-01-29-第二篇文章/image1.png" alt="alt text"></p><p><img src="./pic/2025-01-29-第二篇文章/image1.png" alt="alt text"></p><p><img src="./pic/2025-01-29-第二篇文章/image1.png" alt="alt text" style="zoom:50%;" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/01/28/hello-world/"/>
      <url>/2025/01/28/hello-world/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="36dc133e05371a021ab91777f10fb191aa9ded12ae22f39f32403a5144bc9ea6">15614819f5c2827bcb053d181e399f451105f8f8c5dfc7278ae67a5ab301641e4adf10d1fc05b3835ba28e2ecd352085b1b26ba8bf5522c38bc66b9eae9446d7ca5fcf7561a0772d2453e38eb54f918605c70074343fe6f1f5f61bf1efec39ed2ee24105afc7a0bfd20510e054b7a16057d4ceeb11da83aacfd8a9070a862185e2b9c7fe8f84f292c87d290fa4785f0d49b0198637ca0a55d313035d50bfc388587b4c4b3cedadd7ca56d3e963af5ff14df7d07413376ea6f237e6bb1a2c68779b9dea8ade37c778ad1655ec05e22feb6c2c54cc96b323c3b6d5467372b8cb390f56f2db2f2972ed1ebdc90d51b95da49ced6a67935d676022d92bdc0fa421c7aa5faa6ff872cb8368a4c5d966c2edb7181b268339ecb56d7bc211de1122e7700ad1e22346c8f49f29f131bc3111c8370602a85463e225d9ee3acb95dc3ca340d1e6abda8700268e033c64915d71b7dfbabd66cb9c4cc4d41cb6ae02a942030bd1bccfb4883f071508c376f3e91b117c2d0ec88e7201516fd2507f1bc4e6a6300bf7fe93ab1a7c7a30888c387dcdfdc5bfab46a3dd7f946535f97669034fcf801304da2bae904d65b87bb2f15b378c342c1d4db272bdf6fbdb75c126b6f98dbadce5573659abbce58f6e3c97dd4c6f5116514e7c1b6d535761219dd764cd37920b65e6be5ae2d2911dac5e36764109be1f42f0271ea8c228719dd8fa951fd133816db359b90ba463abc8bf57091ffdf0dd82c416d10f6ea55ee5fe647428336500404b108f4b0d66aaa9fb24b4d2111ef965c38844ed49f4d865d0496b532c7a03578785f154c1fbd5ee86a937e5f9f770c5cb2605bd005ef7e8a1d7690f8d2e1249a93c317a2383d86b5b501d918b5ef2f610982259b8b15b0ce299e513b82d5a839a6f1d5552e8541605515255017a850e3423408229c890f83c36e34e7cc24d3d5fb083fb4a5f5ed052cc9374c4c17723d80e8a73acffd47e950810f783d5fb737e4e0cf4e04f9131eea670bc1d2cc2bcfa33900f5a2504f6d927aa6ce8cb98791f88f6970ca2a013678966c8634366b5cea48a2fd1e60fe32e72117d143262bad0cebd2b9771c3774427dd26fcd0de71471188fb270f4c84c7fd0a8d618a5ce3e4dd4c85d978b173db060e404353c3bc770e4dcee0f73cf8284a459c7086713a73021a14398d9c94195a7030ede43004d4f6c1169d85532fc2baaa2b0d0dc5556a93e32410a4691055121b52e6653ed69e680ec2bc70fb42c923f577fc143b5a1a4430ecae231d1f68a661ebcc00f547532d72ff8c31f8df9b4baed85789ffacf12e3285966c89f586e5f95fecc664e5c51a8fd46b8c10ae0e9449668ea3d1f784d562b7cf322ed93f989f89d86c3c6eaa28f27b39542795b1d79128e1d830c88aa9f80316c4f055c1c35347d23873d772970dee76dfb950fd7993ccf6f46fc75aaa4c73cd7d3776c44d025d94d8bc80e621b6e21f687343e02f55ce7d499278321cb83d0b8c85a5b8c4071df309addc96b66eed45ca98e93315156415ca213b48c916c6b84134f1355b028f4ae56f46d69a1e899a2e3e9710033cd7bf03758189033af943a6c4b41ce1139f118cbfca3b2587978cfa0589fd890a535db399f98b33dd868fe27a466f265e6667b0099950ba0422022673f1e07d8f931066fd8387fec8c72126c53b9c5985830670805ad9a16a51509acc21955cab89658509a3b22e436f740abb1b957f96ac727655154ac33250a2a86322932756552fc41e3675a47492eb541053a3b1bc2a75f0c79feddcc5bd8007d4ffedf013078ec8cb846cba93da2cc4f40ff639bb9a5e30b02a4fa4d2f3180618593abd200b23ed6f2d1f7c9c435e615abf26e8d254dc1141b46680ab7710ca46feec6e77cd0de60705485ff1a9a0b2696e2e871cac448d27321df37efbc476c9d8c398bc20621244e8f2296551a0d9171d47127e1b6d8dae2f9fcaaf6ad974d9ccfbc666c9feaf90b52eb0e663f1da6393483ca39202e81f876fa78b0059316c9bf70e5bc97f38fd875c4116c50a03611c8326f21b185fc0c435384ba939a88c82a1ad40809e8089ea7392e6df74e92ac0d9bdb273034f981163aed105102e8d2d76a65d940383bf9f79fc4573b5d30a45b8d48f6a2252898f19ea36484c61fd438277538ceaf6b9544315a6f23e92681b060bf68be7e860323b3f5ba166d6bc59441b021a0f624fd0676d50e65bfc6a5d3267a5dc6c68fc7ab8a44ea70a38da3d8041243aa89d6050eb3ce7c38a08760318d91b674cb79f8b9ff7097722b1f831bd1697e5f10f6c4d14c11e402b700f61db1f9e01a52f943f6d81b9e0280f1d4604c0bb8c57c0b5ae5ab96a56aadbfbea7aae1729dc5562152c238f86697888a0340d6733ab988cb7c3d7b64c66bc07be572243c55cdfff54beb0a0d6af467293d7b5848183a1403252f6079cf977c8353ad332795515e997c3223e3da9bbd80a7757dc08c6142a351ff72c85b120ea17cacffdb5fe4ed4bcc0240d71744d372e1caee8f43429eb1d42a0478fe7d57337659651e3f9e5c1b4ffb8ca9c9facbf34d5fea7a1f413fe8cfa420d29ead94e562fda59a76190feb28336d6bb973f17d2c1463180898cbdb9e77f8d75f37799a196238a21a2dd0c48781750ca8a084d5cf112c6200c8587c03860d84dd9a9d40b1d1233aecb29f74966048176a0c415370fefeee6635fd8b7781c9c6d7e6d5594934de2b55121d8addfd37abb65d9b862f413517a542df46bb24000b72390c755b62cdc1a6a32d05e6b71ddd11473a8228fb5118fe62c1757b2d46132505b820d0e06c5917a7726844d86e836f1bf0970df84a29337a6349a145fd115e99b718b8920911a700a720d4c6d8e1a502ecdadd33b952f50a9647b39d35d2ddce4a8729d0050c9ff57d692f29913e37144df7ef2f34ddb855cb2e2458d0a9c2d4c5b89e3c2b91a4b56ea35c8b4afc25fc676733de6f322fcbb84e74e4676408e87c4df8d7d9561b8241a7dc8c15868a01c5cb57fd9501dd3f1340532eeae292f7e497a7d17cb8fd60f5ef2781cc1f7c00706c76a7ad8ae4e93e1a01ee9473eb4a9a192247f9e3547398f2bceda241f0ba7d3e471b6808febfe7282c0fe048030b0d01a7cc6cbea960c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025-01-28-第一篇文章.md</title>
      <link href="/2025/01/28/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2025/01/28/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="标题-壹"><a href="#标题-壹" class="headerlink" title="标题-壹"></a>标题-壹</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }/*自定义字体*/  @font-face {    /* 为载入的字体取名字(随意) */    font-family: 'YSHST';    /* 字体文件地址(相对或者绝对路径都可以) */    src: url(/font/优设好身体.woff2);    /* 定义加粗样式(加粗多少) */    font-weight: normal;    /* 定义字体样式(斜体/非斜体) */    font-style: normal;    /* 定义显示样式 */    font-display: block;  }/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/*导航栏魔改（居中）*//* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -125px;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background:rgb(57, 197, 187);  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.1;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}/*页面样式调节*//*:root已放css最前面*//* :root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);} *//* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}/* 滚动条样式 */::-webkit-scrollbar {  width: 8px;  height: 8px;}::-webkit-scrollbar-track {  background-color: rgba(73, 177, 245, 0.2);  border-radius: 2em;}::-webkit-scrollbar-thumb {  background-color: var(rgba(73, 177, 245, 0.2));  background-image: -webkit-linear-gradient(    45deg,    rgba(255, 255, 255, 0.4) 25%,    transparent 25%,    transparent 50%,    rgba(255, 255, 255, 0.4) 50%,    rgba(255, 255, 255, 0.4) 75%,    transparent 75%,    transparent  );  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: var(rgba(73, 177, 245, 0.2));}/* 欢迎信息 */#welcome-info {  background: linear-gradient(45deg, #b9f4f3, #e3fbf9);  border-radius: 18px;  padding: 8px;}[data-theme="dark"] #welcome-info {  background: #212121;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){now.setTime(now.getTime()+1e3);    var e=new Date("01/28/2025 22:00:00"),t=Math.trunc(234e8+(now-e)/1e3*17),a=(t/1496e5).toFixed(6),o=new Date("01/28/2025 22:00:00"),n=(now-o)/1e3/60/60/24,r=Math.floor(n),i=(now-o)/1e3/60/60-24*r,s=Math.floor(i);1==String(s).length&&(s="0"+s);    var d=(now-o)/1e3/60-1440*r-60*s,l=Math.floor(d);1==String(l).length&&(l="0"+l);var g=(now-o)/1e3-86400*r-3600*s-60*l,b=Math.round(g);1==String(b).length&&(b="0"+b);let c="";c=s<18&&s>=9?`<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg' title='什么时候能够实现财富自由呀~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`:`<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg' title='下班了就该开开心心地玩耍~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=c)}setInterval((()=>{createtime()}),1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title.js"/>
      <url>/js/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = '愿此行';    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = '终抵群星';    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(57, 197, 187)'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/txmap.js"/>
      <url>/js/txmap.js</url>
      
        <content type="html"><![CDATA[//get请求$.ajax({    type: 'get',    url: 'https://apis.map.qq.com/ws/location/v1/ip',    data: {        key: '6SMBZ-5PHKT-JSQXK-VFKNX-IPMQO-UIFFE',        output: 'jsonp',    },    dataType: 'jsonp',    success: function (res) {        ipLoacation = res;    }})function getDistance(e1, n1, e2, n2) {    const R = 6371    const { sin, cos, asin, PI, hypot } = Math    let getPoint = (e, n) => {        e *= PI / 180        n *= PI / 180        return { x: cos(n) * cos(e), y: cos(n) * sin(e), z: sin(n) }    }    let a = getPoint(e1, n1)    let b = getPoint(e2, n2)    let c = hypot(a.x - b.x, a.y - b.y, a.z - b.z)    let r = asin(c / 2) * 2 * R    return Math.round(r);}function showWelcome() {    let dist = getDistance(113.34499552, 23.15537143, ipLoacation.result.location.lng, ipLoacation.result.location.lat); //这里换成自己的经纬度    let pos = ipLoacation.result.ad_info.nation;    let ip;    let posdesc;    //根据国家、省份、城市信息自定义欢迎语    switch (ipLoacation.result.ad_info.nation) {        case "日本":            posdesc = "よろしく，一起去看樱花吗";            break;        case "美国":            posdesc = "Let us live in peace!";            break;        case "英国":            posdesc = "想同你一起夜乘伦敦眼";            break;        case "俄罗斯":            posdesc = "干了这瓶伏特加！";            break;        case "法国":            posdesc = "C'est La Vie";            break;        case "德国":            posdesc = "Die Zeit verging im Fluge.";            break;        case "澳大利亚":            posdesc = "一起去大堡礁吧！";            break;        case "加拿大":            posdesc = "拾起一片枫叶赠予你";            break;        case "中国":            pos = ipLoacation.result.ad_info.province + " " + ipLoacation.result.ad_info.city + " " + ipLoacation.result.ad_info.district;            ip = ipLoacation.result.ip;            switch (ipLoacation.result.ad_info.province) {                case "北京市":                    posdesc = "北——京——欢迎你~~~";                    break;                case "天津市":                    posdesc = "讲段相声吧。";                    break;                case "河北省":                    posdesc = "山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。";                    break;                case "山西省":                    posdesc = "展开坐具长三尺，已占山河五百余。";                    break;                case "内蒙古自治区":                    posdesc = "天苍苍，野茫茫，风吹草低见牛羊。";                    break;                case "辽宁省":                    posdesc = "我想吃烤鸡架！";                    break;                case "吉林省":                    posdesc = "状元阁就是东北烧烤之王。";                    break;                case "黑龙江省":                    posdesc = "很喜欢哈尔滨大剧院。";                    break;                case "上海市":                    posdesc = "众所周知，中国只有两个城市。";                    break;                case "江苏省":                    switch (ipLoacation.result.ad_info.city) {                        case "南京市":                            posdesc = "这是我挺想去的城市啦。";                            break;                        case "苏州市":                            posdesc = "上有天堂，下有苏杭。";                            break;                        default:                            posdesc = "散装是必须要散装的。";                            break;                    }                    break;                case "浙江省":                    posdesc = "东风渐绿西湖柳，雁已还人未南归。";                    break;                case "河南省":                    switch (ipLoacation.result.ad_info.city) {                        case "郑州市":                            posdesc = "豫州之域，天地之中。";                            break;                        case "南阳市":                            posdesc = "臣本布衣，躬耕于南阳。此南阳非彼南阳！";                            break;                        case "驻马店市":                            posdesc = "峰峰有奇石，石石挟仙气。嵖岈山的花很美哦！";                            break;                        case "开封市":                            posdesc = "刚正不阿包青天。";                            break;                        case "洛阳市":                            posdesc = "洛阳牡丹甲天下。";                            break;                        default:                            posdesc = "可否带我品尝河南烩面啦？";                            break;                    }                    break;                case "安徽省":                    posdesc = "蚌埠住了，芜湖起飞。";                    break;                case "福建省":                    posdesc = "井邑白云间，岩城远带山。";                    break;                case "江西省":                    posdesc = "落霞与孤鹜齐飞，秋水共长天一色。";                    break;                case "山东省":                    posdesc = "遥望齐州九点烟，一泓海水杯中泻。";                    break;                case "湖北省":                    posdesc = "来碗热干面！";                    break;                case "湖南省":                    posdesc = "74751，长沙斯塔克。";                    break;                case "广东省":                    posdesc = "老板来两斤福建人。";                    break;                case "广西壮族自治区":                    posdesc = "桂林山水甲天下。";                    break;                case "海南省":                    posdesc = "朝观日出逐白浪，夕看云起收霞光。";                    break;                case "四川省":                    posdesc = "康康川妹子。";                    break;                case "贵州省":                    posdesc = "茅台，学生，再塞200。";                    break;                case "云南省":                    posdesc = "玉龙飞舞云缠绕，万仞冰川直耸天。";                    break;                case "西藏自治区":                    posdesc = "躺在茫茫草原上，仰望蓝天。";                    break;                case "陕西省":                    posdesc = "来份臊子面加馍。";                    break;                case "甘肃省":                    posdesc = "羌笛何须怨杨柳，春风不度玉门关。";                    break;                case "青海省":                    posdesc = "牛肉干和老酸奶都好好吃。";                    break;                case "宁夏回族自治区":                    posdesc = "大漠孤烟直，长河落日圆。";                    break;                case "新疆维吾尔自治区":                    posdesc = "驼铃古道丝绸路，胡马犹闻唐汉风。";                    break;                case "台湾省":                    posdesc = "我在这头，大陆在那头。";                    break;                case "香港特别行政区":                    posdesc = "永定贼有残留地鬼嚎，迎击光非岁玉。";                    break;                case "澳门特别行政区":                    posdesc = "性感荷官，在线发牌。";                    break;                default:                    posdesc = "带我去你的城市逛逛吧！";                    break;            }            break;        default:            posdesc = "带我去你的国家逛逛吧。";            break;    }    //根据本地时间切换欢迎语    let timeChange;    let date = new Date();    if (date.getHours() >= 5 && date.getHours() < 11) timeChange = "<span>上午好</span>，一日之计在于晨！";    else if (date.getHours() >= 11 && date.getHours() < 13) timeChange = "<span>中午好</span>，该摸鱼吃午饭了。";    else if (date.getHours() >= 13 && date.getHours() < 15) timeChange = "<span>下午好</span>，懒懒地睡个午觉吧！";    else if (date.getHours() >= 15 && date.getHours() < 16) timeChange = "<span>三点几啦</span>，一起饮茶呀！";    else if (date.getHours() >= 16 && date.getHours() < 19) timeChange = "<span>夕阳无限好！</span>";    else if (date.getHours() >= 19 && date.getHours() < 24) timeChange = "<span>晚上好</span>，夜生活嗨起来！";    else timeChange = "夜深了，早点休息，少熬夜。";    try {        //自定义文本和需要放的位置        document.getElementById("welcome-info").innerHTML =            `<b><center>🎉 欢迎信息 🎉</center>&emsp;&emsp;欢迎来自 <span style="color:var(--theme-color)">${pos}</span> 的小伙伴，${timeChange}您现在距离站长约 <span style="color:var(--theme-color)">${dist}</span> 公里，当前的IP地址为： <span style="color:var(--theme-color)">${ip}</span>， ${posdesc}</b>`;    } catch (err) {        // console.log("Pjax无法获取#welcome-info元素🙄🙄🙄")    }}window.onload = showWelcome;// 如果使用了pjax在加上下面这行代码// document.addEventListener('pjax:complete', showWelcome);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
