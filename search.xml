<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>F-Hacker-CTF</title>
      <link href="/2025/03/20/F-Hacker-CTF/"/>
      <url>/2025/03/20/F-Hacker-CTF/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7aa79bf933cdd1107ec002cc45ae58fe86d3a9eb4c957a6037aa21c28ca062d7">15614819f5c2827bcb053d181e399f45f05939722092d4381dc13976494b4719</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向-SMC</title>
      <link href="/2025/03/20/%E9%80%86%E5%90%91-SMC/"/>
      <url>/2025/03/20/%E9%80%86%E5%90%91-SMC/</url>
      
        <content type="html"><![CDATA[<h1 id="Self-Modified-Code"><a href="#Self-Modified-Code" class="headerlink" title="Self-Modified Code"></a>Self-Modified Code</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>自修改代码</strong>（Self-Modified Code）是一类特殊的代码技术，即<strong>在运行时修改自身代码</strong>，从而使得程序实际行为与反汇编结果不符，同时修改前的代码段数据也可能非合法指令，从而无法被反汇编器识别，这加大了软件逆向工程的难度。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>SMC的基本原理是在编译可执行文件时，将需要加密的代码区段（例如函数、代码块等）单独编译成一个section（段），并将其标记为<strong>可读、可写、不可执行</strong>（readable, writable, non-executable），然后通过某种方式在程序运行时将这个section解密为可执行代码，并将其标记为<strong>可读、可执行、不可写</strong>（readable, executable, non-writable）。这样，攻击者就无法在内存中找到加密的代码，从而无法直接执行或修改加密的代码。</p><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/memoryapi/nf-memoryapi-virtualprotect#parameters">VirtualProtect 函数 (memoryapi.h) - Win32 apps | Microsoft Learn</a>是 Windows 操作系统中的一个 API 函数，它允许应用程序改变一个内存页的保护属性（<a href="https://learn.microsoft.com/zh-cn/windows/win32/Memory/memory-protection-constants">每次保护常量</a>）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">VirtualProtect</span><span class="params">(</span></span><br><span class="line"><span class="params">  LPCVOID lpAddress,  <span class="comment">// 要改变保护属性的内存页的起始地址</span></span></span><br><span class="line"><span class="params">  SIZE_T dwSize,      <span class="comment">// 内存页的大小</span></span></span><br><span class="line"><span class="params">  DWORD flNewProtect, <span class="comment">// 新的保护属性</span></span></span><br><span class="line"><span class="params">  PDWORD lpflOldProtect <span class="comment">// 存储旧的保护属性</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ul><li><p>SMC的实现方式有很多种：</p><ul><li><p>通过修改PE文件的Section Header</p></li><li><p>使用API Hook实现代码加密和解密</p></li><li><p>使用VMProtect等第三方加密工具等</p></li></ul></li></ul><h2 id="破解方式"><a href="#破解方式" class="headerlink" title="破解方式"></a>破解方式</h2><ul><li>自修改代码破解方式：<ul><li>通过IDA动调,程序始终要根据正确代码来运行,我们就在程序正确的时候,再分析</li><li>通过分析加密逻辑,来还原程序</li><li>通过Ollydug来dump下正确的逻辑</li></ul></li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>[MoeCTF2023]SMC</p><p><img src="https://s1.vika.cn/space/2025/03/20/ab73e15d25434b919bfe988542e5220c" alt="PixPin_2025-03-20_17-08-17"></p><p>发现VirtualProtect函数，修改了loc_4014D0()权限</p><p><img src="https://s1.vika.cn/space/2025/03/20/c1e3279a33da40d78270a31fa3d94ed8" alt="PixPin_2025-03-20_17-10-37"></p><p>双击进入loc_4014D0，发现IDA识别不了</p><p><img src="https://s1.vika.cn/space/2025/03/20/c46edce51dfc4a16a7c92d66229aa84b" alt="PixPin_2025-03-20_17-16-29"></p><p>写idapython脚本还原</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">122</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  *((_BYTE *)sub_4014D0 + i) ^= <span class="number">0x66u</span>;</span><br><span class="line">  result = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2025/03/20/81d82b2c948b4cefadb366db91afae1f" alt="PixPin_2025-03-20_17-20-26"></p><p>选中loc_4014D0（D0到F2），按C转化为汇编代码（force强制），再按选中loc_4014D0：按P创建函数，按F5反编译即可</p><p><img src="https://s1.vika.cn/space/2025/03/20/f6bfbbf5fcd04c84b6307693192c6541" alt="PixPin_2025-03-20_17-22-34"></p><p>接着提取byte_40A000[]数据，解密</p><p>EXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enc = [</span><br><span class="line">    <span class="number">0x9F</span>, <span class="number">0x91</span>, <span class="number">0xA7</span>, <span class="number">0xA5</span>, <span class="number">0x94</span>, <span class="number">0xA6</span>, <span class="number">0x8D</span>, <span class="number">0xB5</span>, <span class="number">0xA7</span>, <span class="number">0x9C</span>,</span><br><span class="line">    <span class="number">0xA6</span>, <span class="number">0xA1</span>, <span class="number">0xBF</span>, <span class="number">0x91</span>, <span class="number">0xA4</span>, <span class="number">0x53</span>, <span class="number">0xA6</span>, <span class="number">0x53</span>, <span class="number">0xA5</span>, <span class="number">0xA3</span>,</span><br><span class="line">    <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x91</span>, <span class="number">0x9E</span>, <span class="number">0x8F</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag += <span class="built_in">chr</span>((enc[i] ^ <span class="number">0x39</span>) - <span class="number">57</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># moectf&#123;Self_Mod1f1cation&#125;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.secpulse.com/archives/197285.html">探究SMC局部代码加密技术以及在CTF中的运用 - SecPulse.COM | 安全脉搏</a></p><p><a href="https://blog.csdn.net/Sciurdae/article/details/133717752">CTF Reverse逆向学习之SMC动态代码加密技术-逆向 smc-CSDN博客</a></p><p><a href="https://xz.aliyun.com/news/14551?time__1311=eqUxuiitKGq7qhxBqDwjDAxYwO2bQQKqH4D&amp;u_atoken=0a41eea214a26e31ddaa99b8710cb2c8&amp;u_asig=0a472f8c17423939096368378e0035">文章 - CTF Reverse逆向学习之SMC动态代码加密技术 - 先知社区</a></p><p><a href="https://www.52pojie.cn/thread-1780843-1-1.html">【reverse】手把手带你基于dll实现多次SMC - 吾爱破解 - 52pojie.cn</a></p><p><a href="https://xz.aliyun.com/news/14093?time__1311=eqUxuiDti%3DQiwx05DI72xm2DRx7uQk8i8iD&amp;u_atoken=54435cd6be1a4d993a2048e549ba5793&amp;u_asig=0a472f9217423960410267956e0052">文章 - SMC in CTF - 先知社区</a></p><p><a href="https://blog.csdn.net/weixin_40729735/article/details/121595169">CTF-SMC 逆向练习_ctf smc-CSDN博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 逆向 </tag>
            
            <tag> SMC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向-反调试</title>
      <link href="/2025/03/02/%E9%80%86%E5%90%91-%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
      <url>/2025/03/02/%E9%80%86%E5%90%91-%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="反调试技术-部分"><a href="#反调试技术-部分" class="headerlink" title="反调试技术(部分)"></a>反调试技术(部分)</h1><ul><li><p>动态调试是一种观察程序运行状态的一种手段。</p></li><li><p>逆向工程中的动态调试的目的主要有：验证静态分析结果和观察程序运行时的数据。</p></li><li><p>而为了防止我们对程序进行调试，程序开发者通常会设置反调试来检测自己开发的程序是否正在被调试。</p></li><li><p>花指令通常干扰静态分析；反调试与之相反，主要为了干扰动态调试</p></li></ul><h2 id="API反调试"><a href="#API反调试" class="headerlink" title="API反调试"></a>API反调试</h2><p>Windows内部提供了一些用于检测调试器的<strong>API</strong></p><p>基于<strong>PEB</strong>（Process Environment Block，进程环境块）的静态反调试，存放进程信息的一个结构体</p><p><strong>TEB</strong> （Thread Environment Block，线程环境块）结构体，进程中的每一个线程都对应着一个TEB结构体</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kd&gt;dt_TEB</span><br><span class="line">nt! _TEB</span><br><span class="line">...</span><br><span class="line">+<span class="number">0</span>x030 ProcessEnvironmentBlock :Ptr32_PEB</span><br><span class="line">...</span><br><span class="line">kd&gt;dt_TEB</span><br><span class="line">...</span><br><span class="line">+<span class="number">0</span>x002 BeingDebugged:UChar</span><br><span class="line">...</span><br><span class="line">+Ox018 ProcessHeap:Ptr32 Void</span><br><span class="line">...</span><br><span class="line">+<span class="number">0</span>x068 NtGlobalF1ag:Uint4B</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PEB结构体中中，<code>BeingDebugged</code>、<code>ProcessHeap</code>、<code>NtGlobalFlag</code>是与调试信息相关</p><ul><li><p><code>BeingDebugged</code>:当进程处于被调试状态时，值为1，否则为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov eax,dword ptr fs:[18];          //获取TEB地址,AddressOfTEB</span><br><span class="line">mov eax,dword ptr ds:[eax+30];    //通过TEB获取PEB的地址,AddressOfPEB</span><br><span class="line">mov eax byte ptr da:[eax+2];        //获取PEB偏移为2的结构体元素BeginDebugged，并返回这个值</span><br><span class="line">retn</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>ProcessHeap</code>:指向Heap结构体，偏移0xC处为<code>Flags</code>成员，偏移0x10处为<code>ForceFlags</code>成员。</p><p>通常情况下，<code>Flags</code>的值为2，<code>ForceFlags</code>的值为0，当进程被调试时会发生改变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov eax,dword ptr fs:[0x18];     //TEB的起始地址</span><br><span class="line">mov eax,dword ptr ds:[eax+30];   //PEB的地址</span><br><span class="line">mov eax,dword ptr ds:[eax+18];   //PEB.Processheap的地址</span><br></pre></td></tr></table></figure></li></ul><ul><li><code>NGlobalFlag</code>:占四个字节，默认值为0。当进程处于被调试状态时，第一个字节会被置为0x70。</li></ul><hr><h3 id="IsDebuggerPresent"><a href="#IsDebuggerPresent" class="headerlink" title="IsDebuggerPresent()"></a>IsDebuggerPresent()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">IsDebuggerPresent</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>返回值为1表示当前进程被调试的状态，反之为0.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call IsDebuggerPresent</span><br><span class="line">test al, al</span><br><span class="line">jne being_debugged</span><br></pre></td></tr></table></figure><p>当程序处于3环(低权限)时， <code>FS:[0]</code> 寄存器指向<strong>TEB</strong>，<strong>TEB</strong>向后偏移0x30字节<code>FS[0x30h]</code>的位置保存的是<strong>PEB</strong>结构体的地址。</p><p>在 PEB 0x2 偏移处存储的是一字节长度的 <code>BeingDebugged</code> 标志位,</p><p><code>IsDebuggerPresent</code>函数本质是读取该进程对应 PEB 的 <code>BeingDebugged</code> 标志位并返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov eax,dword ptr fs:[18];          //获取TEB地址,AddressOfTEB</span><br><span class="line">mov eax,dword ptr ds:[eax+30];    //通过TEB获取PEB的地址,AddressOfPEB</span><br><span class="line">mov eax byte ptr da:[eax+2];        //获取PEB偏移为2的结构体元素BeginDebugged，并返回这个值</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2025/03/02/f7a8bffdafcc409e91cb85f3ceb81a96" alt="6ded46482d53190075b609d8596b2218"></p><ul><li>绕过方法<ul><li>只需要将PEB 0x2偏移处的结构体元素<code>BeingDebugged</code>标志设为<code>0</code>即可 (或改变一下返回值)</li><li>把判断<code>je</code>改为<code>jne</code></li></ul></li></ul><hr><h3 id="CheckRemoteDebuggerPresent"><a href="#CheckRemoteDebuggerPresent" class="headerlink" title="CheckRemoteDebuggerPresent()"></a>CheckRemoteDebuggerPresent()</h3><p>另一个常用的<strong>API</strong>是<code>CheckRemoteDebuggerPresent</code>，返回值为1表示当前进程被调试的状态，反之为0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL WINAPI <span class="title function_">CheckRemoteDebuggerPresent</span><span class="params">(</span></span><br><span class="line"><span class="params">  _In_    HANDLE hProcess,</span></span><br><span class="line"><span class="params">  _Inout_ PBOOL  pbDebuggerPresent</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>如果调试器存在 (通常是检测自己是否正在被调试), 该函数会将<code>pbDebuggerPresent</code>指向的值设为<code>0xffffffff</code></p><p>函数在判断 <code>hProcess</code>不是 0 以及检查输出参数指针是否为<code>NULL</code> 后就调用了 <code>NtQueryInformationProcess</code>函数</p><p><img src="https://s1.vika.cn/space/2025/03/02/2af96753bbe9438e957d19b322d406f2" alt="b057599fb76ceaed483d0eb9a3e16daf"></p><hr><h3 id="NtQueryInformationProcess"><a href="#NtQueryInformationProcess" class="headerlink" title="NtQueryInformationProcess()"></a>NtQueryInformationProcess()</h3><p>检索有关指定进程的信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__kernel_entry NTSTATUS <span class="title function_">NtQueryInformationProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]            HANDLE           ProcessHandle,</span></span><br><span class="line"><span class="params">  [in]            PROCESSINFOCLASS ProcessInformationClass,</span></span><br><span class="line"><span class="params">  [out]           PVOID            ProcessInformation,</span></span><br><span class="line"><span class="params">  [in]            ULONG            ProcessInformationLength,</span></span><br><span class="line"><span class="params">  [out, optional] PULONG           ReturnLength</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>参数解释：<br>ProcessHandle：要为其检索信息的进程句柄。<br>ProcessInformationClass：要检索的进程信息的类型。<br>ProcessInformation：指向调用应用程序提供的缓冲区的指针，函数将请求的信息写入其中。 写入的信息的大小因 ProcessInformationClass 参数的数据类型而异。<br>ProcessInformationLength：指向的缓冲区的大小（以字节为单位）。<br>ReturnLength：指向变量的指针，其中函数返回所请求信息的大小。 如果函数成功，则这是 由 ProcessInformation 参数指向的缓冲区中写入的信息的大小 (如果缓冲区太小，则为成功接收信息) 所需的最小缓冲区大小。</p></blockquote><hr><h2 id="进程名反调试"><a href="#进程名反调试" class="headerlink" title="进程名反调试"></a>进程名反调试</h2><h3 id="CreateToolhelp32Snapshot"><a href="#CreateToolhelp32Snapshot" class="headerlink" title="CreateToolhelp32Snapshot()"></a>CreateToolhelp32Snapshot()</h3><p>遍历当前系统中的进程列表，检测是否存在与调试器相关的进程名</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否存在指定的调试器进程</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsDebuggerProcessRunning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* debuggerNames[] = &#123; <span class="string">&quot;ollydbg.exe&quot;</span>, <span class="string">&quot;x64dbg.exe&quot;</span>, <span class="string">&quot;ida.exe&quot;</span>, <span class="string">&quot;windbg.exe&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建进程快照</span></span><br><span class="line">    HANDLE hSnapshot = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PROCESSENTRY32 pe32;</span><br><span class="line">    pe<span class="number">32.</span>dwSize = <span class="built_in">sizeof</span>(PROCESSENTRY32);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历进程列表</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Process32First</span>(hSnapshot, &amp;pe32)) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历已知的调试器名称</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; debuggerName : debuggerNames) &#123;</span><br><span class="line">                <span class="comment">// 将进程名转换为小写以进行匹配</span></span><br><span class="line">                std::string processName = pe<span class="number">32.</span>szExeFile;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; c : processName) c = <span class="built_in">tolower</span>(c);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (processName == debuggerName) &#123;</span><br><span class="line">                    <span class="built_in">CloseHandle</span>(hSnapshot);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 找到匹配的调试器进程</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hSnapshot, &amp;pe32));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseHandle</span>(hSnapshot);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 未找到调试器进程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">IsDebuggerProcessRunning</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Debugger process detected! Exiting...\n&quot;</span>;</span><br><span class="line">        <span class="built_in">ExitProcess</span>(<span class="number">1</span>);  <span class="comment">// 检测到调试器，退出程序</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;No debugger detected.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常程序逻辑</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Program is running.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>调试器进程名列表</strong>：在<code>debuggerNames</code>数组中列出了常见的调试器进程名（如<code>ollydbg.exe</code>, <code>x64dbg.exe</code>等）。可以根据需要添加更多的调试器进程名。</li><li><strong>CreateToolhelp32Snapshot</strong>：这是一个Windows API，用于创建系统中所有进程的快照，以便遍历这些进程。</li><li><strong>Process32First 和 Process32Next</strong>：这些函数用于遍历进程快照中的每一个进程。</li><li><strong>tolower</strong>：为了匹配时忽略大小写，将进程名全部转换为小写进行比较。</li><li><strong>ExitProcess</strong>：如果发现调试器进程，程序直接退出。</li><li>这种方法可以用来检测外部调试器是否正在运行，但它不是百分之百可靠，因为高级调试器可能会通过修改进程名或隐藏自己来规避检测。</li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p><strong>Fuko’s starfish</strong></p><p>一个很典的 windows exe 逆向，考察基本的 dll 程序调试，windows 常见反调试和常见花指令。</p><p>程序开始时，在挂载 dll 的同时启动一个线程函数(dll中)。</p><p><img src="https://s1.vika.cn/space/2025/03/02/25961323f83d4817b32bd8a1f9451078" alt="PixPin_2025-03-02_15-56-09"></p><p><img src="https://s1.vika.cn/space/2025/03/02/54305d39f3d141859a129bf8f95e13a6" alt="PixPin_2025-03-02_16-25-37"></p><p>在 exe 初始化和加载 dll 的过程中都会加载一个全局对象，在全局对象的构造函数中设置了一个反调试。</p><p><img src="https://s1.vika.cn/space/2025/03/02/2d6396e4e923497c84921508e009a1dc" alt="PixPin_2025-03-02_15-47-05"></p><p><img src="https://s1.vika.cn/space/2025/03/02/849742c1addf4a4d9eebb3984b42b5f7" alt="PixPin_2025-03-02_15-47-50"></p><p>这里只需要 <code>patch</code> 掉 <code>push rax</code> 到<code>pop rax</code> 的代码就能看到真实逻辑。</p><p><img src="https://s1.vika.cn/space/2025/03/02/1cf7912061824e31b311a112b9df4c94" alt="PixPin_2025-03-02_15-48-34"></p><p><img src="https://s1.vika.cn/space/2025/03/02/c0b5398aa78d46c0ab968be261e541d9" alt="PixPin_2025-03-02_15-49-37"></p><p>反调试<code>IsDebuggerpersent()</code></p><p><img src="https://s1.vika.cn/space/2025/03/02/622571235f5a43ca92e9816cd4124760" alt="PixPin_2025-03-02_15-50-15"></p><p>用<code>keypatch</code>把<code>jz</code>改为<code>jez</code>，或直接改成<code>jmp</code></p><p><img src="https://s1.vika.cn/space/2025/03/02/c75a68e049124cc795b46aed349d8d47" alt="PixPin_2025-03-02_15-51-19"></p><p><img src="https://s1.vika.cn/space/2025/03/02/98032a5617bd490e8a6c09b06410b6a9" alt="PixPin_2025-03-02_15-52-01"></p><p>对密钥进行了初始化。这里开始的初始化是个障眼法，在花指令后继续更新了密钥，可以看到在后面还有一段更新密钥的代码。</p><p><img src="https://s1.vika.cn/space/2025/03/02/e03f512607fe4b56890e47c829ca4107" alt="PixPin_2025-03-02_20-17-11"></p><p>然后玩过游戏后，进入加密逻辑。这里其实就是一个标准 <code>aes-ecb</code> 加密算法。唯一需要注意的是，在密钥扩展前，会对<code>key</code> 进行最后的操作。如果在调试状态，则会输出<code>hmm...</code>，如果不在调试状态，则会将密钥异或 <code>0x17</code>。</p><p><img src="https://s1.vika.cn/space/2025/03/02/4e8c551477e343fa9063d8620e0815a9" alt="PixPin_2025-03-02_16-12-43"></p><ul><li>CreateToolhelp32Snapshot()</li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/54305d39f3d141859a129bf8f95e13a6" alt="PixPin_2025-03-02_16-25-37"></p><ul><li>CheckRemoteDebuggerPresent()</li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/620127b59b414415a271e2c9335c3b46" alt="PixPin_2025-03-02_20-34-08"></p><p>首先获取正确的 key：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">16</span>];  <span class="comment">// 定义一个长度为16的数组来存储密钥</span></span><br><span class="line">    srand(<span class="number">114514</span>);          <span class="comment">// 初始化随机数种子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">        key[i] = <span class="number">0x17</span> ^ (rand() % <span class="number">0xff</span>);  <span class="comment">// 生成密钥的每个字节</span></span><br><span class="line">        <span class="keyword">if</span> (key[i] &lt; <span class="number">16</span>) <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);    <span class="comment">// 如果小于16，补0</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>, key[i]);             <span class="comment">// 打印密钥字节</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 程序正常结束</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 09e5fdeb683175b6b13b840891eb78d2</span></span><br></pre></td></tr></table></figure><p>然后拿到密文，进行 <code>aes-ecb</code> 解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">hex_key = <span class="string">&quot;09e5fdeb683175b6b13b840891eb78d2&quot;</span></span><br><span class="line">hex_ciphertext = <span class="string">&quot;3d011c190ba090815f672731a89aa47497362167ab2eb4a09418d37d93e646e7&quot;</span></span><br><span class="line">key = binascii.unhexlify(hex_key)</span><br><span class="line">ciphertext = binascii.unhexlify(hex_ciphertext)</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">decrypted = cipher.decrypt(ciphertext)</span><br><span class="line"><span class="built_in">print</span>(decrypted)</span><br><span class="line"><span class="comment"># b&quot;VNCTF&#123;W0w_u_g0t_Fuk0&#x27;s_st4rf1sh&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><p><a href="https://ctf-wiki.org/reverse/platform/windows/anti-debug/example/">反调试技术例题 - CTF Wiki</a></p><p><a href="https://www.cnblogs.com/PaperPlaneFly/p/18474056">逆向常见反调试合集 - 纸飞机低空飞行 - 博客园</a></p><p><a href="https://blog.csdn.net/qq_73985089/article/details/131394834">【CTF-Reverse】IDA动态调试，反调试技术_ida 动态调试-CSDN博客</a></p><p><a href="https://www.bilibili.com/list/watchlater?oid=114002474572402&amp;bvid=BV1WAKMevE6W&amp;spm_id_from=333.1007.top_right_bar_window_view_later.content.click">【第拾期 REVERSE 分享会】VNCTF2025-REVERSE 出题人集结！哔哩哔哩视频</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 逆向 </tag>
            
            <tag> 反调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2025/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2025/03/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络（第八版）"><a href="#计算机网络（第八版）" class="headerlink" title="计算机网络（第八版）"></a>计算机网络（第八版）</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p><strong>计算机网络</strong> （ 简称为<strong>网络</strong> ） 由 若干<strong>节点(node)</strong> 和 连接这些节点 的<strong>链路(link)</strong>组成 。</p></li><li><p>网络中的<strong>节点</strong>可以是计算机、集线器 、交换机或路由器等</p></li><li><p>网络相连的计算机常称为<strong>主机(host)</strong> 。 在互连网中不可缺少的<strong>路由器</strong> ，是一种特殊的计算机（有中央处理器 、存储器 、操作系统等 ），但不能称为主机。</p></li></ul><p><img src="https://s1.vika.cn/space/2025/02/23/5fade174aac54ab39e4a7fff17e6f221" alt="image-20250210190351863"></p><ul><li><strong>网络把许多计算机连接在一起 ， 而互连网则把许多网络通过一些路由 器 连接在一起 。与网络相连的计算机常称为主机</strong></li></ul><p><img src="https://s1.vika.cn/space/2025/02/23/56f79f2cb06f431d803b39c3ef1a762b" alt="image-20250210191024923"></p><ul><li><strong>互联网服务提供者/供应商</strong> <strong>ISP (Internet Service</strong> <strong>Provider)</strong> 。例如， 中国电信、 中国联通和中国移动等公司 都是我国最有名的<strong>ISP</strong> 。</li></ul><ul><li><strong>互联网交换点IXP (Internet eXchange Point)</strong>：更快地转发分组 ，更加有效和更加经济地利用网络资源</li></ul><p><img src="https://s1.vika.cn/space/2025/02/23/2133abd3179d4861a018ba34573010b1" alt="image-20250210191411953"></p><ul><li><strong>互联网协会</strong>(Internet Society , 简称为<strong>ISOC</strong>) [W-ISOC] <ul><li>其下<strong>技术组织</strong>叫作<strong>互联网体系结构委员会 IAB</strong> (Internet Architecture Board) ， 负责管理互联网有关协议的开发</li><li>IAB 下面又 设有两个<strong>工程部</strong>：<ul><li>(1) <strong>互联网工程部 IETF</strong> (Internet Engineering Task Force)</li><li>(2) <strong>互联网研究部 IRTF</strong> (Internet Research Task Force)</li></ul></li></ul></li><li><strong>RFC (Request For Comments)</strong>的意思就是 <strong>“ 请求评论 ”</strong> 。所有的 RFC 文档都可从互联网上免费下载[W-RFC]，而且任何人都可以用电子邮件随时发表对某个文档的意见或建议</li></ul><hr><h3 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h3><h4 id="边缘部分"><a href="#边缘部分" class="headerlink" title="边缘部分"></a>边缘部分</h4><ul><li><p>由所有连接在互联网上的主机组成。 这部分是<strong>用户直接使用的</strong> ，用来进行通信（传送数据 、音 频或视频）和资源共享。</p></li><li><p>这些主机又称为<strong>端系统(end system)</strong> ,可大可小，（摄像头、手机、平板、笔记本、服务器等）</p></li><li><p>我们说 ： “ 主机 A 和主机 B 进 行通信 “ ， 实际上是指： ” 运行在主机 A 上的某个程序和运行在主机 B 上的另 一个程序进行通信 ” 。 由于 “ 进程 ” 就是 “ 运行着的程序 “ ， 因此这也就是指： <strong>“ 主机 A 的 某个进程和主机 B 上的 另一个进程进行通信 ”</strong> 。这种 比较严密的说法通常可 以<strong>简称为 “计算机之间通信”</strong> 。</p></li><li><p>网络边缘的<strong>通信方式</strong></p><ul><li><p><strong>客户 —服务器方式 ( C/S 方式 ）</strong></p><p>主机 A 运行客户程序而主机 B 运行服务器程序 。 在 这种情况下 ， A 是客户而 B 是服务器。 客 户 A 向服务器 B 发出请求服务 ，而服务器 B 向客 户 A 提供服务 。 这里最主要 的特征就是：</p><p>​    <strong>客户是服务请求方 ， 服务器是服务提供方。</strong></p><p><img src="https://s1.vika.cn/space/2025/02/23/efd1928bb6b74010888b25a6e464114d" alt="image-20250210193642409"></p></li></ul></li></ul><ul><li><p><strong>对等方式 ( P2P 方式）</strong></p><ul><li><p>peer-to-peer, 简写为 P2P。是指两台主机在通信时 ， 并<strong>不区分</strong>哪一个是服务请求方和哪一 个是服务提供方 。 <strong>只要两台主机都运行了对等连接软件 ( P2P 软件 ）</strong> ， 它们就可以进行平等的对等连接通信 。 这时， <strong>双方都可以下载对方已经存储在硬盘中的共享文档</strong> 。 因此这种工作方式也称为 P2P 方式 </p></li><li><p>在图l-6中，主机C,D,E和F都运行了P2P程序，因此这几台主机都可进行对等通信（如C和D,E和F,以及C和F)。实际上，对等连接方式从本质上看仍然使用客户－服务器方式，只是对等连接中的每一台主机既是客户同时又是服务器。例如主机C,当C请求D的服务时，C是客户，D是服务器。但如果C又同时向F提供服务，那么C又同时起着服务器的作用</p></li><li><p>对等连接工作方式可支持大量对等用户（如上百万个）同时工作</p><p><img src="https://s1.vika.cn/space/2025/02/23/5d4590e023b949e885fcb912aa6708e8" alt="image-20250210194456319"></p></li></ul></li></ul><h4 id="核心部分"><a href="#核心部分" class="headerlink" title="核心部分"></a>核心部分</h4><ul><li><p>由大量网络和连接这些网络的路由器组成。 这部分是<strong>为边缘部分提供服务的</strong>（提供连通性和交换）。</p></li><li><p>在网络核心部分起特殊作用的是<strong>路由器(router)</strong>，它是一种专用计算机（但不叫作主机）。路由器是实现<strong>分组交换(packet switching)</strong>的关键构件，其任务是<strong>转发收到的分组</strong>，这是网络核心部分最重要的功能</p></li><li><p>分组交换的特点：</p><ul><li><p>分组交换则采用<strong>存储转发技术</strong>：</p><p>例如，每个数据段为<strong>1024bit</strong>气在每一个数据段前面，加上一些必要的控制信息组成的<strong>首部(header)</strong>后，就构成了一个<strong>分组(packet)</strong>。分组又称为<strong>“包”</strong>，而分组的首部也可称为<strong>“包头”</strong>。分组是在互联网中传送的数据单元。</p><p><img src="https://s1.vika.cn/space/2025/02/23/5b20c49c0f4642babee266bc50455def" alt="image-20250210205157375"></p></li><li><p>示意图</p><p><img src="https://s1.vika.cn/space/2025/02/23/5924729aa9614d868a3c37fe28d9bf46" alt="image-20250210205604895"></p></li><li><p>优缺点：</p><p><img src="https://s1.vika.cn/space/2025/02/23/1dfe2bd047164e35abce6bb60b2d3552" alt="image-20250210205907697"></p></li><li><p>交换对比：</p></li></ul></li></ul><pre><code>![image-20250210210043790](https://s1.vika.cn/space/2025/02/23/35446ad625b14682b2853e34f8f0bc90)</code></pre><h3 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h3><ul><li><strong>作用范围：</strong><ul><li><strong>广域网 WAN (Wide Area Network)</strong></li><li><strong>城域网 MAN (Metropolitan Area Network)</strong></li><li><strong>局域网 LAN (Local Area Network)</strong></li><li><strong>个人区域网 PAN (Personal Area Network) 、无线个人区域网 WPAN (Wireless PAN)</strong></li></ul></li></ul><h3 id="计算机的性能（很重要，还未补充）"><a href="#计算机的性能（很重要，还未补充）" class="headerlink" title="计算机的性能（很重要，还未补充）"></a>计算机的性能（很重要，还未补充）</h3><ul><li><p><strong>性能特征：</strong></p><ol><li><strong>速率</strong></li><li><strong>带宽</strong></li><li><strong>吞吐量</strong></li><li><strong>时延</strong><ul><li><strong>发送时延</strong></li><li><strong>传播时延</strong></li><li><strong>处理时延</strong></li><li><strong>排队时延</strong></li></ul></li><li><strong>时延带宽积</strong></li><li><strong>往返时间RTT</strong></li><li><strong>利用率</strong></li></ol></li><li><p><strong>非性能特征：</strong></p><ol><li><strong>费用</strong></li><li><strong>质量</strong></li><li><strong>标准化</strong></li><li><strong>可靠性</strong></li><li><strong>可拓展性和可升级性</strong></li><li><strong>易于管理与维护</strong></li></ol></li></ul><h3 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h3><h4 id="协议与划分层次"><a href="#协议与划分层次" class="headerlink" title="协议与划分层次"></a>协议与划分层次</h4><p>​    在计算机网络中要做到有条不紊地交换数据，就必须遵守一些事先约定好的规则。<strong>这些规则明确规定了所交换的数据的格式以及有关的同步问题</strong>。这里所说的<strong>同步</strong>不是狭义的（即同频或同频同相）而是广义的，即在视频讲解一定的条件下应当发生什么事件（例如，应当发送一个应答信息），<strong>因而同步含有时序的意思</strong>。这些<strong>为进行网络中的数据交换而建立的规则、标准或约定称为网络协议(network protocol)</strong>。网络协议也可简称为<strong>协议</strong>。</p><ul><li><p>网络协议主要由以下三个要素组成：</p><ul><li><p><strong>语法</strong>，即数据与控制信息的结构或格式；</p></li><li><p><strong>语义</strong>，即需要发出何种控制信息，完成何种动作以及做出何种响应；</p></li><li><p><strong>同步</strong>，即事件实现顺序的详细说明。</p></li><li><strong>或称“语法，语义， 动作，时序”</strong></li></ul></li><li><p>划分层次</p><p><img src="https://s1.vika.cn/space/2025/02/23/a0e7f5e95c2145adab4ac3b77dfa9e4b" alt="image-20250210212953613"></p></li></ul><h4 id="具有五层协议的体系结构"><a href="#具有五层协议的体系结构" class="headerlink" title="具有五层协议的体系结构"></a>具有五层协议的体系结构</h4><p><img src="https://s1.vika.cn/space/2025/02/23/805360b5a3204fb993d1108e8fd9012c" alt="image-20250210213115377"></p><p><img src="https://s1.vika.cn/space/2025/02/23/ed90db6f585445e8a7ad659926dcd1e6" alt="image-20250210213245045"></p><ul><li><strong>服务访问点SAP</strong> (Service Access Point) </li><li>OSI 参考模型把对等层次之间传送的数据单位称为该层的<strong>协议数据单元 PDU</strong> (Protocol Data Unit)</li><li>OSI把层与层之间交换的数据的单位称为<strong>服务数据单元SDU</strong>(Service Data Unit)，它可以与PDU不一样。例如，可以是多个SDU合成为一个PDU,也可以是一个SDU划分为几个PDU。</li></ul><p><img src="https://s1.vika.cn/space/2025/02/23/11afe5881c6844349a043bb8542f7d4a" alt="image-20250210213443010"></p><h4 id="TCP-IP-的体系结构"><a href="#TCP-IP-的体系结构" class="headerlink" title="TCP/IP 的体系结构"></a><strong>TCP/IP</strong> 的体系结构</h4><p><img src="https://s1.vika.cn/space/2025/02/23/dad004b7ab794002ab7473ecf7a850f8" alt="image-20250210213916954"></p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h3 id="数据通信基础知识"><a href="#数据通信基础知识" class="headerlink" title="数据通信基础知识"></a>数据通信基础知识</h3><ul><li><strong>数据通信系统的模型</strong></li><li><strong>模拟信号</strong>，或连续信号 ，代表消息的参数的取值是<strong>连续的</strong>。</li><li><strong>数字信号</strong>，或离散信号 ，代表消息的参数的取伯是<strong>离散的</strong>。</li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/c2514abf72d8401486312d4d39b9d9dc" alt="image-20250210214507335"></p><h4 id="常见编码方式"><a href="#常见编码方式" class="headerlink" title="常见编码方式"></a>常见编码方式</h4><p>在使用二进制编码时，只有两种不同的码元，一种代表0状态而另 一种代表1状态</p><p><img src="https://s1.vika.cn/space/2025/03/02/b98e68b0a50d4bcdb893a59f67d68e20" alt="image-20250210215026499"></p><h4 id="基本带通调制方法"><a href="#基本带通调制方法" class="headerlink" title="基本带通调制方法"></a>基本带通调制方法</h4><p><img src="https://s1.vika.cn/space/2025/03/02/5ff8f187d959421cafbf06551ce047cb" alt="image-20250210215135467"></p><h4 id="物理层下的传输媒介"><a href="#物理层下的传输媒介" class="headerlink" title="物理层下的传输媒介"></a>物理层下的传输媒介</h4><p><img src="https://s1.vika.cn/space/2025/03/02/069cd797fab34eeeb825c605c18467e9" alt="image-20250210223321988"></p><ul><li><p>导引型传输媒体：</p><ol><li>双绞线</li><li>同轴电缆</li><li>光缆（光纤）</li></ol></li><li><p>非导引型传输媒体：自由空间</p></li></ul><h3 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h3><ul><li>数字通信的优点就是：虽然在信道上传输时会不可避免地产生<strong>失真</strong>，但在接收端只要我们从失真的波形中能够识别出原来的信号，那么这种失真对通信质量就可视为无影响。</li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/24917f0ecd6d42249422d16cc2dd70bb" alt="image-20250210222541891"></p><h3 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h3><p><img src="https://s1.vika.cn/space/2025/03/02/dee9b8321f3542c9868f8d2d5e3b07d7" alt="image-20250210224134115"></p><h4 id="频分复用-FDM"><a href="#频分复用-FDM" class="headerlink" title="频分复用 FDM"></a>频分复用 FDM</h4><p>频分复用 FDM (Frequency Division Multiplexing）</p><p><img src="https://s1.vika.cn/space/2025/03/02/add4479ffc3b447786ebb9ca3180bd13" alt="image-20250210224153236"></p><h4 id="时分复用-TDM"><a href="#时分复用-TDM" class="headerlink" title="时分复用 TDM"></a>时分复用 TDM</h4><p>时分复用 TDM(Time Division Multiplexing)</p><p><img src="https://s1.vika.cn/space/2025/03/02/fb8bc1a6c2bf4ded96942191026e1525" alt="image-20250210224214169"></p><h4 id="统计时分复用-STDM"><a href="#统计时分复用-STDM" class="headerlink" title="统计时分复用 STDM"></a>统计时分复用 STDM</h4><p>统计时分复用 STDM(Statistic TDM)</p><p><img src="https://s1.vika.cn/space/2025/03/02/0f4033f8e7014060a1e7da9415426682" alt="image-20250210224235368"></p><h4 id="波分复用-WDM"><a href="#波分复用-WDM" class="headerlink" title="波分复用 WDM"></a>波分复用 WDM</h4><p>波分复用 WDM(Wavelength Division Multiplexing)</p><p><img src="https://s1.vika.cn/space/2025/03/02/211d2a4f2e1e482880299d50ef263798" alt="image-20250210224301648"></p><h4 id="码分复用-CDM"><a href="#码分复用-CDM" class="headerlink" title="码分复用 CDM"></a>码分复用 CDM</h4><p>码分复用 CDM（Code Division Multiplexing）</p><h3 id="宽带接入技术（待补充）"><a href="#宽带接入技术（待补充）" class="headerlink" title="宽带接入技术（待补充）"></a>宽带接入技术（待补充）</h3><h4 id="FTTx-技术（重要）"><a href="#FTTx-技术（重要）" class="headerlink" title="FTTx 技术（重要）"></a>FTTx 技术（重要）</h4><h4 id="光纤同轴混合-网-HFC-网-）"><a href="#光纤同轴混合-网-HFC-网-）" class="headerlink" title="光纤同轴混合 网 ( HFC 网 ）"></a>光纤同轴混合 网 ( HFC 网 ）</h4><h4 id="ADSL-技术"><a href="#ADSL-技术" class="headerlink" title="ADSL 技术"></a>ADSL 技术</h4><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><ul><li>数据链路层使用的信道主要类型：点对点信道、广播信道。</li><li><strong>局域网</strong>虽然是个网络，但我们<strong>并不</strong>把局域网放在网络层讨论，这是因为网络层要讨论的问题是多个网络互连的问题，是讨论分组怎样从一个网络，通过路由器，转发到另一个网络。</li><li>在本章中我们研究的是<strong>在同一个局域网中</strong>，分组怎样从一主机传送到另一台主机，但并不经过路由器转发。从整个的互联网来看，<strong>局域网仍属于数据链路层</strong>的范围</li></ul><hr><p><img src="https://s1.vika.cn/space/2025/03/02/90c1a53987244fe3b9eb8892881eb306" alt="image-20250212125221913"></p><h3 id="数据链路层的几个共同问题"><a href="#数据链路层的几个共同问题" class="headerlink" title="数据链路层的几个共同问题"></a>数据链路层的几个共同问题</h3><ul><li><strong>链路（Link）</strong>就是从一个节点<strong>到相邻节点</strong>的一段物理线路（有线或无线），而中间没有其他交换节点。</li><li><strong>数据链路（data link）</strong>除了必须有一条物理线路外，还必须要有一些必要的通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。现在最常用的方法是使用<strong>网络适配器</strong>（既有硬件，也包括软件）来实现这些协议。</li><li>早期的数据通信协议曾叫作通信<strong>规程( procedure)</strong>。 因此在数据链路层， 规程和协议是同义语。</li><li>点对点信道的数据链路层的协议数据单元一一<strong>帧</strong> </li><li>网络层协议数据单元就是 IP 数据报（或简称为<strong>数据报、分组或包</strong>）</li></ul><hr><p><img src="https://s1.vika.cn/space/2025/03/02/6a31366fbff841a6bbfd38ab067b2874" alt="image-20250212131324811"></p><ul><li><p><strong>三个基本问题:</strong></p><ul><li><p><strong>封装成帧</strong>( framing)就是在一段数据的前后分别添加首部和尾部， 这样就构成 了一个帧。每一种链路层协议都规定了所能传送的帧的<strong>数据部分长度上限——最大传送单元MTU</strong>(Maximum Transfer Unit)。</p><p><img src="https://s1.vika.cn/space/2025/03/02/e22dba6aa3e142c9b0948176bd4c636e" alt="image-20250212134952166"></p><ul><li><p>首部和尾部的一个重要作用就是进行<strong>帧界定</strong>（即确定帧的界限），首部和尾部还包括许多必要的控制信息。</p></li><li><p>控制字符(0x01)<strong>SOH</strong>(Start Of Header),(0x04)<strong>EOT</strong> ( End Of Transmission)</p><p><img src="https://s1.vika.cn/space/2025/03/02/e63bbf0a9aad4edea40abe150569dd05" alt="image-20250212140235055"></p></li><li><p>由于使用了帧定界符，接收端就知道前面收到的数据是个不完整的帧（只有首部开始符SOH而没有传输结束符EOT)，必须丢弃。而后面收到的数据有明确的帧定界符(SOH和EOT)，因此这是一个完整的帧，应当收下。</p></li></ul></li><li><p><strong>透明传输</strong></p><ul><li><p>由于帧的开始和结束的标记使用专门指明的控制字符，因此，所传输的数据中的任何8比特的组合一定不允许和用作帧界定的控制字符的比特编码一样，否则就会出现帧界定的错误。</p><p><img src="https://s1.vika.cn/space/2025/03/02/ca20f21077514b7fb8a4a0d84f5f9813" alt="image-20250212141057115"></p></li><li><p><strong>“透明”</strong>具体的方法是：发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个<strong>转义字符“ESC”</strong>（其十六进制编码是1B）</p><p><img src="https://s1.vika.cn/space/2025/03/02/0140829a5dc148aea9965f21b93efd9b" alt="image-20250212141333560"></p></li></ul></li><li><p><strong>差错检测（重要）</strong></p><ul><li><strong>可分为两大类</strong>：有<strong>比特差错</strong>（1变0，0变1）；无比特差错，但却出现了<strong>帧丢失、帧重复或帧失序</strong>。</li></ul><p>在一段时间内，传输错误的比特占所传输比特总数的比率称为<strong>误码率BER(Bit Error Rate)</strong>。例如，误码率为10^-10^时，表示平均每传送10^10^个比特就会出现一个比特的差错。</p><p>误码率与信噪比有很大的关系。如果设法提高信噪比，就可以使误码率减小。实际的通信链路并非是理想的，它不可能使误码率下降到零。因此，为了保证数据传输的可靠性，必须采用各种差错检测措施。目前在数据链路层广泛使用了<strong>循环冗余检验CRC(Cyclic Redundancy Check)</strong>的检错技术。</p><ul><li><p><strong>循环冗余检验 CRC,帧检验序列 FCS</strong>(Frame Check Sequence)</p><p><img src="https://s1.vika.cn/space/2025/03/02/9691fcc284854ffdb7065051ac147ce6" alt="image-20250212145627726"></p><hr></li></ul></li></ul></li></ul><pre><code>  ![image-20250212145357836](https://s1.vika.cn/space/2025/03/02/aa642aa3445b42e3b1a13f9160561611)  ---  ![image-20250212145845742](https://s1.vika.cn/space/2025/03/02/bafa3317f8004829aa0a2336597a3295)  ---  ![image-20250212150049939](https://s1.vika.cn/space/2025/03/02/20416c63c5294e0faf605826f3736660)</code></pre><h3 id="点对点协议PPP（重要，待补充）"><a href="#点对点协议PPP（重要，待补充）" class="headerlink" title="点对点协议PPP（重要，待补充）"></a>点对点协议PPP（重要，待补充）</h3><p><img src="https://s1.vika.cn/space/2025/03/02/6c8430b475ae4626b0cb0997b2f18ec4" alt="image-20250212150604934"></p><h4 id="PPP协议的特点"><a href="#PPP协议的特点" class="headerlink" title="PPP协议的特点"></a>PPP协议的特点</h4><ul><li><p><strong>应满足的需求：</strong></p><p><strong>简单、封装成帧、透明性、多层网络协议、多种类型链路、差错检测、检测链接状态、最大传送单元、网络层地址协商、数据压缩协商</strong></p></li><li><p><strong>组成：</strong></p><ul><li>一个将IP数据报封装到串行链路的方法。</li><li>一个用来建立、配置和测试数据链路连接的<strong>链路控制协议LCP</strong>(Link Control Protocol)。</li><li>一套<strong>网络控制协议NCP</strong>(Network Control Protocol),其中的每一个协议支持不同的网络层协议，如IP、OSI的网络层、DECnet和AppleTalk等。</li></ul></li></ul><h4 id="PPP协议的帧格式"><a href="#PPP协议的帧格式" class="headerlink" title="PPP协议的帧格式"></a>PPP协议的帧格式</h4><p><img src="https://s1.vika.cn/space/2025/03/02/2771604afc5f4982bb13f22cc1882fd3" alt="image-20250212154219246"></p><ul><li><p>协议字段:0x0021,IP数据报；0xC021，LCP数据</p></li><li><p>字节填充</p></li><li><p>零比特填充</p><p><img src="https://s1.vika.cn/space/2025/03/02/a9ffd606fad444e4a8136176c096776d" alt="image-20250212155052781"></p></li></ul><h4 id="PPP协议的工作状态"><a href="#PPP协议的工作状态" class="headerlink" title="PPP协议的工作状态"></a>PPP协议的工作状态</h4><p><img src="https://s1.vika.cn/space/2025/03/02/ac4f726e4740452384b5c3c7c3920331" alt="image-20250212155318717"></p><h3 id="使用广播信道的数据链路层（重要，待补充）"><a href="#使用广播信道的数据链路层（重要，待补充）" class="headerlink" title="使用广播信道的数据链路层（重要，待补充）"></a>使用广播信道的数据链路层（重要，待补充）</h3><h3 id="拓展的以太网"><a href="#拓展的以太网" class="headerlink" title="拓展的以太网"></a>拓展的以太网</h3><h3 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h3><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p><strong>网络层不提供服务质量的承诺。</strong></p><ul><li><strong>两个服务：</strong></li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/d4b89e04f9b54909852ab9870b6c8384" alt="image-20250212162205325"></p><hr><p><img src="https://s1.vika.cn/space/2025/03/02/6eb570e7747b4960be4bba396f58915e" alt="image-20250212162235520"></p><ul><li><p><strong>两个层面：</strong></p><p><img src="https://s1.vika.cn/space/2025/03/02/af373c8924cc455898b74d59a94daef5" alt="image-20250212162522780"></p></li><li><p><strong>软件定义网络 SDN（Software Defined Network）</strong></p><p><img src="https://s1.vika.cn/space/2025/03/02/9230ac08ac7d4bf28a7ec8b67d6efea3" alt="image-20250212162626937"></p></li></ul><h3 id="网际协议-IP"><a href="#网际协议-IP" class="headerlink" title="网际协议 IP"></a>网际协议 IP</h3><p>网际协议 IP (Internet Protocol)是TCP/IP体系中两个最主要的协议之，也是最重要的互联网标准协议之一。</p><ul><li><p>与协议 IP 配套使 用的还有 三个协议：</p><ul><li><p><strong>地址解析协议 ARP (Address Resolution Protocol)</strong> </p></li><li><p><strong>网际控制 报文协议 ICMP ( Internet Control Message Protocol)</strong> </p></li><li><p><strong>网际组管理协议 IGMP (Internet Group Management Protocol)</strong></p></li></ul></li></ul><p>​    <img src="https://s1.vika.cn/space/2025/03/02/32d45f3af04a4da29a6553ffed46ec4e" alt="image-20250212163624353"></p><h4 id="虚拟互联网络"><a href="#虚拟互联网络" class="headerlink" title="虚拟互联网络"></a>虚拟互联网络</h4><ul><li>将网络互相连接起来要使用一些<strong>中间设备</strong>。<ul><li>物理层使用的中间设备叫作<strong>转发器(repeater)</strong>。</li><li>数据链路层使用的中间设备叫作<strong>网桥</strong>或<strong>桥接器(bridge)</strong>，以及<strong>交换机(switch)</strong>。</li><li>网络层使用的中间设备叫作<strong>路由器(router）</strong></li><li>在网络层以上使用的中间设备叫作<strong>网关(gateway)</strong>。    </li></ul></li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/386f7cd005ff4153a56689bd947b00d8" alt="image-20250212164228968"></p><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p><img src="https://s1.vika.cn/space/2025/03/02/a17edb9a34804b6d8642984dd58fff3f" alt="image-20250212164722574"></p><ul><li><p><strong>IP地址：｛＜网络号＞，＜主机号＞｝</strong></p><p><img src="https://s1.vika.cn/space/2025/03/02/03329aca8a1940909fba1537c36378e3" alt="image-20250212164941014"></p></li><li><p>IP地址指明了<strong>连接到某个网络上的一个主机</strong>（或路由器）。</p></li><li><p>分类:</p><p><img src="https://s1.vika.cn/space/2025/03/02/f47267d85675453985256c49772e6568" alt="image-20250212165059987"></p><ul><li><p>第一，网络号为全0的IP地叮有特殊的用途，它表示<strong>“本网络”</strong>；</p></li><li><p>第二，网络号为127（即01111111)保留作为本地软件<strong>环回测试(loopback test)</strong>本主机的进程之间的通信之用。</p><p><img src="https://s1.vika.cn/space/2025/03/02/97ad8f94006b4a0087040021be94418d" alt="image-20250212165540549"></p></li></ul></li><li><p><strong>无分类编 址 CIDR</strong></p><ul><li>网络前缀</li><li>地址块</li><li>地址掩码（子网掩码）</li></ul></li></ul><p>​    <img src="https://s1.vika.cn/space/2025/03/02/6f979b00b84f49e08fd8b5dd73f7a10c" alt="image-20250212170042760"></p><p>A类网络，地址掩码为255.0.0.0或255.0.0.0/8</p><p>B类网络，地址掩码为255.255.0.0或255.255.0.0/16</p><p>C类网络，地址掩码为255.255.255.0或255.255.255.0/24</p><hr><p><strong>网络前缀越短的地址块所包含的地址数就越多</strong>。</p><p><img src="https://s1.vika.cn/space/2025/03/02/170a5af41173495bbf4473093d1d2437" alt="image-20250212170619781"></p><h4 id="IP地址与MAC地址"><a href="#IP地址与MAC地址" class="headerlink" title="IP地址与MAC地址"></a>IP地址与MAC地址</h4><p>在局域网中，由于MAC地址已固化在网卡上的ROM中，因此常常将MAC地址称为<strong>硬件地址</strong>或<strong>物理地址</strong>。</p><p><img src="https://s1.vika.cn/space/2025/03/02/4b4d49f60ff24d08bb841d6202923895" alt=""></p><hr><p><img src="https://s1.vika.cn/space/2025/03/02/2b42b44214af480daf158b6c7c767eeb" alt="image-20250212171124207"></p><h4 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h4><p>已经知道了一个机器（主机或路由器）的IP地址，需要找出其相应的MAC地址。</p><p><img src="https://s1.vika.cn/space/2025/03/02/98b7538b6ea34ec08397f8d42eb97850" alt="image-20250212171352158"></p><ul><li>工作原理：</li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/d6f400c8493a43ebb04cca638c0be6ff" alt="image-20250212171503916"></p><ul><li><p>四种典型情况：</p><ul><li>H主机，N网络，R路由器</li></ul><p><img src="https://s1.vika.cn/space/2025/03/02/e347c404e9ec45d4b20801677615f2ca" alt="image-20250212171725361"></p></li></ul><ol><li>H1到H2</li><li>H1到H3</li><li>R1到H3</li><li>R1到H4</li></ol><h4 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h4><p><img src="https://s1.vika.cn/space/2025/03/02/8823e2e8a6b3488c8f4e05d8b6f42c18" alt="image-20250212172228425"></p><h3 id="IP层转发分组的过程"><a href="#IP层转发分组的过程" class="headerlink" title="IP层转发分组的过程"></a>IP层转发分组的过程</h3><h3 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a>网际控制报文协议 ICMP</h3><h3 id="IPV6"><a href="#IPV6" class="headerlink" title="IPV6"></a>IPV6</h3><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h2 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h2><h2 id="互联网上的音频-视频服务"><a href="#互联网上的音频-视频服务" class="headerlink" title="互联网上的音频/视频服务"></a>互联网上的音频/视频服务</h2><h2 id="无线网络和移动网络"><a href="#无线网络和移动网络" class="headerlink" title="无线网络和移动网络"></a>无线网络和移动网络</h2><h2 id="英文缩写"><a href="#英文缩写" class="headerlink" title="英文缩写"></a>英文缩写</h2><ul><li><strong>国际标准化组织ISO</strong></li><li><p><strong>开放系统互连基本参考模型OSI/RM</strong>(Open Systems Interconnection Reference Model)，简称为<strong>OSI</strong>。</p></li><li><p><strong>帧检验序列 FCS</strong>(Frame Check Sequence)</p></li></ul><p>[COME0 6]:</p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向-手动脱壳</title>
      <link href="/2025/02/22/%E9%80%86%E5%90%91-%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/"/>
      <url>/2025/02/22/%E9%80%86%E5%90%91-%E6%89%8B%E5%8A%A8%E8%84%B1%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="手动脱壳"><a href="#手动脱壳" class="headerlink" title="手动脱壳"></a>手动脱壳</h1><h2 id="单步跟踪法"><a href="#单步跟踪法" class="headerlink" title="单步跟踪法"></a>单步跟踪法</h2><p>单步跟踪法的原理就是通过单步(F8)、单步进入(F7)和运行到(F4)功能，<strong>完整走过程序的自脱壳过程</strong>，跳过一些循环恢复代码的片段，并用单步进入确保程序不会略过OEP。这样可以在软件自动脱壳模块运行完毕后，到达OEP，并dump程序。</p><h2 id="ESP定律法"><a href="#ESP定律法" class="headerlink" title="ESP定律法"></a>ESP定律法</h2><p>ESP定律法是脱壳的利器，是应用频率最高的脱壳方法之一。</p><p>ESP定律的原理在于程序中<strong>堆栈平衡</strong>的合理利用。由于在程序自解密或者自解压过程中，不少壳会先将当前寄存器内容压栈，如使用pushad，在解压结束后，会将之前的寄存器值出栈，如使用popad。因此在寄存器出栈时，往往程序代码被自动恢复，此时硬件断点触发。然后在程序当前位置，只需要少许单步跟踪，就很容易到达正确的OEP位置。</p><h2 id="内存镜像法-二次断点法"><a href="#内存镜像法-二次断点法" class="headerlink" title="内存镜像法(二次断点法)"></a>内存镜像法(二次断点法)</h2><p>内存镜像法是在加壳程序被加载时，通过OD的ALT+M快捷键，进入到程序虚拟内存区段。然后通过加两次内存一次性断点，到达程序正确OEP的位置。</p><p>内存镜像法的原理在于对于程序资源段和代码段下断点，一般程序自解压或者自解密时，会首先访问资源段获取所需资源，然后在自动脱壳完成后，转回程序代码段。这时候下内存一次性断点，程序就会停在OEP处。</p><h2 id="一步到达OEP"><a href="#一步到达OEP" class="headerlink" title="一步到达OEP"></a>一步到达OEP</h2><p>所谓的一步到达OEP的脱壳方法，是根据所脱壳的特征，寻找其距离OEP最近的一处汇编指令，然后下int3断点，在程序走到OEP的时候dump程序。如一些压缩壳往往popad指令距离OEP或者Magic Jump特别近，因此使用Ollydbg的搜索功能，可以搜索壳的特征汇编代码，达到一步断点到达OEP的效果。</p><h2 id="最后一次异常法"><a href="#最后一次异常法" class="headerlink" title="最后一次异常法"></a>最后一次异常法</h2><p>最后一次异常法的原理是，程序在自解压或自解密过程中，可能会触发无数次的异常。如果能定位到最后一次程序异常的位置，可能就会很接近自动脱壳完成位置。现在最后一次异常法脱壳可以利用Ollydbg的异常计数器插件，先记录异常数目，然后重新载入，自动停在最后一次异常处。</p><h2 id="模拟跟踪法"><a href="#模拟跟踪法" class="headerlink" title="模拟跟踪法"></a>模拟跟踪法</h2><p>模拟跟踪法的原理就是使用Ollydbg下条件断点，SFX相当于是一个自解压段，在自解压段结束时(eip的值转到代码段时)，已经距离OEP很近，但是这种跟踪方法会比较耗时。</p><h2 id="“SFX”法"><a href="#“SFX”法" class="headerlink" title="“SFX”法"></a>“SFX”法</h2><p>“SFX”法利用了Ollydbg自带的OEP寻找功能，可以选择直接让程序停在OD找到的OEP处，此时自解压已经完成，可以直接dump程序。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://ctf-wiki.org/reverse/platform/windows/unpack/packer-introduction/">保护壳简介 - CTF Wiki</a></p><p><a href="https://www.bilibili.com/video/BV14srVYbES2/?spm_id_from=333.337.search-card.all.click&amp;vd_source=2c4148ac928a1b2447f3d8c80156c3c4">逆向手动脱壳教程_哔哩哔哩_bilibili</a></p><p><a href="https://bbs.kanxue.com/thread-268159.htm">原创] 借助 x64dbg 的 UPX 手工脱壳-加壳脱壳-看雪</a></p><p><a href="https://www.cnblogs.com/5315hejialei/p/7060315.html">逆向脱壳——脱壳后的修复 - 君知らない - 博客园</a></p><p><a href="https://xz.aliyun.com/news/14618?time__1311=eqUxuiiti%3DD%3DKDKG%3DD%2FGnbq4mEmtdKaq4D&amp;u_atoken=bcaefee4d96fbdca5e8e19fecb51ed62&amp;u_asig=0a47314717402179718923288e0044">文章 - Windows逆向之脱壳-IAT修复 - 先知社区</a></p><p><a href="https://www.cnblogs.com/LyShark/p/13731329.html">PE格式：手工实现各种脱壳后的修复 - lyshark - 博客园</a></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>查壳，UPX壳，64位</p><p><img src="https://s1.vika.cn/space/2025/02/19/8e2f2b6cce8a41c09136df9b2565a08c" alt="PixPin_2025-02-19_18-07-31"></p><p>试着运行一下</p><p><img src="https://s1.vika.cn/space/2025/02/19/8f616b1346004984859654dabc7e94ce" alt="PixPin_2025-02-19_18-16-40"></p><p>用x64dbg打开，打开断点查看，可以看到x64dbg自动为我们设置了几个断点，其中第三个断点是我们的入口断点</p><p>我们可以删除前两个断点，只保留入口断点</p><p><img src="https://s1.vika.cn/space/2025/02/22/67a251b612a548bc869e00a60e1da138" alt="PixPin_2025-02-22_16-23-08"></p><p>然后直接按<code>F9</code>运行，到<code>push rbx</code>断点处，此时栈顶<code>RSP D8EA8FFB88</code></p><p><img src="https://s1.vika.cn/space/2025/02/22/d6293e0f51e54b93993bc83e0a0be3dc" alt="PixPin_2025-02-22_16-33-52"></p><p>接着按<code>F8</code>步过，把<code>rbx</code>压入栈，栈顶<code>RBP D8EAFFB80</code></p><p><img src="https://s1.vika.cn/space/2025/02/22/c48f40d743d640aeb5a3663eab0886a1" alt="PixPin_2025-02-22_16-36-53"></p><p>在<code>RSP</code>处下硬件断点，因为是64位程序，所以选4字节</p><p><img src="https://s1.vika.cn/space/2025/02/22/8a07497ce6dc41c69a44e24d973ee8dd" alt="PixPin_2025-02-22_16-39-30"></p><p><img src="https://s1.vika.cn/space/2025/02/22/ac442fa8deba49ddae2ad537fd95def9" alt="PixPin_2025-02-22_16-40-59"></p><p>按<code>F9</code>运行到硬件断点，可以发现已经<code>pop rbx</code>，当前面出现了一点麻烦，因为前面有一个回跳，不知道要执行多少次</p><p><img src="https://s1.vika.cn/space/2025/02/22/44317ef33b724caa996fe7ecc3e3b4e4" alt="PixPin_2025-02-22_16-47-36"></p><p>接着可以，按<code>F8</code>运行到<code>cmp</code>处，在<code>jne</code>下面一行下一个断点，选中那一行，按<code>F4</code>运行到选区，即可解决回跳</p><p><img src="https://s1.vika.cn/space/2025/02/22/4b9e333d0b374b3e8c6270c28c169032" alt="PixPin_2025-02-22_16-54-31"></p><p>此时，前面又有一个<code>Jmp</code>，但发现是一个大跳转（一般小跳转左边会显示跳转到哪的虚线，如前面那个回跳）</p><p>但一般出现大跳转，那么一般就是程序的入口了（OEP）,但不一定，也许是后面出现的大跳转，具体是怎么回事之后在弄清楚</p><p>接着按<code>F7</code>步入<code>jmp</code>，选择x64dbg自带的插件-scylla，可惜的是我的没有自带，于是到github下了一个，注意改好OEP,直接dump就行</p><p><img src="https://s1.vika.cn/space/2025/02/22/2c8eb35baa804a20908856eaf68af5b8" alt="PixPin_2025-02-22_17-26-04"></p><p>dump后的程序可能不能直接运行，需要修复IAT（导入表），但可以用IDA反编译</p><ul><li>UPX加壳之前的样子，再用<code>upx -d</code>之后打开也是原样</li></ul><p><img src="https://s1.vika.cn/space/2025/02/22/94f459c94ca6470692936b09b6616f24" alt="image-20250216145937992"></p><ul><li>UPX加壳后手动脱壳的样子（没有修复导入表IAT）</li></ul><p><img src="https://s1.vika.cn/space/2025/02/22/32e27afcb33f489d9838e98b9957d48b" alt="PixPin_2025-02-22_17-38-42"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[2019红帽杯]childRE</title>
      <link href="/2025/02/22/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-childRE/"/>
      <url>/2025/02/22/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-childRE/</url>
      
        <content type="html"><![CDATA[<h1 id="2019红帽杯-childRE"><a href="#2019红帽杯-childRE" class="headerlink" title="[2019红帽杯]childRE"></a>[2019红帽杯]childRE</h1><p>64位，无壳</p><p><img src="https://s1.vika.cn/space/2025/02/22/94f459c94ca6470692936b09b6616f24" alt="image-20250216145937992"></p><p>动态调试一下，发现没用，inputString是根据我们的输入形成的，但是错的（全0），没用；</p><p>有点绕，幸亏学了些数论，密码学，不然可能不会往这方面想</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s[a[i] % 23] = b[i]</span><br><span class="line">s[a[i] / 23] = c[i]</span><br><span class="line"></span><br><span class="line">a[i] % 23 ==&gt; x(商) ==&gt;index(b[i])</span><br><span class="line">a[i] / 23 ==&gt; y(余数)==&gt;index(c[i])</span><br><span class="line"></span><br><span class="line">a[i] / 23 = a[i] % 23 + d(余数) </span><br><span class="line">==&gt; a[i] = (a[i] % 23) * 23 + d</span><br><span class="line">==&gt; a[i] = index(b[i]) * 23 + index(c[i])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把inputString[v14]推出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">a123 = [</span><br><span class="line">  <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, </span><br><span class="line">  <span class="number">0x2D</span>, <span class="number">0x3D</span>, <span class="number">0x21</span>, <span class="number">0x40</span>, <span class="number">0x23</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x5E</span>, <span class="number">0x26</span>, <span class="number">0x2A</span>, </span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x29</span>, <span class="number">0x5F</span>, <span class="number">0x2B</span>, <span class="number">0x71</span>, <span class="number">0x77</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x79</span>, </span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x6F</span>, <span class="number">0x70</span>, <span class="number">0x5B</span>, <span class="number">0x5D</span>, <span class="number">0x51</span>, <span class="number">0x57</span>, <span class="number">0x45</span>, <span class="number">0x52</span>, </span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0x59</span>, <span class="number">0x55</span>, <span class="number">0x49</span>, <span class="number">0x4F</span>, <span class="number">0x50</span>, <span class="number">0x7B</span>, <span class="number">0x7D</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, </span><br><span class="line">  <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x3B</span>, <span class="number">0x27</span>, <span class="number">0x41</span>, </span><br><span class="line">  <span class="number">0x53</span>, <span class="number">0x44</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x4A</span>, <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x3A</span>, <span class="number">0x22</span>, </span><br><span class="line">  <span class="number">0x5A</span>, <span class="number">0x58</span>, <span class="number">0x43</span>, <span class="number">0x56</span>, <span class="number">0x42</span>, <span class="number">0x4E</span>, <span class="number">0x4D</span>, <span class="number">0x3C</span>, <span class="number">0x3E</span>, <span class="number">0x3F</span>, </span><br><span class="line">  <span class="number">0x7A</span>, <span class="number">0x78</span>, <span class="number">0x63</span>, <span class="number">0x76</span>, <span class="number">0x62</span>, <span class="number">0x6E</span>, <span class="number">0x6D</span>, <span class="number">0x2C</span>, <span class="number">0x2E</span>, <span class="number">0x2F</span>, </span><br><span class="line">  <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">a555 = [</span><br><span class="line">  <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x33</span>, <span class="number">0x32</span>, <span class="number">0x35</span>,</span><br><span class="line">  <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x32</span>, <span class="number">0x32</span>, <span class="number">0x32</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x35</span>,</span><br><span class="line">  <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x32</span>, <span class="number">0x34</span>, <span class="number">0x33</span>, <span class="number">0x34</span>,</span><br><span class="line">  <span class="number">0x36</span>, <span class="number">0x36</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x33</span>, <span class="number">0x36</span>, <span class="number">0x36</span>,</span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0x35</span>, <span class="number">0x34</span>, <span class="number">0x34</span>, <span class="number">0x34</span>, <span class="number">0x32</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x35</span>,</span><br><span class="line">  <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x32</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x32</span>,</span><br><span class="line">  <span class="number">0x32</span>, <span class="number">0x32</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">a462 = [</span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x5F</span>, <span class="number">0x40</span>, <span class="number">0x34</span>, <span class="number">0x36</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0x21</span>, <span class="number">0x30</span>, <span class="number">0x38</span>,</span><br><span class="line">  <span class="number">0x21</span>, <span class="number">0x36</span>, <span class="number">0x5F</span>, <span class="number">0x30</span>, <span class="number">0x2A</span>, <span class="number">0x30</span>, <span class="number">0x34</span>, <span class="number">0x34</span>, <span class="number">0x32</span>, <span class="number">0x21</span>,</span><br><span class="line">  <span class="number">0x40</span>, <span class="number">0x31</span>, <span class="number">0x38</span>, <span class="number">0x36</span>, <span class="number">0x25</span>, <span class="number">0x25</span>, <span class="number">0x30</span>, <span class="number">0x40</span>, <span class="number">0x33</span>, <span class="number">0x3D</span>,</span><br><span class="line">  <span class="number">0x36</span>, <span class="number">0x36</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x39</span>, <span class="number">0x37</span>, <span class="number">0x34</span>, <span class="number">0x2A</span>, <span class="number">0x33</span>, <span class="number">0x32</span>,</span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x3D</span>, <span class="number">0x26</span>, <span class="number">0x30</span>, <span class="number">0x5E</span>, <span class="number">0x33</span>, <span class="number">0x26</span>, <span class="number">0x31</span>, <span class="number">0x40</span>,</span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x26</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, <span class="number">0x38</span>, <span class="number">0x21</span>, <span class="number">0x36</span>, <span class="number">0x5F</span>, <span class="number">0x30</span>,</span><br><span class="line">  <span class="number">0x2A</span>, <span class="number">0x26</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inputString = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">62</span>):</span><br><span class="line">    inputString += <span class="built_in">chr</span>(a123.index(a555[i])*<span class="number">23</span> + a123.index(a462[i]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(inputString, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</span></span><br></pre></td></tr></table></figure><p><code>private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</code>不知道有什么用，继续逆推看<code>inputString</code>怎么来的</p><p>AI了一下<code>UnDecorateSymbolName(v5, outputString, 0x100u, 0);</code>,还有微软的解释<a href="[unDecorateSymbolName 函数 (dbghelp.h">unDecorateSymbolName 函数 (dbghelp.h)</a> - Win32 apps | Microsoft Learn](<a href="https://learn.microsoft.com/zh-cn/windows/win32/api/dbghelp/nf-dbghelp-undecoratesymbolname">https://learn.microsoft.com/zh-cn/windows/win32/api/dbghelp/nf-dbghelp-undecoratesymbolname</a>))</p><ul><li><p>v5，输入</p></li><li><p>outinputString，输出</p></li><li><p>100,长度</p></li><li><p>0x0000 对应<code>UNDNAME_COMPLETE</code>,启用完全取消评分</p></li></ul><blockquote><p><code>UnDecorateSymbolName</code> 是一个用于取消修饰 C++ 符号名称的函数，属于 Windows 的 DbgHelp 库。它的主要作用是将经过编译器修饰的符号名称还原为更直观、更易读的形式。</p><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">UnDecorateSymbolName</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"> _In_  PCTSTR DecoratedName,</span></span></span><br><span class="line"><span class="params"><span class="function"> _Out_ PTSTR  UnDecoratedName,</span></span></span><br><span class="line"><span class="params"><span class="function"> _In_  DWORD UnDecoratedLength,</span></span></span><br><span class="line"><span class="params"><span class="function"> _In_  DWORD Flags</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ol><li><strong><code>DecoratedName</code></strong><br>输入参数，表示经过修饰的 C++ 符号名称。修饰的符号通常以问号（<code>?</code>）开头。</li><li><strong><code>UnDecoratedName</code></strong><br>输出参数，指向一个字符串缓冲区，用于存储取消修饰后的符号名称。</li><li><strong><code>UnDecoratedLength</code></strong><br>指定 <code>UnDecoratedName</code> 缓冲区的大小（以字符为单位），必须足够大以容纳取消修饰后的名称。</li><li><strong><code>Flags</code></strong><br>用于控制取消修饰的行为。常见的标志包括：<ul><li><code>UNDNAME_COMPLETE</code>（默认）：完全取消修饰。</li><li><code>UNDNAME_NAME_ONLY</code>：仅取消修饰主声明的名称。</li><li><code>UNDNAME_NO_ACCESS_SPECIFIERS</code>：禁用成员的访问说明符。</li></ul></li></ol><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>如果函数成功，返回值是 <code>UnDecoratedName</code> 缓冲区中的字符数（不包括 NULL 终止符）。</li><li>如果函数失败，返回值为零，可以通过调用 <code>GetLastError</code> 获取更多错误信息。</li></ul><p>以下是一个简单的使用示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;DbgHelp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Dbghelp.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>] = <span class="string">&quot;?getArgumentTypes@UnDecorator@@CG?AVDName@@XZ&quot;</span>;</span><br><span class="line">    <span class="built_in">UnDecorateSymbolName</span>(str, str, <span class="built_in">sizeof</span>(str), UNDNAME_COMPLETE);</span><br><span class="line">    std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>UnDecorateSymbolName</code> 将修饰后的符号名称 <code>?getArgumentTypes@UnDecorator@@CG?AVDName@@XZ</code> 转换为更易读的形式</p></blockquote><p><a href="https://www.jianshu.com/p/c2ff30558284">关于C++名称修饰的解析 - 简书</a></p><p>意思是<code>UnDecorateSymbolName</code>  将<code>?getArgumentTypes@UnDecorator@@CG?AVDName@@XZ</code>(C++ 装饰符号，表示一个函数名)</p><p>会将其取消修饰为更易读的形式。类似于我们推出的<code>private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</code></p><p>搜了一下，C++ 名称修饰的符号规则，有很多不同规则，<a href="https://learn.microsoft.com/en-us/cpp/build/reference/decorated-names?view=msvc-170">装饰名称 |Microsoft 学习</a></p><p>文章最后提到可以使用 undname.exe 将修饰的名称转换为未修饰的形式。此示例显示了它的工作原理：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\&gt;<span class="title">undname</span> ?<span class="title">func1</span>@<span class="title">a</span>@@<span class="title">AAEXH</span>@<span class="title">Z</span></span></span><br><span class="line"><span class="function"><span class="title">Microsoft</span> (<span class="title">R</span>) <span class="title">C</span>++ <span class="title">Name</span> <span class="title">Undecorator</span></span></span><br><span class="line"><span class="function"><span class="title">Copyright</span> (<span class="title">C</span>) <span class="title">Microsoft</span> <span class="title">Corporation</span>. <span class="title">All</span> <span class="title">rights</span> <span class="title">reserved</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Undecoration</span> <span class="title">of</span> :- &quot;?<span class="title">func1</span>@<span class="title">a</span>@@<span class="title">AAEXH</span>@<span class="title">Z</span>&quot;</span></span><br><span class="line"><span class="function"><span class="title">is</span> :- &quot;<span class="title">private</span>: <span class="title">void</span> <span class="title">__thiscall</span> <span class="title">a</span>::<span class="title">func1</span>(<span class="title">int</span>)&quot;</span></span><br></pre></td></tr></table></figure><hr><p><a href="https://www.cnblogs.com/yxysuanfa/p/6984895.html">C++ 编译器的函数名修饰规则 - yxysuanfa - 博客园</a></p><blockquote><p>根据 Microsoft Visual C++ 的名称修饰规则，将 <code>private: char* __thiscall R0Pxx::My_Aut0_PWN(unsigned char*)</code> 转换为修饰后的状态，可以按照以下步骤进行：</p><h3 id="1-类名和成员函数"><a href="#1-类名和成员函数" class="headerlink" title="1. 类名和成员函数"></a>1. <strong>类名和成员函数</strong></h3><ul><li>类名：<code>R0Pxx</code></li><li>成员函数：<code>My_Aut0_PWN</code></li><li>访问修饰符：<code>private</code></li><li>调用约定：<code>__thiscall</code>（默认的类成员函数调用约定）</li></ul><h3 id="2-参数类型"><a href="#2-参数类型" class="headerlink" title="2. 参数类型"></a>2. <strong>参数类型</strong></h3><ul><li>参数：<code>unsigned char*</code></li><li>在 Microsoft Visual C++ 的修饰规则中，<code>unsigned char</code> 通常表示为 <code>E</code>，指针用 <code>PA</code> 表示。</li></ul><h3 id="3-返回类型"><a href="#3-返回类型" class="headerlink" title="3. 返回类型"></a>3. <strong>返回类型</strong></h3><ul><li>返回类型：<code>char*</code></li><li><code>char</code> 表示为 <code>D</code>，指针用 <code>PA</code> 表示。</li></ul><h3 id="4-修饰规则"><a href="#4-修饰规则" class="headerlink" title="4. 修饰规则"></a>4. <strong>修饰规则</strong></h3><ul><li>私有成员函数的修饰符为 <code>@@AAE</code>。</li><li>参数列表以 <code>@Z</code> 结尾。</li></ul><h3 id="5-完整修饰后的名称"><a href="#5-完整修饰后的名称" class="headerlink" title="5. 完整修饰后的名称"></a>5. <strong>完整修饰后的名称</strong></h3><p>根据上述规则，<code>private: char* __thiscall R0Pxx::My_Aut0_PWN(unsigned char*)</code> 的修饰后名称为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;?My_Aut0_PWN@R0Pxx@@AAEPADPEAE@Z</span><br></pre></td></tr></table></figure><h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><ul><li><code>?My_Aut0_PWN@R0Pxx@@</code>：表示类 <code>R0Pxx</code> 的私有成员函数 <code>My_Aut0_PWN</code>。</li><li><code>AAE</code>：表示私有成员函数的修饰符。</li><li><code>PAD</code>：表示返回类型为 <code>char*</code>。</li><li><code>PEAE</code>：表示参数类型为 <code>unsigned char*</code>。</li><li><code>@Z</code>：表示参数列表结束。</li></ul><p>如果需要进一步确认或解析修饰后的名称，可以使用工具如 <code>undname</code> 或 <code>UnDecorateSymbolName</code> API</p></blockquote><hr><p><code>?My_Aut0_PWN@R0Pxx@@AAEPADPEAE@Z</code></p><p>到这里就没头绪了，看了大佬的题解</p><p><a href="https://www.cnblogs.com/Mayfly-nymph/p/11869959.html#childRE">2019 红帽杯 Re WP - Hk_Mayfly - 博客园</a></p><p>弱在了动态调试上，没发现result的变化，按照大佬的方法实际操作了一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz12345&#x27;</span></span><br><span class="line">dec1 = <span class="string">&#x27;7071687273696474756A76776B656278796C7A316D6632336E34356F676361&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">serial = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> dec1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dec1:</span><br><span class="line">    serial.append(str1.index(i))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> serial</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z&#x27;</span></span><br><span class="line">enc = [<span class="string">&#x27;&#x27;</span>] * <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>):</span><br><span class="line">    enc[serial[i]] = name[i]</span><br><span class="line">enc = <span class="string">&#x27;&#x27;</span>.join(enc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> enc</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> md5(enc).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;63b148e750fed3a33419168ac58083f5&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF-Reverse</title>
      <link href="/2025/02/15/BUUCTF-Reverse/"/>
      <url>/2025/02/15/BUUCTF-Reverse/</url>
      
        <content type="html"><![CDATA[<h1 id="红帽杯"><a href="#红帽杯" class="headerlink" title="红帽杯"></a>红帽杯</h1><h2 id="2019红帽杯-Snake"><a href="#2019红帽杯-Snake" class="headerlink" title="[2019红帽杯]Snake"></a>[2019红帽杯]Snake</h2><h1 id="ACTF新生赛"><a href="#ACTF新生赛" class="headerlink" title="ACTF新生赛"></a>ACTF新生赛</h1><h2 id="ACTF新生赛2020-easyre"><a href="#ACTF新生赛2020-easyre" class="headerlink" title="[ACTF新生赛2020]easyre"></a>[ACTF新生赛2020]easyre</h2><ul><li><code>upx -d</code>脱壳</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]easyre.png" alt="alt text"></p><ul><li><code>IDA</code>打开发现只有一个简单的加密，加密后为<code>v4</code>，即<code>*F&#39;\&quot;N,\&quot;(I?+@</code></li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]easyre-1.png" alt="alt text"><br><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]easyre-2.png" alt="alt text"></p><ul><li><code>shift+E</code>提取数据，编写python解密</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">v4 = <span class="string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span></span><br><span class="line">__data_start__ = [</span><br><span class="line">    <span class="number">126</span>, <span class="number">125</span>, <span class="number">124</span>, <span class="number">123</span>, <span class="number">122</span>, <span class="number">121</span>, <span class="number">120</span>, <span class="number">119</span>, <span class="number">118</span>, <span class="number">117</span>,</span><br><span class="line">    <span class="number">116</span>, <span class="number">115</span>, <span class="number">114</span>, <span class="number">113</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">109</span>, <span class="number">108</span>, <span class="number">107</span>,</span><br><span class="line">    <span class="number">106</span>, <span class="number">105</span>, <span class="number">104</span>, <span class="number">103</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">99</span>, <span class="number">98</span>, <span class="number">97</span>,</span><br><span class="line">    <span class="number">96</span>, <span class="number">95</span>, <span class="number">94</span>, <span class="number">93</span>, <span class="number">92</span>, <span class="number">91</span>, <span class="number">90</span>, <span class="number">89</span>, <span class="number">88</span>, <span class="number">87</span>,</span><br><span class="line">    <span class="number">86</span>, <span class="number">85</span>, <span class="number">84</span>, <span class="number">83</span>, <span class="number">82</span>, <span class="number">81</span>, <span class="number">80</span>, <span class="number">79</span>, <span class="number">78</span>, <span class="number">77</span>,</span><br><span class="line">    <span class="number">76</span>, <span class="number">75</span>, <span class="number">74</span>, <span class="number">73</span>, <span class="number">72</span>, <span class="number">71</span>, <span class="number">70</span>, <span class="number">69</span>, <span class="number">68</span>, <span class="number">67</span>,</span><br><span class="line">    <span class="number">66</span>, <span class="number">65</span>, <span class="number">64</span>, <span class="number">63</span>, <span class="number">62</span>, <span class="number">61</span>, <span class="number">60</span>, <span class="number">59</span>, <span class="number">58</span>, <span class="number">57</span>,</span><br><span class="line">    <span class="number">56</span>, <span class="number">55</span>, <span class="number">54</span>, <span class="number">53</span>, <span class="number">52</span>, <span class="number">51</span>, <span class="number">50</span>, <span class="number">49</span>, <span class="number">48</span>, <span class="number">47</span>,</span><br><span class="line">    <span class="number">46</span>, <span class="number">45</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">42</span>, <span class="number">41</span>, <span class="number">40</span>, <span class="number">39</span>, <span class="number">38</span>, <span class="number">37</span>,</span><br><span class="line">    <span class="number">36</span>, <span class="number">35</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">0</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v4)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(__data_start__)):</span><br><span class="line">        <span class="keyword">if</span> v4[i] == <span class="built_in">chr</span>(__data_start__[j]):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(j + <span class="number">1</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            </span><br></pre></td></tr></table></figure><h2 id="ACTF新生赛2020-Oruga"><a href="#ACTF新生赛2020-Oruga" class="headerlink" title="[ACTF新生赛2020]Oruga"></a>[ACTF新生赛2020]Oruga</h2><p><strong>迷宫题，与常规迷宫有点不一样</strong></p><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]Oruga-1.png" alt="alt text"></p><ul><li>迷宫，终点 <code>!</code>，迷宫在<code>byte_201020</code></li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]Oruga-3.png" alt="alt text"></p><ul><li>在<code>byte_201020[]</code>按<code>shift+E</code>提取迷宫，变为迷宫，指定行、列</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ida_chars_byte_201020[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x23</span>, <span class="number">0x23</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, </span><br><span class="line">  <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x50</span>, <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x4C</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x50</span>, </span><br><span class="line">  <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4C</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4C</span>, <span class="number">0x4C</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4D</span>, <span class="number">0x4D</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x4D</span>, <span class="number">0x4D</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x45</span>, <span class="number">0x54</span>, <span class="number">0x54</span>, </span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x54</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x54</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, </span><br><span class="line">  <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x45</span>, <span class="number">0x45</span></span><br><span class="line">&#125;;</span><br><span class="line"># maze_str_to_list</span><br><span class="line">maze_str = (<span class="string">&quot;    #       ####   ##   OO              OO PP      L OO OO PP      L OO OO P      LL OO    P         OO    P    #                           #         MMM   #          MMM    EE   0 M M M    E               EETTTI M M M    E  T I M M M    E  T I M M M!   EE&quot;</span>)</span><br><span class="line">print(len(maze_str))</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">row = <span class="number">16</span></span><br><span class="line">col = <span class="number">16</span></span><br><span class="line">maze = []</span><br><span class="line"><span class="keyword">for</span> i in range(row):</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> j in range(col):</span><br><span class="line">        tmp.append(maze_str[index])</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    maze.append(tmp)</span><br><span class="line">print(maze)</span><br><span class="line"></span><br><span class="line"># <span class="number">256</span></span><br><span class="line"># [</span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>],</span><br><span class="line">#     [<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>],</span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;E&#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;E&#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27; &#x27;</span>], </span><br><span class="line">#     [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;E&#x27;</span>]</span><br><span class="line"></span><br><span class="line"># ]</span><br><span class="line"># 起点<span class="string">&#x27; &#x27;</span>（<span class="number">0</span>，<span class="number">0</span>） ，终点<span class="string">&#x27;!&#x27;</span>（<span class="number">15</span>,<span class="number">10</span>）</span><br></pre></td></tr></table></figure><ul><li>同一障碍为<code>#</code>以便后续脚本，当后来发现这不是通常的迷宫，用<code>bfs</code>算法走的路径是错的，关键在<code>v2 += v4</code>这表示一直移动，所以移动应该是按下面图片来走</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">maze_str = (<span class="string">&quot;    #       ####   ##   OO              OO PP      L OO OO PP      L OO OO P      LL OO    P         OO    P    #                           #         MMM   #          MMM    EE   0 M M M    E               EETTTI M M M    E  T I M M M    E  T I M M M!   EE&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(maze_str))</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">row = <span class="number">16</span></span><br><span class="line">col = <span class="number">16</span></span><br><span class="line">maze = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(col):</span><br><span class="line">        <span class="keyword">if</span> maze_str[index] == <span class="string">&#x27;!&#x27;</span> <span class="keyword">or</span> maze_str[index] == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            tmp.append(maze_str[index])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp.append(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    maze.append(tmp)</span><br><span class="line"><span class="built_in">print</span>(maze)</span><br><span class="line"><span class="comment"># 256</span></span><br><span class="line"><span class="comment"># [</span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27;#&#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27;#&#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;], </span></span><br><span class="line"><span class="comment">#     [&#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;!&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;#&#x27;, &#x27;#&#x27;]</span></span><br><span class="line"><span class="comment"># ]</span></span><br></pre></td></tr></table></figure><p>向下移动：M</p><p>向左移动：J</p><p>向上移动：E</p><p>向右移动：W</p><p><code>flag&#123;MEWEMEWJMEWJM&#125;</code></p><ul><li>找的网图大概这样走</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]Oruga-2.png" alt="alt text"></p><h2 id="ACTF新生赛2020-Universe-final-answer"><a href="#ACTF新生赛2020-Universe-final-answer" class="headerlink" title="[ACTF新生赛2020]Universe_final_answer"></a>[ACTF新生赛2020]Universe_final_answer</h2><ul><li>64位，无壳，IDA打开</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]Universe_final_answer.png" alt="alt text"></p><ul><li>用z3处理，根据图中，v1和v2，v6和v7要交换一下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">v1 = Int(<span class="string">&#x27;v2&#x27;</span>) <span class="comment"># 交换</span></span><br><span class="line">v2 = Int(<span class="string">&#x27;v1&#x27;</span>)</span><br><span class="line">v3 = Int(<span class="string">&#x27;v3&#x27;</span>)</span><br><span class="line">v4 = Int(<span class="string">&#x27;v4&#x27;</span>)</span><br><span class="line">v5 = Int(<span class="string">&#x27;v5&#x27;</span>)</span><br><span class="line">v6 = Int(<span class="string">&#x27;v7&#x27;</span>) <span class="comment"># 交换</span></span><br><span class="line">v7 = Int(<span class="string">&#x27;v6&#x27;</span>)</span><br><span class="line">v8 = Int(<span class="string">&#x27;v8&#x27;</span>)</span><br><span class="line">v9 = Int(<span class="string">&#x27;v9&#x27;</span>)</span><br><span class="line">v11 = Int(<span class="string">&#x27;v11&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s.add(-<span class="number">85</span> * v9 + <span class="number">58</span> * v8 + <span class="number">97</span> * v6 + v7 + -<span class="number">45</span> * v5 + <span class="number">84</span> * v4 + <span class="number">95</span> * v2 - <span class="number">20</span> * v1 + <span class="number">12</span> * v3 == <span class="number">12613</span>)</span><br><span class="line">s.add(<span class="number">30</span> * v11 + -<span class="number">70</span> * v9 + -<span class="number">122</span> * v6 + -<span class="number">81</span> * v7 + -<span class="number">66</span> * v5 + -<span class="number">115</span> * v4 + -<span class="number">41</span> * v3 + -<span class="number">86</span> * v1 - <span class="number">15</span> * v2 - <span class="number">30</span> * v8 == -<span class="number">54400</span>)</span><br><span class="line">s.add(-<span class="number">103</span> * v11 + <span class="number">120</span> * v8 + <span class="number">108</span> * v7 + <span class="number">48</span> * v4 + -<span class="number">89</span> * v3 + <span class="number">78</span> * v1 - <span class="number">41</span> * v2 + <span class="number">31</span> * v5 - (v6 * <span class="number">64</span>) - <span class="number">120</span> * v9 == -<span class="number">10283</span>)</span><br><span class="line">s.add(<span class="number">71</span> * v6 + (v7 * <span class="number">128</span>) + <span class="number">99</span> * v5 + -<span class="number">111</span> * v3 + <span class="number">85</span> * v1 + <span class="number">79</span> * v2 - <span class="number">30</span> * v4 - <span class="number">119</span> * v8 + <span class="number">48</span> * v9 - <span class="number">16</span> * v11 == <span class="number">22855</span>)</span><br><span class="line">s.add(<span class="number">5</span> * v11 + <span class="number">23</span> * v9 + <span class="number">122</span> * v8 + -<span class="number">19</span> * v6 + <span class="number">99</span> * v7 + -<span class="number">117</span> * v5 + -<span class="number">69</span> * v3 + <span class="number">22</span> * v1 - <span class="number">98</span> * v2 + <span class="number">10</span> * v4 == -<span class="number">2944</span>)</span><br><span class="line">s.add(-<span class="number">54</span> * v11 + -<span class="number">23</span> * v8 + -<span class="number">82</span> * v3 + -<span class="number">85</span> * v2 + <span class="number">124</span> * v1 - <span class="number">11</span> * v4 - <span class="number">8</span> * v5 - <span class="number">60</span> * v7 + <span class="number">95</span> * v6 + <span class="number">100</span> * v9 == -<span class="number">2222</span>)</span><br><span class="line">s.add(-<span class="number">83</span> * v11 + -<span class="number">111</span> * v7 + -<span class="number">57</span> * v2 + <span class="number">41</span> * v1 + <span class="number">73</span> * v3 - <span class="number">18</span> * v4 + <span class="number">26</span> * v5 + <span class="number">16</span> * v6 + <span class="number">77</span> * v8 - <span class="number">63</span> * v9 == -<span class="number">13258</span>)</span><br><span class="line">s.add(<span class="number">81</span> * v11 + -<span class="number">48</span> * v9 + <span class="number">66</span> * v8 + -<span class="number">104</span> * v6 + -<span class="number">121</span> * v7 + <span class="number">95</span> * v5 + <span class="number">85</span> * v4 + <span class="number">60</span> * v3 + -<span class="number">85</span> * v2 + <span class="number">80</span> * v1 == -<span class="number">1559</span>)</span><br><span class="line">s.add(<span class="number">101</span> * v11 + -<span class="number">85</span> * v9 + <span class="number">7</span> * v6 + <span class="number">117</span> * v7 + -<span class="number">83</span> * v5 + -<span class="number">101</span> * v4 + <span class="number">90</span> * v3 + -<span class="number">28</span> * v1 + <span class="number">18</span> * v2 - v8 == <span class="number">6308</span>)</span><br><span class="line">s.add(<span class="number">99</span> * v11 + -<span class="number">28</span> * v9 + <span class="number">5</span> * v8 + <span class="number">93</span> * v6 + -<span class="number">18</span> * v7 + -<span class="number">127</span> * v5 + <span class="number">6</span> * v4 + -<span class="number">9</span> * v3 + -<span class="number">93</span> * v1 + <span class="number">58</span> * v2 == -<span class="number">1697</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    result = s.model()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># [v1 = 70,</span></span><br><span class="line"><span class="comment">#  v2 = 48,</span></span><br><span class="line"><span class="comment">#  v4 = 82,</span></span><br><span class="line"><span class="comment">#  v11 = 64,</span></span><br><span class="line"><span class="comment">#  v3 = 117,</span></span><br><span class="line"><span class="comment">#  v5 = 84,</span></span><br><span class="line"><span class="comment">#  v7 = 95,</span></span><br><span class="line"><span class="comment">#  v9 = 119,</span></span><br><span class="line"><span class="comment">#  v8 = 55,</span></span><br><span class="line"><span class="comment">#  v6 = 121]</span></span><br><span class="line">flag = [</span><br><span class="line">    <span class="number">70</span>, <span class="number">48</span>, <span class="number">117</span>, <span class="number">82</span>, <span class="number">84</span>, <span class="number">121</span>, <span class="number">95</span>, <span class="number">55</span>, <span class="number">119</span>, <span class="number">64</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(c), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># F0uRTy_7w@</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>还有一步<code>sub_C50</code>，再运行程序输入<code>F0uRTy_7w@</code>，得到<code>F0uRTy_7w@_42</code></li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[ACTF新生赛2020]Universe_final_answer-1.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;F0uRTy_7w@_42&#125;</span><br></pre></td></tr></table></figure><h2 id="ACTF新生赛2020-SoulLike"><a href="#ACTF新生赛2020-SoulLike" class="headerlink" title="[ACTF新生赛2020]SoulLike"></a>[ACTF新生赛2020]SoulLike</h2><p>sub_83A显示不出来问题解决方法：找到ida目录中的<code>cfg/hexrays.cfg</code>文件，将其中<code>MAX_FUNCSIZE = 64</code>修改为<code>1024</code></p><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216203738791.png" alt="image-20250216203738791"></p><p>进行了3000多行的异或操作，然后用异或结果与v3进行对比</p><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216205842849.png" alt="image-20250216205842849"></p><p><code>flag&#123;b0Nf|Re_LiT!&#125;</code></p><p>找到的三种方法</p><p>exp1：暴力破解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> v3[] = &#123;<span class="number">126</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">107</span>, <span class="number">53</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">30</span>, <span class="number">56</span>&#125;;</span><br><span class="line"><span class="type">int</span> a1[<span class="number">20</span>], flag[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">sub_83A</span><span class="params">(<span class="type">int</span> *a1)</span> </span>&#123;</span><br><span class="line">  *a1 ^= <span class="number">0x2Bu</span>;</span><br><span class="line">  a1[<span class="number">1</span>] ^= <span class="number">0x6Cu</span>;</span><br><span class="line">  a1[<span class="number">2</span>] ^= <span class="number">0x7Eu</span>;</span><br><span class="line">  a1[<span class="number">3</span>] ^= <span class="number">0x56u</span>;</span><br><span class="line">  a1[<span class="number">4</span>] ^= <span class="number">0x39u</span>;</span><br><span class="line">  a1[<span class="number">5</span>] ^= <span class="number">3u</span>;</span><br><span class="line">  a1[<span class="number">6</span>] ^= <span class="number">0x2Du</span>;</span><br><span class="line">  a1[<span class="number">7</span>] ^= <span class="number">0x28u</span>;</span><br><span class="line">  a1[<span class="number">8</span>] ^= <span class="number">8u</span>;</span><br><span class="line">  ++a1[<span class="number">9</span>];</span><br><span class="line">......    <span class="comment">//太长了这里就不放了，其实就是把IDA里的异或部分全部复制粘贴下来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">126</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; k++) a1[k] = flag[k];</span><br><span class="line">      a1[i] = j;</span><br><span class="line">      <span class="built_in">sub_83A</span>(a1);</span><br><span class="line">      <span class="keyword">if</span> (a1[i] == v3[i]) &#123;</span><br><span class="line">      flag[i] = j;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) cout &lt;&lt; (<span class="type">char</span>)flag[i];  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp2:使用pwntool暴力破解，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">&quot;actf&#123;&quot;</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">        p = process(<span class="string">&#x27;./SoulLike&#x27;</span>)</span><br><span class="line">        _flag = flag + <span class="built_in">chr</span>(i)<span class="comment"># _flag(临时flag) = &quot;actf&#123;&quot; + chr(i)</span></span><br><span class="line">        <span class="built_in">print</span>(_flag)</span><br><span class="line">        p.sendline(_flag)<span class="comment"># 发送临时flag</span></span><br><span class="line">        s = p.recvline().decode()<span class="comment"># 接收回显</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;on #&quot;</span> <span class="keyword">in</span> s:<span class="comment"># 如果回显中有&quot;on #&quot;</span></span><br><span class="line">            r = <span class="built_in">int</span>(s.split(<span class="string">&quot;on #&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;\n&quot;</span>)[<span class="number">0</span>])<span class="comment"># 先按换行符&quot;\n&quot;分割取前面的，再按&quot;on #&quot;分割去后面部分，如&quot;wrong on # 34\n try again\n&quot;,则取到&quot;34&quot;</span></span><br><span class="line">            <span class="keyword">if</span> r == k+<span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(s)</span><br><span class="line">                flag += <span class="built_in">chr</span>(i)<span class="comment"># 更新flag</span></span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">        p.close()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216230202330.png" alt="image-20250216230202330"></p><p>exp3: 使用angr</p><p><a href="https://www.cnblogs.com/level5uiharu/p/16925991.html">angr_ctf——从0学习angr（一）：angr简介与核心概念 - Uiharu - 博客园</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">base_addr=<span class="number">0x400000</span></span><br><span class="line">p=angr.Project(<span class="string">&quot;SoulLike&quot;</span>,auto_load_libs=<span class="literal">False</span>,main_opts=&#123;<span class="string">&quot;base_addr&quot;</span>:base_addr&#125;)</span><br><span class="line"></span><br><span class="line">init_state=p.factory.entry_state()</span><br><span class="line">sm=p.factory.simgr(init_state)</span><br><span class="line">sm.explore(find=base_addr+<span class="number">0x1117d</span>)</span><br><span class="line"><span class="keyword">if</span> sm.found:</span><br><span class="line">    found_state=sm.found[<span class="number">0</span>]</span><br><span class="line">    found_state.posix.dumps(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><p>虽然一开始都处理，但现在这三种方法都弄懂了，还是收获满满的</p><h2 id="ACTF新生赛2020-fungame"><a href="#ACTF新生赛2020-fungame" class="headerlink" title="[ACTF新生赛2020]fungame"></a>[ACTF新生赛2020]fungame</h2><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216231222662.png" alt="image-20250216231222662"></p><p>一个简单的异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">y1 = [</span><br><span class="line">  <span class="number">0x23</span>, <span class="number">0x61</span>, <span class="number">0x3E</span>, <span class="number">0x69</span>, <span class="number">0x54</span>, <span class="number">0x41</span>, <span class="number">0x18</span>, <span class="number">0x4D</span>, <span class="number">0x6E</span>, <span class="number">0x3B</span>,</span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x53</span>, <span class="number">0x30</span>, <span class="number">0x79</span>, <span class="number">0x45</span>, <span class="number">0x5B</span>, <span class="number">0x71</span></span><br><span class="line">]</span><br><span class="line">y2 = [</span><br><span class="line">  <span class="number">0x71</span>, <span class="number">0x04</span>, <span class="number">0x61</span>, <span class="number">0x58</span>, <span class="number">0x27</span>, <span class="number">0x1E</span>, <span class="number">0x4B</span>, <span class="number">0x22</span>, <span class="number">0x5E</span>, <span class="number">0x64</span>,</span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x26</span>, <span class="number">0x5E</span>, <span class="number">0x17</span>, <span class="number">0x3C</span>, <span class="number">0x7A</span>, <span class="number">0xFF</span></span><br><span class="line">]</span><br><span class="line">a1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    a1 += <span class="built_in">chr</span>(y2[i] ^ y1[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a1, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># Re_1s_So0_funny!</span></span><br></pre></td></tr></table></figure><p>提交然后发现不对，结合在字符串表里看到的<code>please input angin:</code>和<code>base64表</code>，因为运行程序提示输入的是<code>please input</code>,且输错就退出了，所以查看一下<code>please input angin:</code>所在地方</p><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216233058059.png" alt="image-20250216233058059"></p><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216232654497.png" alt="image-20250216232654497"></p><p>但还是有问题，最后经人提醒才知道，还考了栈溢出的知识，也就是<code>a1s0_pWn</code>的提示</p><p><code>Destination[12]</code>长度只有12，而第一部分长度位16，也就是说溢出了4，刚好把栈底填满(32位程序)，返回地址传入了<code>_X</code>的地址</p><p><img src="./pic/BUUCTF-Reverse.assets/image-20250216233500622.png" alt="image-20250216233500622"></p><p>传入的地址为<code>40233D</code>，即为<code>ret</code>返回的地址<img src="https://s1.vika.cn/space/2025/02/18/a6c85ed8dfff41ab9f388b692615784f" alt=""></p><p><img src="https://s1.vika.cn/space/2025/02/18/7632cacf1e2648a6a920cf07a006c0b0" alt=""></p><ul><li>验证</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;flag&#123;Re_1s_So0_funny!&#x27;</span></span><br><span class="line">flag += <span class="built_in">chr</span>(<span class="number">0x3D</span>)</span><br><span class="line">flag += <span class="built_in">chr</span>(<span class="number">0x23</span>)</span><br><span class="line">flag += <span class="built_in">chr</span>(<span class="number">0x40</span>)</span><br><span class="line">flag += <span class="string">&#x27;a1s0_pWn&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;Re_1s_So0_funny!=#@a1s0_pWn&#125;</span></span><br></pre></td></tr></table></figure><h1 id="BJDCTF"><a href="#BJDCTF" class="headerlink" title="BJDCTF"></a>BJDCTF</h1><h2 id="BJDCTF2020-BJD-hamburger-competition"><a href="#BJDCTF2020-BJD-hamburger-competition" class="headerlink" title="[BJDCTF2020]BJD-hamburger-competition"></a>[BJDCTF2020]BJD-hamburger-competition</h2><p><a href="https://bbs.kanxue.com/thread-272066.htm">WP</a></p><ul><li>第一次做的Unity3D题目，抽象的老八秘制小汉堡游戏</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[BJDCTF2020]BJD-hamburger-competition-5.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Unity3D是由Unity Technologies开发的一个让玩家轻松创建互动内容的多平台的综合型游戏开发工具，</span><br><span class="line">Unity3D是用C#开发的，</span><br><span class="line">C#的反汇编工具为dnspy，但是把哪个东西丢进去呢？</span><br><span class="line"> </span><br><span class="line">unity在打包玩程序后，会将所有的代码打进一个Assembly-CSharp.dll的文件里面，</span><br><span class="line">通过这个文件的反编译，就能详细看见里面的代码内容。(这个文件在Managed目录下)</span><br></pre></td></tr></table></figure><p><img src="./pic/BUUCTF-Reverse.assets/[BJDCTF2020]BJD-hamburger-competition-1.png" alt="alt text"></p><ul><li>意思是<code>sha1</code>对<code>str</code>加密结果为图中那一串，再用<code>str</code>的<code>MD5</code>的前20位作为flag</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[BJDCTF2020]BJD-hamburger-competition-2.png" alt="alt text"></p><ul><li>所以在线sha1解密，在MD5加密就行</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[BJDCTF2020]BJD-hamburger-competition-3.png" alt="alt text"></p><p><img src="./pic/BUUCTF-Reverse.assets/[BJDCTF2020]BJD-hamburger-competition-4.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B8C37E33DEFDE51CF91E1E03E51657DA</span><br></pre></td></tr></table></figure><p>取前20个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;B8C37E33DEFDE51CF91E&#125;</span><br></pre></td></tr></table></figure><h1 id="MRCTF"><a href="#MRCTF" class="headerlink" title="MRCTF"></a>MRCTF</h1><h2 id="MRCTF2020-hello-world-go"><a href="#MRCTF2020-hello-world-go" class="headerlink" title="[MRCTF2020]hello_world_go"></a>[MRCTF2020]hello_world_go</h2><ul><li>应该是个签到题，IDA打开就是flag</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[MRCTF2020]hello_world_go-1.png" alt="alt text "></p><h2 id="MRCTF2020-PixelShooter"><a href="#MRCTF2020-PixelShooter" class="headerlink" title="[MRCTF2020]PixelShooter"></a>[MRCTF2020]PixelShooter</h2><ul><li>unity游戏逆向还得是dnspy</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[MRCTF2020]PixelShooter-1.png" alt="alt text"></p><p><img src="./pic/BUUCTF-Reverse.assets/[MRCTF2020]PixelShooter.png" alt="alt text"></p><h2 id="MRCTF2020-Transform"><a href="#MRCTF2020-Transform" class="headerlink" title="[MRCTF2020]Transform"></a>[MRCTF2020]Transform</h2><p><img src="./pic/BUUCTF-Reverse.assets/[MRCTF2020]Transform.png" alt="alt text"></p><ul><li>64位，无壳</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[MRCTF2020]Transform-2.png" alt="alt text"></p><ul><li>不懂，搜的，但对解题没影响，因为提取的数据（data）都小于2^8^=128</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">对于 LOBYTE(<span class="number">9</span>)，我们首先需要理解 LOBYTE 宏的作用：它提取一个 <span class="number">16</span> 位数的低 <span class="number">8</span> 位部分。</span><br><span class="line"></span><br><span class="line">LOBYTE(w) 宏通常是这样定义的：</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOBYTE(w) ((unsigned char)(w &amp; 0xFF))</span></span><br><span class="line">分析</span><br><span class="line">给定输入值 <span class="number">9</span>：</span><br><span class="line"></span><br><span class="line"><span class="number">9</span> 的二进制表示是 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1001</span> (<span class="number">16</span> 位的二进制表示)，在低字节中，我们看到它的低 <span class="number">8</span> 位是 <span class="number">0000</span> <span class="number">1001</span>，即 <span class="number">9</span>。</span><br><span class="line"></span><br><span class="line">执行 LOBYTE(<span class="number">9</span>)：</span><br><span class="line"></span><br><span class="line"><span class="number">9</span> 的二进制表示 <span class="number">0000</span> <span class="number">1001</span>，低 <span class="number">8</span> 位是 <span class="number">0000</span> <span class="number">1001</span>，它的值为 <span class="number">9</span>。</span><br><span class="line">结论</span><br><span class="line">LOBYTE(<span class="number">9</span>) 的结果是 <span class="number">9</span>。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    <span class="number">103</span>, <span class="number">121</span>, <span class="number">123</span>, <span class="number">127</span>, <span class="number">117</span>, <span class="number">43</span>, <span class="number">60</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">121</span>,</span><br><span class="line">    <span class="number">87</span>, <span class="number">94</span>, <span class="number">93</span>, <span class="number">66</span>, <span class="number">123</span>, <span class="number">45</span>, <span class="number">42</span>, <span class="number">102</span>, <span class="number">66</span>, <span class="number">126</span>,</span><br><span class="line">    <span class="number">76</span>, <span class="number">87</span>, <span class="number">121</span>, <span class="number">65</span>, <span class="number">107</span>, <span class="number">126</span>, <span class="number">101</span>, <span class="number">60</span>, <span class="number">92</span>, <span class="number">69</span>,</span><br><span class="line">    <span class="number">111</span>, <span class="number">98</span>, <span class="number">77</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">index = [<span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">32</span>, <span class="number">29</span>, <span class="number">11</span>, <span class="number">30</span>, <span class="number">27</span>,</span><br><span class="line">         <span class="number">22</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">5</span>, <span class="number">31</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">14</span>, <span class="number">0</span>, ]</span><br><span class="line"><span class="comment"># print(len(data))</span></span><br><span class="line"><span class="comment"># print(len(index))</span></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">33</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    flag[index[i]] = <span class="built_in">chr</span>(data[i] ^ index[i])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))</span><br><span class="line"><span class="comment"># MRCTF&#123;Tr4nsp0sltiON_Clph3r_1s_3z&#125;</span></span><br></pre></td></tr></table></figure><h1 id="GWCTF"><a href="#GWCTF" class="headerlink" title="GWCTF"></a>GWCTF</h1><h1 id="HDCTF"><a href="#HDCTF" class="headerlink" title="HDCTF"></a>HDCTF</h1><h1 id="WUSTCTF"><a href="#WUSTCTF" class="headerlink" title="WUSTCTF"></a>WUSTCTF</h1><h2 id="WUSTCTF2020-Cr0ssfun"><a href="#WUSTCTF2020-Cr0ssfun" class="headerlink" title="[WUSTCTF2020]Cr0ssfun"></a>[WUSTCTF2020]Cr0ssfun</h2><ul><li>查壳，无</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]Cr0ssfun.png" alt="alt text"></p><ul><li>单纯的套娃拼接，直接让kimi帮我提取了</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __fastcall <span class="title function_">iven_is_handsome</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1[<span class="number">10</span>] == <span class="number">112</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">13</span>] == <span class="number">64</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">3</span>] == <span class="number">102</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">26</span>] == <span class="number">114</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">20</span>] == <span class="number">101</span></span><br><span class="line">      &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)iven_is_c0ol(a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BOOL8 __fastcall <span class="title function_">iven_is_c0ol</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1[<span class="number">7</span>] == <span class="number">48</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">16</span>] == <span class="number">95</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">11</span>] == <span class="number">112</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">23</span>] == <span class="number">101</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">30</span>] == <span class="number">117</span></span><br><span class="line">      &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)iven_1s_educated(a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BOOL8 __fastcall <span class="title function_">iven_1s_educated</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> *a1 == <span class="number">119</span> &amp;&amp; a1[<span class="number">6</span>] == <span class="number">50</span> &amp;&amp; a1[<span class="number">22</span>] == <span class="number">115</span> &amp;&amp; a1[<span class="number">31</span>] == <span class="number">110</span> &amp;&amp; a1[<span class="number">12</span>] == <span class="number">95</span> &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)iven_1s_brave(a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BOOL8 __fastcall <span class="title function_">iven_1s_brave</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1[<span class="number">15</span>] == <span class="number">100</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">8</span>] == <span class="number">123</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">18</span>] == <span class="number">51</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">28</span>] == <span class="number">95</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">21</span>] == <span class="number">114</span></span><br><span class="line">      &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)iven_1s_great(a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BOOL8 __fastcall <span class="title function_">iven_1s_great</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1[<span class="number">2</span>] == <span class="number">116</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">9</span>] == <span class="number">99</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">32</span>] == <span class="number">125</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">19</span>] == <span class="number">118</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">5</span>] == <span class="number">48</span></span><br><span class="line">      &amp;&amp; a1[<span class="number">14</span>] == <span class="number">110</span></span><br><span class="line">      &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)iven_and_grace(a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BOOL8 __fastcall <span class="title function_">iven_and_grace</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1[<span class="number">4</span>] == <span class="number">50</span> &amp;&amp; a1[<span class="number">17</span>] == <span class="number">114</span> &amp;&amp; a1[<span class="number">29</span>] == <span class="number">102</span> &amp;&amp; a1[<span class="number">17</span>] == <span class="number">114</span> &amp;&amp; a1[<span class="number">24</span>] == <span class="number">95</span> &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)finally_fun(a1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BOOL8 __fastcall <span class="title function_">finally_fun</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1[<span class="number">1</span>] == <span class="number">99</span> &amp;&amp; a1[<span class="number">25</span>] == <span class="number">64</span> &amp;&amp; a1[<span class="number">27</span>] == <span class="number">101</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a1[<span class="number">10</span>] == <span class="number">112</span></span><br><span class="line">a1[<span class="number">13</span>] == <span class="number">64</span></span><br><span class="line">a1[<span class="number">3</span>] == <span class="number">102</span></span><br><span class="line">a1[<span class="number">26</span>] == <span class="number">114</span></span><br><span class="line">a1[<span class="number">20</span>] == <span class="number">101</span></span><br><span class="line">a1[<span class="number">7</span>] == <span class="number">48</span></span><br><span class="line">a1[<span class="number">16</span>] == <span class="number">95</span></span><br><span class="line">a1[<span class="number">11</span>] == <span class="number">112</span></span><br><span class="line">a1[<span class="number">23</span>] == <span class="number">101</span></span><br><span class="line">a1[<span class="number">30</span>] == <span class="number">117</span></span><br><span class="line">a1[<span class="number">15</span>] == <span class="number">100</span></span><br><span class="line">a1[<span class="number">8</span>] == <span class="number">123</span></span><br><span class="line">a1[<span class="number">18</span>] == <span class="number">51</span></span><br><span class="line">a1[<span class="number">28</span>] == <span class="number">95</span></span><br><span class="line">a1[<span class="number">21</span>] == <span class="number">114</span></span><br><span class="line">a1[<span class="number">2</span>] == <span class="number">116</span>  </span><br><span class="line">a1[<span class="number">9</span>] == <span class="number">99</span></span><br><span class="line">a1[<span class="number">32</span>] == <span class="number">125</span></span><br><span class="line">a1[<span class="number">19</span>] == <span class="number">118</span></span><br><span class="line">a1[<span class="number">5</span>] == <span class="number">48</span></span><br><span class="line">a1[<span class="number">14</span>] == <span class="number">110</span></span><br><span class="line">a1[<span class="number">4</span>] == <span class="number">50</span> </span><br><span class="line">a1[<span class="number">17</span>] == <span class="number">114</span> </span><br><span class="line">a1[<span class="number">29</span>] == <span class="number">102</span> </span><br><span class="line">a1[<span class="number">17</span>] == <span class="number">114</span> </span><br><span class="line">a1[<span class="number">24</span>] == <span class="number">95</span></span><br><span class="line">a1[<span class="number">1</span>] == <span class="number">99</span> </span><br><span class="line">a1[<span class="number">25</span>] == <span class="number">64</span> </span><br><span class="line">a1[<span class="number">27</span>] == <span class="number">101</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]Cr0ssfun-2.png" alt="alt text"></p><ul><li>最后用flag{}包裹</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cctf2000&#123;cpp_@nd_r3verse_@re_fun&#125;</span><br><span class="line"># flag&#123;cpp_@nd_r3verse_@re_fun&#125;</span><br></pre></td></tr></table></figure><h2 id="WUSTCTF2020-level2"><a href="#WUSTCTF2020-level2" class="headerlink" title="[WUSTCTF2020]level2"></a>[WUSTCTF2020]level2</h2><ul><li>UPX加壳了</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level2.png" alt="alt text"></p><ul><li><code>upx -d</code>去壳</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level2-1.png" alt="alt text" /></p><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level2-2.png" alt="alt text"></p><h2 id="WUSTCTF2020-level3"><a href="#WUSTCTF2020-level3" class="headerlink" title="[WUSTCTF2020]level3"></a>[WUSTCTF2020]level3</h2><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level3.png" alt="alt text"></p><ul><li>明示是Base64加密，shift+F12找到密文，用赛博厨子解密了一下，不对<br><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level3-2.png" alt="alt text"><br><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level3-1.png" alt="alt text"></li><li>查看Base64表，按 X 查看表的引用，果然不对劲，发现有对表的操作<br><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level3-3.png" alt="alt text"><br><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level3-4.png" alt="alt text"></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">base64_table = [</span><br><span class="line">    <span class="number">0x41</span>, <span class="number">0x42</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x49</span>, <span class="number">0x4A</span>,</span><br><span class="line">    <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x4D</span>, <span class="number">0x4E</span>, <span class="number">0x4F</span>, <span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x54</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x58</span>, <span class="number">0x59</span>, <span class="number">0x5A</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>,</span><br><span class="line">    <span class="number">0x65</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x6D</span>, <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x6F</span>, <span class="number">0x70</span>, <span class="number">0x71</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x77</span>, <span class="number">0x78</span>,</span><br><span class="line">    <span class="number">0x79</span>, <span class="number">0x7A</span>, <span class="number">0x30</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>,</span><br><span class="line">    <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x2B</span>, <span class="number">0x2F</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    v1 = base64_table[i]</span><br><span class="line">    base64_table[i] = base64_table[<span class="number">19</span> - i]</span><br><span class="line">    result = <span class="number">19</span> - i</span><br><span class="line">    base64_table[result] = v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> base64_table</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(i)), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># TSRQPONMLKJIHGFEDCBAUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</span></span><br></pre></td></tr></table></figure><ul><li>换表，赛博厨子解一下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;Base64_is_the_start_of_reverse&#125;</span><br></pre></td></tr></table></figure><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level3-5.png" alt="alt text"></p><ul><li>之前看到的一个wp里的脚本，挺有意思的，直接本地换表（映射）解密，在这贴一下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64 <span class="comment">#导入base64模块用于解密</span></span><br><span class="line">s1 = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span> <span class="comment">#标准表</span></span><br><span class="line">s2 = <span class="string">&#x27;qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD&#x27;</span> <span class="comment">#base64换表</span></span><br><span class="line">en_text = <span class="string">&#x27;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM/8==&#x27;</span> <span class="comment">#密文</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">map</span> = <span class="built_in">str</span>.maketrans(s2, s1) <span class="comment">#用str类中的maketrans建立映射，注意第一个参数是需要映射的字符串，第二个参数是映射的目标</span></span><br><span class="line">map_text = en_text.translate(<span class="built_in">map</span>) <span class="comment">#映射实现替换密文，替换前是base64换表加密，替换后则是base64标准表加密</span></span><br><span class="line"><span class="built_in">print</span>(map_text) <span class="comment">#可以先看看标准表加密的密文</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(map_text)) <span class="comment">#直接使用提供的base64解密函数，获得明文，就是flag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TlNTQ1RGe2E4ZDQzNDc3MjI4MDBlNzJlMzRlMWFiYTNmZTkxNGFlfQ==</span></span><br><span class="line"><span class="comment"># b&#x27;NSSCTF&#123;a8d4347722800e72e34e1aba3fe914ae&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">en_base64 = <span class="string">&#x27;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==&#x27;</span></span><br><span class="line">de_base64 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">old_base64_table = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">new_base64_table = <span class="string">&#x27;TSRQPONMLKJIHGFEDCBAUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((base64.b64decode((en_base64.translate(<span class="built_in">str</span>.maketrans(new_base64_table, old_base64_table))).encode())).decode())</span><br><span class="line"><span class="comment"># wctf2020&#123;Base64_is_the_start_of_reverse&#125;</span></span><br></pre></td></tr></table></figure><h2 id="WUSTCTF2020-level4"><a href="#WUSTCTF2020-level4" class="headerlink" title="[WUSTCTF2020]level4"></a>[WUSTCTF2020]level4</h2><ul><li>64位，无壳</li></ul><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level4.png" alt="alt text"></p><p><img src="./pic/BUUCTF-Reverse.assets/[WUSTCTF2020]level4-1.png" alt="alt text"></p><ul><li>一眼没看出来，仔细看了才知道，<code>Date Structure</code>考了个数据结构</li></ul><ul><li>二叉树中序遍历</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">type1</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    type1(*((_QWORD *)a1 + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">putchar</span>(*a1);</span><br><span class="line">    <span class="keyword">return</span> type1(*((_QWORD *)a1 + <span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>二叉树后序遍历</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">type2</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    type2(*((_QWORD *)a1 + <span class="number">1</span>));</span><br><span class="line">    type2(*((_QWORD *)a1 + <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">putchar</span>(*a1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>程序运行的结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Traversal type 1:2f0t02T&#123;hcsiI_SwA__r7Ee&#125;</span><br><span class="line">Traversal type 2:20f0Th&#123;2tsIS_icArE&#125;e7__w</span><br></pre></td></tr></table></figure><ul><li>已知后序中序输出前序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_tree</span>(<span class="params">post, mid</span>):</span><br><span class="line">    <span class="comment"># 如果没有元素，返回空树</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> post <span class="keyword">or</span> <span class="keyword">not</span> mid:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">  </span><br><span class="line">    root_val = post[-<span class="number">1</span>] <span class="comment"># 后序遍历的最后一个元素是当前树的根节点</span></span><br><span class="line">    root_index = mid.index(root_val)  <span class="comment"># 找到根节点在中序遍历中的位置</span></span><br><span class="line">    root = &#123;<span class="string">&#x27;val&#x27;</span>: root_val, <span class="string">&#x27;left&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;right&#x27;</span>: <span class="literal">None</span>&#125; <span class="comment"># 创建树的根节点</span></span><br><span class="line">    root[<span class="string">&#x27;left&#x27;</span>] = build_tree(post[:root_index], mid[:root_index])  <span class="comment"># 递归构建左子树</span></span><br><span class="line">    root[<span class="string">&#x27;right&#x27;</span>] = build_tree(post[root_index:-<span class="number">1</span>], mid[root_index + <span class="number">1</span>:])  <span class="comment"># 递归构建右子树</span></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preorder_traversal</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="comment"># 如果树为空，返回空列表</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="comment"># 返回根节点值 + 左子树的前序遍历 + 右子树的前序遍历</span></span><br><span class="line">    <span class="keyword">return</span> [root[<span class="string">&#x27;val&#x27;</span>]] + preorder_traversal(root[<span class="string">&#x27;left&#x27;</span>]) + preorder_traversal(root[<span class="string">&#x27;right&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入后序遍历和中序遍历</span></span><br><span class="line">post_order = <span class="string">&quot;20f0Th&#123;2tsIS_icArE&#125;e7__w&quot;</span></span><br><span class="line">in_order = <span class="string">&quot;2f0t02T&#123;hcsiI_SwA__r7Ee&#125;&quot;</span></span><br><span class="line"><span class="comment"># 重建二叉树</span></span><br><span class="line">tree_root = build_tree(<span class="built_in">list</span>(post_order), <span class="built_in">list</span>(in_order))</span><br><span class="line"><span class="comment"># 获取前序遍历结果</span></span><br><span class="line">pre_order_result = <span class="string">&#x27;&#x27;</span>.join(preorder_traversal(tree_root))</span><br><span class="line"><span class="built_in">print</span>(pre_order_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># wctf2020&#123;This_IS_A_7reE&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FlareOnCTF</title>
      <link href="/2025/02/14/FlareOnCTF/"/>
      <url>/2025/02/14/FlareOnCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="FlareOnCTF-练习"><a href="#FlareOnCTF-练习" class="headerlink" title="FlareOnCTF 练习"></a>FlareOnCTF 练习</h1><h2 id="FlareOn4-IgniteMe"><a href="#FlareOn4-IgniteMe" class="headerlink" title="[FlareOn4] IgniteMe"></a>[FlareOn4] IgniteMe</h2><ul><li><p>无壳, ida 打开<br><img src="./pic/FlareOnCTF.assets/[FlareOn4]IgniteMe.png" alt="alt text"><br><img src="./pic/FlareOnCTF.assets/[FlareOn4]IgniteMe-2.png" alt="alt text"><br><img src="./pic/FlareOnCTF.assets/[FlareOn4]IgniteMe-1.png" alt="alt text"></p></li><li><p>在 <code>xor_flag[i] = v4 ^ input[i]</code> 处下断点，动态调试后就可以看到 v4 的值了，（把鼠标放 v4 上就可以显示值），不好截图，双击 v4 也可以看到值为 4<br><img src="./pic/FlareOnCTF.assets/[FlareOn4]IgniteMe-3.png" alt="alt text"></p></li><li><p>最后, 从 <code>最后一个</code> 开始异或 <code>前一个</code> 的运算</p></li><li><p>易错的是，<code>v4 = a[i] ^ v4</code>, 之前写成 <code>v4 = a[i]</code> 卡了好久</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = [</span><br><span class="line">  <span class="number">0x0D</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x45</span>, <span class="number">0x2A</span>, <span class="number">0x17</span>, <span class="number">0x78</span>, <span class="number">0x44</span>, <span class="number">0x2B</span>, <span class="number">0x6C</span>, </span><br><span class="line">  <span class="number">0x5D</span>, <span class="number">0x5E</span>, <span class="number">0x45</span>, <span class="number">0x12</span>, <span class="number">0x2F</span>, <span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x44</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, </span><br><span class="line">  <span class="number">0x56</span>, <span class="number">0x09</span>, <span class="number">0x5F</span>, <span class="number">0x45</span>, <span class="number">0x47</span>, <span class="number">0x73</span>, <span class="number">0x26</span>, <span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x13</span>, </span><br><span class="line">  <span class="number">0x17</span>, <span class="number">0x48</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, <span class="number">0x40</span>, <span class="number">0x4D</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x69</span></span><br><span class="line">]</span><br><span class="line">v4 = <span class="number">0x4</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a) - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(a[i] ^ v4)</span><br><span class="line">    v4 = a[i] ^ v4</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># _y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="FlareOn1-Bob-Doge"><a href="#FlareOn1-Bob-Doge" class="headerlink" title="[FlareOn1] Bob-Doge"></a>[FlareOn1] Bob-Doge</h2><ul><li>一个下载器，下载后运行是这个东西</li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn1]Bob-Doge-2.png" alt="alt text"></p><p><img src="./pic/FlareOnCTF.assets/[FlareOn1]Bob-Doge-3.png" alt="alt text"></p><hr><ul><li>IDA 反编译, 看不懂没见过的形式<br><img src="./pic/FlareOnCTF.assets/[FlareOn1]Bob-Doge-4.png" alt="alt text"></li></ul><ul><li><p>换一个工具, despy 打开, 看上舒服多了</p></li><li><p>主要在这，<code>DECODE</code> 按钮事件，最终解码后的字符串 <code>text3</code> 显示在 <code>lbl_title</code> 标签中。</p></li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn1]Bob-Doge-5.png" alt="alt text"></p><ul><li>下断点，动态调试，直接看内容</li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn1]Bob-Doge-1.png" alt="alt text"></p><h2 id="FlareOn3-Challenge1"><a href="#FlareOn3-Challenge1" class="headerlink" title="[FlareOn3] Challenge1"></a>[FlareOn3] Challenge1</h2><p><img src="./pic/FlareOnCTF.assets/[FlareOn3]Challenge1.png" alt="alt text"> <img src="./pic/FlareOnCTF.assets/[FlareOn3]Challenge1-3.png" alt="alt text"></p><ul><li>base64 加密</li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn3]Challenge1-2.png" alt="alt text"></p><ul><li><code>shift+f12</code> 查看字符串，发现换表了</li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn3]Challenge1-4.png" alt="alt text"> <img src="./pic/FlareOnCTF.assets/[FlareOn3]Challenge1-1.png" alt="alt text"></p><ul><li>赛博厨子梭哈一下，根据后面小写的形式可知，换的表前面少了个 <code>Z</code></li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn3]Challenge1-5.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;sh00ting_phish_in_a_barrel@flare-on.com&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="FlareOn6-Overlong"><a href="#FlareOn6-Overlong" class="headerlink" title="[FlareOn6] Overlong"></a>[FlareOn6] Overlong</h2><ul><li>根据题目提示，这句话冒号 <code>:</code> 后面应该还有内容</li></ul><p><img src="./pic/FlareOnCTF.assets/[FlareOn6]Overlong.png" alt="alt text"></p><ul><li>题目内容很少，都看一下<br><img src="./pic/FlareOnCTF.assets/[FlareOn6]Overlong-1.png" alt="alt text"></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __stdcall <span class="title function_">start</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> Text[<span class="number">128</span>]; <span class="comment">// [esp+0h] [ebp-84h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [esp+80h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = sub_401160(Text, (<span class="type">int</span>)&amp;unk_402008, <span class="number">28u</span>);</span><br><span class="line">  Text[v6] = <span class="number">0</span>;</span><br><span class="line">  MessageBoxA(<span class="number">0</span>, Text, Caption, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title function_">sub_401160</span><span class="params">(<span class="type">char</span> *a1, <span class="type">char</span> *a2, <span class="type">unsigned</span> <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+4h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a3; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    a2 += sub_401000(a1, a2);</span><br><span class="line">    <span class="keyword">if</span> ( !*a1++ )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里进行加密</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_401000</span><span class="params">(<span class="type">unsigned</span> __int8 *a1, <span class="type">char</span> *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [esp+0h] [ebp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v4; <span class="comment">// [esp+4h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)(<span class="type">unsigned</span> __int8)*a2 &gt;&gt; <span class="number">3</span> == <span class="number">30</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = a2[<span class="number">3</span>] &amp; <span class="number">0x3F</span> | ((a2[<span class="number">2</span>] &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>);</span><br><span class="line">    v3 = <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="type">int</span>)(<span class="type">unsigned</span> __int8)*a2 &gt;&gt; <span class="number">4</span> == <span class="number">14</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = a2[<span class="number">2</span>] &amp; <span class="number">0x3F</span> | ((a2[<span class="number">1</span>] &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>);</span><br><span class="line">    v3 = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="type">int</span>)(<span class="type">unsigned</span> __int8)*a2 &gt;&gt; <span class="number">5</span> == <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = a2[<span class="number">1</span>] &amp; <span class="number">0x3F</span> | ((*a2 &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>);</span><br><span class="line">    v3 = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = *a2;</span><br><span class="line">    v3 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = v4;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 <code>&amp;unk_FB2008</code> 按 <code>shift+e</code> 提取数据，按加密写 python 脚本解密</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">a2 = [<span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0x89</span>, <span class="number">0xc0</span>, <span class="number">0xa0</span>, <span class="number">0xc1</span>, <span class="number">0xae</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xa5</span>,</span><br><span class="line">      <span class="number">0xc1</span>, <span class="number">0xb6</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xa5</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xb2</span>, <span class="number">0xf0</span>,</span><br><span class="line">      <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xa2</span>, <span class="number">0x72</span>, <span class="number">0x6f</span>, <span class="number">0xc1</span>, <span class="number">0xab</span>,</span><br><span class="line">      <span class="number">0x65</span>, <span class="number">0xe0</span>, <span class="number">0x80</span>, <span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xb4</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xa8</span>,</span><br><span class="line">      <span class="number">0xc1</span>, <span class="number">0xa5</span>, <span class="number">0x20</span>, <span class="number">0xc1</span>, <span class="number">0xa5</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xae</span>, <span class="number">0x63</span>, <span class="number">0xc1</span>,</span><br><span class="line">      <span class="number">0xaf</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xa4</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xa9</span>, <span class="number">0x6e</span>, <span class="number">0xc1</span>,</span><br><span class="line">      <span class="number">0xa7</span>, <span class="number">0xc0</span>, <span class="number">0xba</span>, <span class="number">0x20</span>, <span class="number">0x49</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>, <span class="number">0xc1</span>,</span><br><span class="line">      <span class="number">0xa1</span>, <span class="number">0xc1</span>, <span class="number">0x9f</span>, <span class="number">0xc1</span>, <span class="number">0x8d</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>, <span class="number">0xc1</span>, <span class="number">0xb4</span>,</span><br><span class="line">      <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xa8</span>, <span class="number">0xc1</span>, <span class="number">0x9f</span>,</span><br><span class="line">      <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xa5</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>, <span class="number">0xc1</span>, <span class="number">0xa5</span>, <span class="number">0xe0</span>,</span><br><span class="line">      <span class="number">0x81</span>, <span class="number">0x9f</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xae</span>, <span class="number">0xc1</span>, <span class="number">0x9f</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>,</span><br><span class="line">      <span class="number">0x81</span>, <span class="number">0x83</span>, <span class="number">0xc1</span>, <span class="number">0x9f</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xaf</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>,</span><br><span class="line">      <span class="number">0xc1</span>, <span class="number">0x84</span>, <span class="number">0x5f</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xa9</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>,</span><br><span class="line">      <span class="number">0x6e</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0x9f</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0xa7</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>, <span class="number">0x80</span>,</span><br><span class="line">      <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xa6</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xac</span>, <span class="number">0xe0</span>, <span class="number">0x81</span>,</span><br><span class="line">      <span class="number">0xa1</span>, <span class="number">0xc1</span>, <span class="number">0xb2</span>, <span class="number">0xc1</span>, <span class="number">0xa5</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0xad</span>, <span class="number">0xf0</span>,</span><br><span class="line">      <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xaf</span>, <span class="number">0x6e</span>, <span class="number">0xc0</span>, <span class="number">0xae</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xa3</span>,</span><br><span class="line">      <span class="number">0x6f</span>, <span class="number">0xf0</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0xad</span>, <span class="number">0x0</span>]</span><br><span class="line">flag = []</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">68</span>):</span><br><span class="line">    <span class="keyword">if</span> a2[j] &gt;&gt; <span class="number">3</span> == <span class="number">30</span>:</span><br><span class="line">        v4 = a2[j + <span class="number">3</span>] &amp; <span class="number">0x3f</span> | ((a2[j + <span class="number">2</span>] &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">6</span>)</span><br><span class="line">        v3 = <span class="number">4</span></span><br><span class="line">    <span class="keyword">elif</span> a2[j] &gt;&gt; <span class="number">4</span> == <span class="number">14</span>:</span><br><span class="line">        v4 = a2[j + <span class="number">2</span>] &amp; <span class="number">0x3F</span> | ((a2[j + <span class="number">1</span>] &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>)</span><br><span class="line">        v3 = <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> a2[j] &gt;&gt; <span class="number">5</span> == <span class="number">6</span>:</span><br><span class="line">        v4 = a2[j + <span class="number">1</span>] &amp; <span class="number">0x3F</span> | ((a2[j] &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>)</span><br><span class="line">        v3 = <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        v4 = a2[j]</span><br><span class="line">        v3 = <span class="number">1</span></span><br><span class="line">    flag.append(<span class="built_in">chr</span>(v4))</span><br><span class="line">    j += v3</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># I never broke the encoding: I_a_M_t_h_e_e_n_C_o_D_i_n_g@flare-on.com</span></span><br><span class="line">flag&#123;I_a_M_t_h_e_e_n_C_o_D_i_n_g@flare-on.com&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="FlareOn5-Ultimate-MineSweeper"><a href="#FlareOn5-Ultimate-MineSweeper" class="headerlink" title="[FlareOn5] Ultimate MineSweeper"></a>[FlareOn5] Ultimate MineSweeper</h2><p><a href="https://www.cnblogs.com/z5onk0/p/17462714.html">大佬题解</a></p><ul><li>透视挂</li><li>无敌挂</li><li>提取数据</li></ul><hr><p>这题不会，但大佬三个方法中的一个，手动操作一下</p><ul><li>无敌挂</li></ul><p><code>右键-编辑方法</code> 或 <code>ctrl+shift+E</code><br>改为 <code>if (this.MineField.BombRevealed &amp;&amp; false)</code> 或直接把这段删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (this.MineField.BombRevealed)</span><br><span class="line">&#123;</span><br><span class="line">    this.stopwatch.Stop();</span><br><span class="line">    Application.DoEvents();</span><br><span class="line">    Thread.Sleep(1000);</span><br><span class="line">    new FailurePopup().ShowDialog();</span><br><span class="line">    Application.Exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变成这样</p><p><img src="./pic/FlareOnCTF.assets/[FlareOn5]Ultimate-MineSweeper.png" alt="alt text"></p><p><code>文件-保存模块</code>，然后运行程序，找到旗子</p><p><img src="./pic/FlareOnCTF.assets/[FlareOn5]Ultimate-MineSweeper-2.png" alt="alt text"><br><img src="./pic/FlareOnCTF.assets/[FlareOn5]Ultimate MineSweeper-1.png" alt="alt text"></p><p><img src="./pic/FlareOnCTF.assets/[FlareOn5]Ultimate-MineSweeper-4.png" alt="alt text"><br><img src="./pic/FlareOnCTF.assets/[FlareOn5]Ultimate-MineSweeper-3.png" alt="alt text"></p><hr><h2 id="FlareOn4-login"><a href="#FlareOn4-login" class="headerlink" title="[FlareOn4]login"></a>[FlareOn4]login</h2><ul><li>题目是一个网页加密，直接查看页面源代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">Html</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>FLARE On 2017<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Enter the flag&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;prompt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Click to check the flag&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;prompt&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> flag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;flag&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> rotFlag = flag.<span class="title function_">replace</span>(<span class="regexp">/[a-zA-Z]/g</span>, <span class="keyword">function</span>(<span class="params">c</span>)&#123;<span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) + <span class="number">13</span>) ? c : c - <span class="number">26</span>);&#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;Correct flag!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;Incorrect flag, rot again&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>rot13加密</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;prompt&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;flag&quot;</span>).<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">var</span> rotFlag = flag.<span class="title function_">replace</span>(<span class="regexp">/[a-zA-Z]/g</span>, <span class="keyword">function</span>(<span class="params">c</span>)&#123;<span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) + <span class="number">13</span>) ? c : c - <span class="number">26</span>);&#125;);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;Correct flag!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;Incorrect flag, rot again&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure><ul><li>rot13解密<br><img src="./pic/FlareOnCTF.assets/[FlareOn4]login.png" alt="alt text"></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test-img</title>
      <link href="/2025/02/01/test-img/"/>
      <url>/2025/02/01/test-img/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文章置顶轮播图</title>
      <link href="/2025/01/29/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
      <url>/2025/01/29/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 创建日期</span><br><span class="line">updated: 更新日期</span><br><span class="line">cover: 文章封面</span><br><span class="line">description: 文章描述</span><br><span class="line">swiper_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三篇文章</title>
      <link href="/2025/01/29/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2025/01/29/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第二篇文章</title>
      <link href="/2025/01/29/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2025/01/29/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="images/2025-01-29-第二篇文章/image.png" alt="alt text"></p><p><img src="/images/2025-01-29-第二篇文章/image1.png" alt="alt text"></p><p><img src="./images/2025-01-29-第二篇文章/image1.png" alt="alt text"></p><p><img src="./images/image.png" alt="alt text"></p><p><img src="/_posts/images/2025-01-29-第二篇文章/image1.png" alt="alt text"></p><p><img src="/pic/2025-01-29-第二篇文章/image1.png" alt="alt text"></p><p><img src="./pic/2025-01-29-第二篇文章/image1.png" alt="alt text"></p><p><img src="./pic/2025-01-29-第二篇文章/image1.png" alt="alt text" style="zoom:50%;" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/01/28/hello-world/"/>
      <url>/2025/01/28/hello-world/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="36dc133e05371a021ab91777f10fb191aa9ded12ae22f39f32403a5144bc9ea6">15614819f5c2827bcb053d181e399f451105f8f8c5dfc7278ae67a5ab301641e4adf10d1fc05b3835ba28e2ecd352085b1b26ba8bf5522c38bc66b9eae9446d7ca5fcf7561a0772d2453e38eb54f918605c70074343fe6f1f5f61bf1efec39ed2ee24105afc7a0bfd20510e054b7a16057d4ceeb11da83aacfd8a9070a862185e2b9c7fe8f84f292c87d290fa4785f0d49b0198637ca0a55d313035d50bfc388587b4c4b3cedadd7ca56d3e963af5ff14df7d07413376ea6f237e6bb1a2c68779b9dea8ade37c778ad1655ec05e22feb6c2c54cc96b323c3b6d5467372b8cb390f56f2db2f2972ed1ebdc90d51b95da49ced6a67935d676022d92bdc0fa421c7aa5faa6ff872cb8368a4c5d966c2edb7181b268339ecb56d7bc211de1122e7700ad1e22346c8f49f29f131bc3111c8370602a85463e225d9ee3acb95dc3ca340d1e6abda8700268e033c64915d71b7dfbabd66cb9c4cc4d41cb6ae02a942030bd1bccfb4883f071508c376f3e91b117c2d0ec88e7201516fd2507f1bc4e6a6300bf7fe93ab1a7c7a30888c387dcdfdc5bfab46a3dd7f946535f97669034fcf801304da2bae904d65b87bb2f15b378c342c1d4db272bdf6fbdb75c126b6f98dbadce5573659abbce58f6e3c97dd4c6f5116514e7c1b6d535761219dd764cd37920b65e6be5ae2d2911dac5e36764109be1f42f0271ea8c228719dd8fa951fd133816db359b90ba463abc8bf57091ffdf0dd82c416d10f6ea55ee5fe647428336500404b108f4b0d66aaa9fb24b4d2111ef965c38844ed49f4d865d0496b532c7a03578785f154c1fbd5ee86a937e5f9f770c5cb2605bd005ef7e8a1d7690f8d2e1249a93c317a2383d86b5b501d918b5ef2f610982259b8b15b0ce299e513b82d5a839a6f1d5552e8541605515255017a850e3423408229c890f83c36e34e7cc24d3d5fb083fb4a5f5ed052cc9374c4c17723d80e8a73acffd47e950810f783d5fb737e4e0cf4e04f9131eea670bc1d2cc2bcfa33900f5a2504f6d927aa6ce8cb98791f88f6970ca2a013678966c8634366b5cea48a2fd1e60fe32e72117d143262bad0cebd2b9771c3774427dd26fcd0de71471188fb270f4c84c7fd0a8d618a5ce3e4dd4c85d978b173db060e404353c3bc770e4dcee0f73cf8284a459c7086713a73021a14398d9c94195a7030ede43004d4f6c1169d85532fc2baaa2b0d0dc5556a93e32410a4691055121b52e6653ed69e680ec2bc70fb42c923f577fc143b5a1a4430ecae231d1f68a661ebcc00f547532d72ff8c31f8df9b4baed85789ffacf12e3285966c89f586e5f95fecc664e5c51a8fd46b8c10ae0e9449668ea3d1f784d562b7cf322ed93f989f89d86c3c6eaa28f27b39542795b1d79128e1d830c88aa9f80316c4f055c1c35347d23873d772970dee76dfb950fd7993ccf6f46fc75aaa4c73cd7d3776c44d025d94d8bc80e621b6e21f687343e02f55ce7d499278321cb83d0b8c85a5b8c4071df309addc96b66eed45ca98e93315156415ca213b48c916c6b84134f1355b028f4ae56f46d69a1e899a2e3e9710033cd7bf03758189033af943a6c4b41ce1139f118cbfca3b2587978cfa0589fd890a535db399f98b33dd868fe27a466f265e6667b0099950ba0422022673f1e07d8f931066fd8387fec8c72126c53b9c5985830670805ad9a16a51509acc21955cab89658509a3b22e436f740abb1b957f96ac727655154ac33250a2a86322932756552fc41e3675a47492eb541053a3b1bc2a75f0c79feddcc5bd8007d4ffedf013078ec8cb846cba93da2cc4f40ff639bb9a5e30b02a4fa4d2f3180618593abd200b23ed6f2d1f7c9c435e615abf26e8d254dc1141b46680ab7710ca46feec6e77cd0de60705485ff1a9a0b2696e2e871cac448d27321df37efbc476c9d8c398bc20621244e8f2296551a0d9171d47127e1b6d8dae2f9fcaaf6ad974d9ccfbc666c9feaf90b52eb0e663f1da6393483ca39202e81f876fa78b0059316c9bf70e5bc97f38fd875c4116c50a03611c8326f21b185fc0c435384ba939a88c82a1ad40809e8089ea7392e6df74e92ac0d9bdb273034f981163aed105102e8d2d76a65d940383bf9f79fc4573b5d30a45b8d48f6a2252898f19ea36484c61fd438277538ceaf6b9544315a6f23e92681b060bf68be7e860323b3f5ba166d6bc59441b021a0f624fd0676d50e65bfc6a5d3267a5dc6c68fc7ab8a44ea70a38da3d8041243aa89d6050eb3ce7c38a08760318d91b674cb79f8b9ff7097722b1f831bd1697e5f10f6c4d14c11e402b700f61db1f9e01a52f943f6d81b9e0280f1d4604c0bb8c57c0b5ae5ab96a56aadbfbea7aae1729dc5562152c238f86697888a0340d6733ab988cb7c3d7b64c66bc07be572243c55cdfff54beb0a0d6af467293d7b5848183a1403252f6079cf977c8353ad332795515e997c3223e3da9bbd80a7757dc08c6142a351ff72c85b120ea17cacffdb5fe4ed4bcc0240d71744d372e1caee8f43429eb1d42a0478fe7d57337659651e3f9e5c1b4ffb8ca9c9facbf34d5fea7a1f413fe8cfa420d29ead94e562fda59a76190feb28336d6bb973f17d2c1463180898cbdb9e77f8d75f37799a196238a21a2dd0c48781750ca8a084d5cf112c6200c8587c03860d84dd9a9d40b1d1233aecb29f74966048176a0c415370fefeee6635fd8b7781c9c6d7e6d5594934de2b55121d8addfd37abb65d9b862f413517a542df46bb24000b72390c755b62cdc1a6a32d05e6b71ddd11473a8228fb5118fe62c1757b2d46132505b820d0e06c5917a7726844d86e836f1bf0970df84a29337a6349a145fd115e99b718b8920911a700a720d4c6d8e1a502ecdadd33b952f50a9647b39d35d2ddce4a8729d0050c9ff57d692f29913e37144df7ef2f34ddb855cb2e2458d0a9c2d4c5b89e3c2b91a4b56ea35c8b4afc25fc676733de6f322fcbb84e74e4676408e87c4df8d7d9561b8241a7dc8c15868a01c5cb57fd9501dd3f1340532eeae292f7e497a7d17cb8fd60f5ef2781cc1f7c00706c76a7ad8ae4e93e1a01ee9473eb4a9a192247f9e3547398f2bceda241f0ba7d3e471b6808febfe7282c0fe048030b0d01a7cc6cbea960c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025-01-28-第一篇文章.md</title>
      <link href="/2025/01/28/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2025/01/28/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="标题-壹"><a href="#标题-壹" class="headerlink" title="标题-壹"></a>标题-壹</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }/*自定义字体*/  @font-face {    /* 为载入的字体取名字(随意) */    font-family: 'YSHST';    /* 字体文件地址(相对或者绝对路径都可以) */    src: url(/font/优设好身体.woff2);    /* 定义加粗样式(加粗多少) */    font-weight: normal;    /* 定义字体样式(斜体/非斜体) */    font-style: normal;    /* 定义显示样式 */    font-display: block;  }/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/*导航栏魔改（居中）*//* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -125px;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background:rgb(57, 197, 187);  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.1;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}/*页面样式调节*//*:root已放css最前面*//* :root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);} *//* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}/* 滚动条样式 */::-webkit-scrollbar {  width: 8px;  height: 8px;}::-webkit-scrollbar-track {  background-color: rgba(73, 177, 245, 0.2);  border-radius: 2em;}::-webkit-scrollbar-thumb {  background-color: var(rgba(73, 177, 245, 0.2));  background-image: -webkit-linear-gradient(    45deg,    rgba(255, 255, 255, 0.4) 25%,    transparent 25%,    transparent 50%,    rgba(255, 255, 255, 0.4) 50%,    rgba(255, 255, 255, 0.4) 75%,    transparent 75%,    transparent  );  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: var(rgba(73, 177, 245, 0.2));}/* 欢迎信息 */#welcome-info {  background: linear-gradient(45deg, #b9f4f3, #e3fbf9);  border-radius: 18px;  padding: 8px;}[data-theme="dark"] #welcome-info {  background: #212121;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(57, 197, 187)'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title.js"/>
      <url>/js/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = '愿此行';    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = '终抵群星';    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){now.setTime(now.getTime()+1e3);    var e=new Date("01/28/2025 22:00:00"),t=Math.trunc(234e8+(now-e)/1e3*17),a=(t/1496e5).toFixed(6),o=new Date("01/28/2025 22:00:00"),n=(now-o)/1e3/60/60/24,r=Math.floor(n),i=(now-o)/1e3/60/60-24*r,s=Math.floor(i);1==String(s).length&&(s="0"+s);    var d=(now-o)/1e3/60-1440*r-60*s,l=Math.floor(d);1==String(l).length&&(l="0"+l);var g=(now-o)/1e3-86400*r-3600*s-60*l,b=Math.round(g);1==String(b).length&&(b="0"+b);let c="";c=s<18&&s>=9?`<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg' title='什么时候能够实现财富自由呀~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`:`<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg' title='下班了就该开开心心地玩耍~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=c)}setInterval((()=>{createtime()}),1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/txmap.js"/>
      <url>/js/txmap.js</url>
      
        <content type="html"><![CDATA[//get请求$.ajax({    type: 'get',    url: 'https://apis.map.qq.com/ws/location/v1/ip',    data: {        key: '6SMBZ-5PHKT-JSQXK-VFKNX-IPMQO-UIFFE',        output: 'jsonp',    },    dataType: 'jsonp',    success: function (res) {        ipLoacation = res;    }})function getDistance(e1, n1, e2, n2) {    const R = 6371    const { sin, cos, asin, PI, hypot } = Math    let getPoint = (e, n) => {        e *= PI / 180        n *= PI / 180        return { x: cos(n) * cos(e), y: cos(n) * sin(e), z: sin(n) }    }    let a = getPoint(e1, n1)    let b = getPoint(e2, n2)    let c = hypot(a.x - b.x, a.y - b.y, a.z - b.z)    let r = asin(c / 2) * 2 * R    return Math.round(r);}function showWelcome() {    let dist = getDistance(113.34499552, 23.15537143, ipLoacation.result.location.lng, ipLoacation.result.location.lat); //这里换成自己的经纬度    let pos = ipLoacation.result.ad_info.nation;    let ip;    let posdesc;    //根据国家、省份、城市信息自定义欢迎语    switch (ipLoacation.result.ad_info.nation) {        case "日本":            posdesc = "よろしく，一起去看樱花吗";            break;        case "美国":            posdesc = "Let us live in peace!";            break;        case "英国":            posdesc = "想同你一起夜乘伦敦眼";            break;        case "俄罗斯":            posdesc = "干了这瓶伏特加！";            break;        case "法国":            posdesc = "C'est La Vie";            break;        case "德国":            posdesc = "Die Zeit verging im Fluge.";            break;        case "澳大利亚":            posdesc = "一起去大堡礁吧！";            break;        case "加拿大":            posdesc = "拾起一片枫叶赠予你";            break;        case "中国":            pos = ipLoacation.result.ad_info.province + " " + ipLoacation.result.ad_info.city + " " + ipLoacation.result.ad_info.district;            ip = ipLoacation.result.ip;            switch (ipLoacation.result.ad_info.province) {                case "北京市":                    posdesc = "北——京——欢迎你~~~";                    break;                case "天津市":                    posdesc = "讲段相声吧。";                    break;                case "河北省":                    posdesc = "山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。";                    break;                case "山西省":                    posdesc = "展开坐具长三尺，已占山河五百余。";                    break;                case "内蒙古自治区":                    posdesc = "天苍苍，野茫茫，风吹草低见牛羊。";                    break;                case "辽宁省":                    posdesc = "我想吃烤鸡架！";                    break;                case "吉林省":                    posdesc = "状元阁就是东北烧烤之王。";                    break;                case "黑龙江省":                    posdesc = "很喜欢哈尔滨大剧院。";                    break;                case "上海市":                    posdesc = "众所周知，中国只有两个城市。";                    break;                case "江苏省":                    switch (ipLoacation.result.ad_info.city) {                        case "南京市":                            posdesc = "这是我挺想去的城市啦。";                            break;                        case "苏州市":                            posdesc = "上有天堂，下有苏杭。";                            break;                        default:                            posdesc = "散装是必须要散装的。";                            break;                    }                    break;                case "浙江省":                    posdesc = "东风渐绿西湖柳，雁已还人未南归。";                    break;                case "河南省":                    switch (ipLoacation.result.ad_info.city) {                        case "郑州市":                            posdesc = "豫州之域，天地之中。";                            break;                        case "南阳市":                            posdesc = "臣本布衣，躬耕于南阳。此南阳非彼南阳！";                            break;                        case "驻马店市":                            posdesc = "峰峰有奇石，石石挟仙气。嵖岈山的花很美哦！";                            break;                        case "开封市":                            posdesc = "刚正不阿包青天。";                            break;                        case "洛阳市":                            posdesc = "洛阳牡丹甲天下。";                            break;                        default:                            posdesc = "可否带我品尝河南烩面啦？";                            break;                    }                    break;                case "安徽省":                    posdesc = "蚌埠住了，芜湖起飞。";                    break;                case "福建省":                    posdesc = "井邑白云间，岩城远带山。";                    break;                case "江西省":                    posdesc = "落霞与孤鹜齐飞，秋水共长天一色。";                    break;                case "山东省":                    posdesc = "遥望齐州九点烟，一泓海水杯中泻。";                    break;                case "湖北省":                    posdesc = "来碗热干面！";                    break;                case "湖南省":                    posdesc = "74751，长沙斯塔克。";                    break;                case "广东省":                    posdesc = "老板来两斤福建人。";                    break;                case "广西壮族自治区":                    posdesc = "桂林山水甲天下。";                    break;                case "海南省":                    posdesc = "朝观日出逐白浪，夕看云起收霞光。";                    break;                case "四川省":                    posdesc = "康康川妹子。";                    break;                case "贵州省":                    posdesc = "茅台，学生，再塞200。";                    break;                case "云南省":                    posdesc = "玉龙飞舞云缠绕，万仞冰川直耸天。";                    break;                case "西藏自治区":                    posdesc = "躺在茫茫草原上，仰望蓝天。";                    break;                case "陕西省":                    posdesc = "来份臊子面加馍。";                    break;                case "甘肃省":                    posdesc = "羌笛何须怨杨柳，春风不度玉门关。";                    break;                case "青海省":                    posdesc = "牛肉干和老酸奶都好好吃。";                    break;                case "宁夏回族自治区":                    posdesc = "大漠孤烟直，长河落日圆。";                    break;                case "新疆维吾尔自治区":                    posdesc = "驼铃古道丝绸路，胡马犹闻唐汉风。";                    break;                case "台湾省":                    posdesc = "我在这头，大陆在那头。";                    break;                case "香港特别行政区":                    posdesc = "永定贼有残留地鬼嚎，迎击光非岁玉。";                    break;                case "澳门特别行政区":                    posdesc = "性感荷官，在线发牌。";                    break;                default:                    posdesc = "带我去你的城市逛逛吧！";                    break;            }            break;        default:            posdesc = "带我去你的国家逛逛吧。";            break;    }    //根据本地时间切换欢迎语    let timeChange;    let date = new Date();    if (date.getHours() >= 5 && date.getHours() < 11) timeChange = "<span>上午好</span>，一日之计在于晨！";    else if (date.getHours() >= 11 && date.getHours() < 13) timeChange = "<span>中午好</span>，该摸鱼吃午饭了。";    else if (date.getHours() >= 13 && date.getHours() < 15) timeChange = "<span>下午好</span>，懒懒地睡个午觉吧！";    else if (date.getHours() >= 15 && date.getHours() < 16) timeChange = "<span>三点几啦</span>，一起饮茶呀！";    else if (date.getHours() >= 16 && date.getHours() < 19) timeChange = "<span>夕阳无限好！</span>";    else if (date.getHours() >= 19 && date.getHours() < 24) timeChange = "<span>晚上好</span>，夜生活嗨起来！";    else timeChange = "夜深了，早点休息，少熬夜。";    try {        //自定义文本和需要放的位置        document.getElementById("welcome-info").innerHTML =            `<b><center>🎉 欢迎信息 🎉</center>&emsp;&emsp;欢迎来自 <span style="color:var(--theme-color)">${pos}</span> 的小伙伴，${timeChange}您现在距离站长约 <span style="color:var(--theme-color)">${dist}</span> 公里，当前的IP地址为： <span style="color:var(--theme-color)">${ip}</span>， ${posdesc}</b>`;    } catch (err) {        // console.log("Pjax无法获取#welcome-info元素🙄🙄🙄")    }}window.onload = showWelcome;// 如果使用了pjax在加上下面这行代码// document.addEventListener('pjax:complete', showWelcome);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
